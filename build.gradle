import io.bitrise.trace.internal.UpdateChangeLogTask

buildscript {
    final Properties traceGradlePluginProperties = new Properties()
    final File traceGradlePluginPropertiesFile = new File(getProject().getRootDir().getAbsolutePath() + ("/trace-gradle-plugin/gradle.properties"))
    traceGradlePluginPropertiesFile.withInputStream {
        traceGradlePluginProperties.load(it)
    }

    ext.traceVersions = [
            'traceGradlePlugin': traceGradlePluginProperties.get("version"),
            'traceSdk'         : project(':trace-sdk').property('version')
    ]

    repositories {
        mavenLocal() // To check for locally published trace-gradle-plugin artifact
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.2'
        classpath files('./buildSrc/build/classes/java/main')
    }
}

plugins {
    id "org.sonarqube" version "3.0"
}

apply from: "versions.gradle"

allprojects {
    repositories {
        mavenLocal() // For allowing the usage of local publishing and downloading them from there
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

/**
 * Internal task that updates the CHANGELOG.md with the commit messages since the last tag. Input
 * should be the directory names of the modules that should be updated. Example usage:
 * <code>./gradlew updateChangeLog -PmoduleDirNames='["trace-sdk", "trace-gradle-plugin"]'</code>
 */
task updateChangeLog(type: UpdateChangeLogTask) {
    def input = project.properties.get(PROPERTY_NAME_MODULES_TO_UPDATE, null)
    if (input == null) {
        return
    }

    moduleDirNames = Eval.me(input)
    group = "trace"
    description = "Internal task that updates the CHANGELOG.md with the commit messages since the last tag"
}

/**
 * Internal task that creates a tag for the given module. Input should be the directory name of the
 * module that should be tagged. Example usage:
 * <code>./gradlew tagModule -PmoduleToTag=trace-sdk</code>
 */
task tagModule() {
    def input = project.properties.get("moduleToTag", null)
    if (input == null) {
        return
    }

    logger.lifecycle("Creating tag for module \"{}\"", input.toString())
    final Properties moduleProperties = new Properties()
    final File modulePropertiesFile = new File(getProject().getRootDir().getAbsolutePath() + ("/" + input + "/gradle.properties"))
    logger.debug("Path for properties file \"{}\"", modulePropertiesFile.getAbsolutePath())
    modulePropertiesFile.withInputStream {
        moduleProperties.load(it)
    }
    def tagName = input + "_" + moduleProperties.get("version")
    logger.lifecycle("Name of the tag will be \"{}\"", tagName)

    exec {
        commandLine("git", "tag", tagName)
        commandLine("git", "push", "origin", tagName)
    }

    group = "trace"
    description = "Internal task that creates a tag for the given module"
}

sonarqube {
    properties {
        property "sonar.projectKey", "bitrise-io_trace-android-sdk"
        property "sonar.organization", "bitrise-io"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}
