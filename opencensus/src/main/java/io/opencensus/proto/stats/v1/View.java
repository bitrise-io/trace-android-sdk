// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/stats/v1/stats.proto

package io.opencensus.proto.stats.v1;

/**
 * Protobuf type {@code opencensus.proto.stats.v1.View}
 */
public  final class View extends
    com.google.protobuf.GeneratedMessageLite<
        View, View.Builder> implements
    // @@protoc_insertion_point(message_implements:opencensus.proto.stats.v1.View)
    ViewOrBuilder {
  private View() {
    name_ = "";
    description_ = "";
    columns_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
  }
  private int aggregationCase_ = 0;
  private java.lang.Object aggregation_;
  public enum AggregationCase {
    COUNT_AGGREGATION(5),
    SUM_AGGREGATION(6),
    LAST_VALUE_AGGREGATION(7),
    DISTRIBUTION_AGGREGATION(8),
    AGGREGATION_NOT_SET(0);
    private final int value;
    private AggregationCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static AggregationCase valueOf(int value) {
      return forNumber(value);
    }

    public static AggregationCase forNumber(int value) {
      switch (value) {
        case 5: return COUNT_AGGREGATION;
        case 6: return SUM_AGGREGATION;
        case 7: return LAST_VALUE_AGGREGATION;
        case 8: return DISTRIBUTION_AGGREGATION;
        case 0: return AGGREGATION_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @java.lang.Override
  public AggregationCase
  getAggregationCase() {
    return AggregationCase.forNumber(
        aggregationCase_);
  }

  private void clearAggregation() {
    aggregationCase_ = 0;
    aggregation_ = null;
  }

  public static final int NAME_FIELD_NUMBER = 1;
  private java.lang.String name_;
  /**
   * <pre>
   * A string by which the View will be referred to, e.g. "rpc_latency". Names MUST be unique
   * within the library.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    return name_;
  }
  /**
   * <pre>
   * A string by which the View will be referred to, e.g. "rpc_latency". Names MUST be unique
   * within the library.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(name_);
  }
  /**
   * <pre>
   * A string by which the View will be referred to, e.g. "rpc_latency". Names MUST be unique
   * within the library.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @param value The name to set.
   */
  private void setName(
      java.lang.String value) {
    value.getClass();
  
    name_ = value;
  }
  /**
   * <pre>
   * A string by which the View will be referred to, e.g. "rpc_latency". Names MUST be unique
   * within the library.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  private void clearName() {
    
    name_ = getDefaultInstance().getName();
  }
  /**
   * <pre>
   * A string by which the View will be referred to, e.g. "rpc_latency". Names MUST be unique
   * within the library.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @param value The bytes for name to set.
   */
  private void setNameBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    name_ = value.toStringUtf8();
    
  }

  public static final int DESCRIPTION_FIELD_NUMBER = 2;
  private java.lang.String description_;
  /**
   * <pre>
   * Describes the view, e.g. "RPC latency distribution"
   * </pre>
   *
   * <code>string description = 2;</code>
   * @return The description.
   */
  @java.lang.Override
  public java.lang.String getDescription() {
    return description_;
  }
  /**
   * <pre>
   * Describes the view, e.g. "RPC latency distribution"
   * </pre>
   *
   * <code>string description = 2;</code>
   * @return The bytes for description.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDescriptionBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(description_);
  }
  /**
   * <pre>
   * Describes the view, e.g. "RPC latency distribution"
   * </pre>
   *
   * <code>string description = 2;</code>
   * @param value The description to set.
   */
  private void setDescription(
      java.lang.String value) {
    value.getClass();
  
    description_ = value;
  }
  /**
   * <pre>
   * Describes the view, e.g. "RPC latency distribution"
   * </pre>
   *
   * <code>string description = 2;</code>
   */
  private void clearDescription() {
    
    description_ = getDefaultInstance().getDescription();
  }
  /**
   * <pre>
   * Describes the view, e.g. "RPC latency distribution"
   * </pre>
   *
   * <code>string description = 2;</code>
   * @param value The bytes for description to set.
   */
  private void setDescriptionBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    description_ = value.toStringUtf8();
    
  }

  public static final int MEASURE_FIELD_NUMBER = 3;
  private io.opencensus.proto.stats.v1.Measure measure_;
  /**
   * <pre>
   * The Measure to which this view is applied.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.Measure measure = 3;</code>
   */
  @java.lang.Override
  public boolean hasMeasure() {
    return measure_ != null;
  }
  /**
   * <pre>
   * The Measure to which this view is applied.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.Measure measure = 3;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.stats.v1.Measure getMeasure() {
    return measure_ == null ? io.opencensus.proto.stats.v1.Measure.getDefaultInstance() : measure_;
  }
  /**
   * <pre>
   * The Measure to which this view is applied.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.Measure measure = 3;</code>
   */
  private void setMeasure(io.opencensus.proto.stats.v1.Measure value) {
    value.getClass();
  measure_ = value;
    
    }
  /**
   * <pre>
   * The Measure to which this view is applied.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.Measure measure = 3;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeMeasure(io.opencensus.proto.stats.v1.Measure value) {
    value.getClass();
  if (measure_ != null &&
        measure_ != io.opencensus.proto.stats.v1.Measure.getDefaultInstance()) {
      measure_ =
        io.opencensus.proto.stats.v1.Measure.newBuilder(measure_).mergeFrom(value).buildPartial();
    } else {
      measure_ = value;
    }
    
  }
  /**
   * <pre>
   * The Measure to which this view is applied.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.Measure measure = 3;</code>
   */
  private void clearMeasure() {  measure_ = null;
    
  }

  public static final int COLUMNS_FIELD_NUMBER = 4;
  private com.google.protobuf.Internal.ProtobufList<java.lang.String> columns_;
  /**
   * <pre>
   * An array of tag keys. These values associated with tags of this name form the basis by which
   * individual stats will be aggregated (one aggregation per unique tag value). If none are
   * provided, then all data is recorded in a single aggregation.
   * </pre>
   *
   * <code>repeated string columns = 4;</code>
   * @return A list containing the columns.
   */
  @java.lang.Override
  public java.util.List<java.lang.String> getColumnsList() {
    return columns_;
  }
  /**
   * <pre>
   * An array of tag keys. These values associated with tags of this name form the basis by which
   * individual stats will be aggregated (one aggregation per unique tag value). If none are
   * provided, then all data is recorded in a single aggregation.
   * </pre>
   *
   * <code>repeated string columns = 4;</code>
   * @return The count of columns.
   */
  @java.lang.Override
  public int getColumnsCount() {
    return columns_.size();
  }
  /**
   * <pre>
   * An array of tag keys. These values associated with tags of this name form the basis by which
   * individual stats will be aggregated (one aggregation per unique tag value). If none are
   * provided, then all data is recorded in a single aggregation.
   * </pre>
   *
   * <code>repeated string columns = 4;</code>
   * @param index The index of the element to return.
   * @return The columns at the given index.
   */
  @java.lang.Override
  public java.lang.String getColumns(int index) {
    return columns_.get(index);
  }
  /**
   * <pre>
   * An array of tag keys. These values associated with tags of this name form the basis by which
   * individual stats will be aggregated (one aggregation per unique tag value). If none are
   * provided, then all data is recorded in a single aggregation.
   * </pre>
   *
   * <code>repeated string columns = 4;</code>
   * @param index The index of the value to return.
   * @return The bytes of the columns at the given index.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getColumnsBytes(int index) {
    return com.google.protobuf.ByteString.copyFromUtf8(
        columns_.get(index));
  }
  private void ensureColumnsIsMutable() {
    com.google.protobuf.Internal.ProtobufList<java.lang.String> tmp =
        columns_;  if (!tmp.isModifiable()) {
      columns_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <pre>
   * An array of tag keys. These values associated with tags of this name form the basis by which
   * individual stats will be aggregated (one aggregation per unique tag value). If none are
   * provided, then all data is recorded in a single aggregation.
   * </pre>
   *
   * <code>repeated string columns = 4;</code>
   * @param index The index to set the value at.
   * @param value The columns to set.
   */
  private void setColumns(
      int index, java.lang.String value) {
    value.getClass();
  ensureColumnsIsMutable();
    columns_.set(index, value);
  }
  /**
   * <pre>
   * An array of tag keys. These values associated with tags of this name form the basis by which
   * individual stats will be aggregated (one aggregation per unique tag value). If none are
   * provided, then all data is recorded in a single aggregation.
   * </pre>
   *
   * <code>repeated string columns = 4;</code>
   * @param value The columns to add.
   */
  private void addColumns(
      java.lang.String value) {
    value.getClass();
  ensureColumnsIsMutable();
    columns_.add(value);
  }
  /**
   * <pre>
   * An array of tag keys. These values associated with tags of this name form the basis by which
   * individual stats will be aggregated (one aggregation per unique tag value). If none are
   * provided, then all data is recorded in a single aggregation.
   * </pre>
   *
   * <code>repeated string columns = 4;</code>
   * @param values The columns to add.
   */
  private void addAllColumns(
      java.lang.Iterable<java.lang.String> values) {
    ensureColumnsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, columns_);
  }
  /**
   * <pre>
   * An array of tag keys. These values associated with tags of this name form the basis by which
   * individual stats will be aggregated (one aggregation per unique tag value). If none are
   * provided, then all data is recorded in a single aggregation.
   * </pre>
   *
   * <code>repeated string columns = 4;</code>
   */
  private void clearColumns() {
    columns_ = com.google.protobuf.GeneratedMessageLite.emptyProtobufList();
  }
  /**
   * <pre>
   * An array of tag keys. These values associated with tags of this name form the basis by which
   * individual stats will be aggregated (one aggregation per unique tag value). If none are
   * provided, then all data is recorded in a single aggregation.
   * </pre>
   *
   * <code>repeated string columns = 4;</code>
   * @param value The bytes of the columns to add.
   */
  private void addColumnsBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    ensureColumnsIsMutable();
    columns_.add(value.toStringUtf8());
  }

  public static final int COUNT_AGGREGATION_FIELD_NUMBER = 5;
  /**
   * <pre>
   * Counts the number of measurements recorded.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;</code>
   */
  @java.lang.Override
  public boolean hasCountAggregation() {
    return aggregationCase_ == 5;
  }
  /**
   * <pre>
   * Counts the number of measurements recorded.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.stats.v1.CountAggregation getCountAggregation() {
    if (aggregationCase_ == 5) {
       return (io.opencensus.proto.stats.v1.CountAggregation) aggregation_;
    }
    return io.opencensus.proto.stats.v1.CountAggregation.getDefaultInstance();
  }
  /**
   * <pre>
   * Counts the number of measurements recorded.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;</code>
   */
  private void setCountAggregation(io.opencensus.proto.stats.v1.CountAggregation value) {
    value.getClass();
  aggregation_ = value;
    aggregationCase_ = 5;
  }
  /**
   * <pre>
   * Counts the number of measurements recorded.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;</code>
   */
  private void mergeCountAggregation(io.opencensus.proto.stats.v1.CountAggregation value) {
    value.getClass();
  if (aggregationCase_ == 5 &&
        aggregation_ != io.opencensus.proto.stats.v1.CountAggregation.getDefaultInstance()) {
      aggregation_ = io.opencensus.proto.stats.v1.CountAggregation.newBuilder((io.opencensus.proto.stats.v1.CountAggregation) aggregation_)
          .mergeFrom(value).buildPartial();
    } else {
      aggregation_ = value;
    }
    aggregationCase_ = 5;
  }
  /**
   * <pre>
   * Counts the number of measurements recorded.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;</code>
   */
  private void clearCountAggregation() {
    if (aggregationCase_ == 5) {
      aggregationCase_ = 0;
      aggregation_ = null;
    }
  }

  public static final int SUM_AGGREGATION_FIELD_NUMBER = 6;
  /**
   * <pre>
   * Indicates that data collected and aggregated with this Aggregation will be summed up.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;</code>
   */
  @java.lang.Override
  public boolean hasSumAggregation() {
    return aggregationCase_ == 6;
  }
  /**
   * <pre>
   * Indicates that data collected and aggregated with this Aggregation will be summed up.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.stats.v1.SumAggregation getSumAggregation() {
    if (aggregationCase_ == 6) {
       return (io.opencensus.proto.stats.v1.SumAggregation) aggregation_;
    }
    return io.opencensus.proto.stats.v1.SumAggregation.getDefaultInstance();
  }
  /**
   * <pre>
   * Indicates that data collected and aggregated with this Aggregation will be summed up.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;</code>
   */
  private void setSumAggregation(io.opencensus.proto.stats.v1.SumAggregation value) {
    value.getClass();
  aggregation_ = value;
    aggregationCase_ = 6;
  }
  /**
   * <pre>
   * Indicates that data collected and aggregated with this Aggregation will be summed up.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;</code>
   */
  private void mergeSumAggregation(io.opencensus.proto.stats.v1.SumAggregation value) {
    value.getClass();
  if (aggregationCase_ == 6 &&
        aggregation_ != io.opencensus.proto.stats.v1.SumAggregation.getDefaultInstance()) {
      aggregation_ = io.opencensus.proto.stats.v1.SumAggregation.newBuilder((io.opencensus.proto.stats.v1.SumAggregation) aggregation_)
          .mergeFrom(value).buildPartial();
    } else {
      aggregation_ = value;
    }
    aggregationCase_ = 6;
  }
  /**
   * <pre>
   * Indicates that data collected and aggregated with this Aggregation will be summed up.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;</code>
   */
  private void clearSumAggregation() {
    if (aggregationCase_ == 6) {
      aggregationCase_ = 0;
      aggregation_ = null;
    }
  }

  public static final int LAST_VALUE_AGGREGATION_FIELD_NUMBER = 7;
  /**
   * <pre>
   * Indicates that data collected and aggregated with this Aggregation will represent the last
   * recorded value. This is useful to support Gauges.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;</code>
   */
  @java.lang.Override
  public boolean hasLastValueAggregation() {
    return aggregationCase_ == 7;
  }
  /**
   * <pre>
   * Indicates that data collected and aggregated with this Aggregation will represent the last
   * recorded value. This is useful to support Gauges.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.stats.v1.LastValueAggregation getLastValueAggregation() {
    if (aggregationCase_ == 7) {
       return (io.opencensus.proto.stats.v1.LastValueAggregation) aggregation_;
    }
    return io.opencensus.proto.stats.v1.LastValueAggregation.getDefaultInstance();
  }
  /**
   * <pre>
   * Indicates that data collected and aggregated with this Aggregation will represent the last
   * recorded value. This is useful to support Gauges.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;</code>
   */
  private void setLastValueAggregation(io.opencensus.proto.stats.v1.LastValueAggregation value) {
    value.getClass();
  aggregation_ = value;
    aggregationCase_ = 7;
  }
  /**
   * <pre>
   * Indicates that data collected and aggregated with this Aggregation will represent the last
   * recorded value. This is useful to support Gauges.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;</code>
   */
  private void mergeLastValueAggregation(io.opencensus.proto.stats.v1.LastValueAggregation value) {
    value.getClass();
  if (aggregationCase_ == 7 &&
        aggregation_ != io.opencensus.proto.stats.v1.LastValueAggregation.getDefaultInstance()) {
      aggregation_ = io.opencensus.proto.stats.v1.LastValueAggregation.newBuilder((io.opencensus.proto.stats.v1.LastValueAggregation) aggregation_)
          .mergeFrom(value).buildPartial();
    } else {
      aggregation_ = value;
    }
    aggregationCase_ = 7;
  }
  /**
   * <pre>
   * Indicates that data collected and aggregated with this Aggregation will represent the last
   * recorded value. This is useful to support Gauges.
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;</code>
   */
  private void clearLastValueAggregation() {
    if (aggregationCase_ == 7) {
      aggregationCase_ = 0;
      aggregation_ = null;
    }
  }

  public static final int DISTRIBUTION_AGGREGATION_FIELD_NUMBER = 8;
  /**
   * <pre>
   * Indicates that the desired Aggregation is a histogram distribution. A distribution
   * Aggregation may contain a histogram of the values in the population. User should define the
   * bucket boundaries for that histogram (see DistributionAggregation).
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;</code>
   */
  @java.lang.Override
  public boolean hasDistributionAggregation() {
    return aggregationCase_ == 8;
  }
  /**
   * <pre>
   * Indicates that the desired Aggregation is a histogram distribution. A distribution
   * Aggregation may contain a histogram of the values in the population. User should define the
   * bucket boundaries for that histogram (see DistributionAggregation).
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.stats.v1.DistributionAggregation getDistributionAggregation() {
    if (aggregationCase_ == 8) {
       return (io.opencensus.proto.stats.v1.DistributionAggregation) aggregation_;
    }
    return io.opencensus.proto.stats.v1.DistributionAggregation.getDefaultInstance();
  }
  /**
   * <pre>
   * Indicates that the desired Aggregation is a histogram distribution. A distribution
   * Aggregation may contain a histogram of the values in the population. User should define the
   * bucket boundaries for that histogram (see DistributionAggregation).
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;</code>
   */
  private void setDistributionAggregation(io.opencensus.proto.stats.v1.DistributionAggregation value) {
    value.getClass();
  aggregation_ = value;
    aggregationCase_ = 8;
  }
  /**
   * <pre>
   * Indicates that the desired Aggregation is a histogram distribution. A distribution
   * Aggregation may contain a histogram of the values in the population. User should define the
   * bucket boundaries for that histogram (see DistributionAggregation).
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;</code>
   */
  private void mergeDistributionAggregation(io.opencensus.proto.stats.v1.DistributionAggregation value) {
    value.getClass();
  if (aggregationCase_ == 8 &&
        aggregation_ != io.opencensus.proto.stats.v1.DistributionAggregation.getDefaultInstance()) {
      aggregation_ = io.opencensus.proto.stats.v1.DistributionAggregation.newBuilder((io.opencensus.proto.stats.v1.DistributionAggregation) aggregation_)
          .mergeFrom(value).buildPartial();
    } else {
      aggregation_ = value;
    }
    aggregationCase_ = 8;
  }
  /**
   * <pre>
   * Indicates that the desired Aggregation is a histogram distribution. A distribution
   * Aggregation may contain a histogram of the values in the population. User should define the
   * bucket boundaries for that histogram (see DistributionAggregation).
   * </pre>
   *
   * <code>.opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;</code>
   */
  private void clearDistributionAggregation() {
    if (aggregationCase_ == 8) {
      aggregationCase_ = 0;
      aggregation_ = null;
    }
  }

  public static io.opencensus.proto.stats.v1.View parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.stats.v1.View parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.stats.v1.View parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.stats.v1.View parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.stats.v1.View parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.stats.v1.View parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.stats.v1.View parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.stats.v1.View parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.opencensus.proto.stats.v1.View parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.stats.v1.View parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.opencensus.proto.stats.v1.View parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.stats.v1.View parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(io.opencensus.proto.stats.v1.View prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * Protobuf type {@code opencensus.proto.stats.v1.View}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        io.opencensus.proto.stats.v1.View, Builder> implements
      // @@protoc_insertion_point(builder_implements:opencensus.proto.stats.v1.View)
      io.opencensus.proto.stats.v1.ViewOrBuilder {
    // Construct using io.opencensus.proto.stats.v1.View.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @java.lang.Override
    public AggregationCase
        getAggregationCase() {
      return instance.getAggregationCase();
    }

    public Builder clearAggregation() {
      copyOnWrite();
      instance.clearAggregation();
      return this;
    }


    /**
     * <pre>
     * A string by which the View will be referred to, e.g. "rpc_latency". Names MUST be unique
     * within the library.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      return instance.getName();
    }
    /**
     * <pre>
     * A string by which the View will be referred to, e.g. "rpc_latency". Names MUST be unique
     * within the library.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      return instance.getNameBytes();
    }
    /**
     * <pre>
     * A string by which the View will be referred to, e.g. "rpc_latency". Names MUST be unique
     * within the library.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      copyOnWrite();
      instance.setName(value);
      return this;
    }
    /**
     * <pre>
     * A string by which the View will be referred to, e.g. "rpc_latency". Names MUST be unique
     * within the library.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      copyOnWrite();
      instance.clearName();
      return this;
    }
    /**
     * <pre>
     * A string by which the View will be referred to, e.g. "rpc_latency". Names MUST be unique
     * within the library.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * Describes the view, e.g. "RPC latency distribution"
     * </pre>
     *
     * <code>string description = 2;</code>
     * @return The description.
     */
    @java.lang.Override
    public java.lang.String getDescription() {
      return instance.getDescription();
    }
    /**
     * <pre>
     * Describes the view, e.g. "RPC latency distribution"
     * </pre>
     *
     * <code>string description = 2;</code>
     * @return The bytes for description.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      return instance.getDescriptionBytes();
    }
    /**
     * <pre>
     * Describes the view, e.g. "RPC latency distribution"
     * </pre>
     *
     * <code>string description = 2;</code>
     * @param value The description to set.
     * @return This builder for chaining.
     */
    public Builder setDescription(
        java.lang.String value) {
      copyOnWrite();
      instance.setDescription(value);
      return this;
    }
    /**
     * <pre>
     * Describes the view, e.g. "RPC latency distribution"
     * </pre>
     *
     * <code>string description = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearDescription() {
      copyOnWrite();
      instance.clearDescription();
      return this;
    }
    /**
     * <pre>
     * Describes the view, e.g. "RPC latency distribution"
     * </pre>
     *
     * <code>string description = 2;</code>
     * @param value The bytes for description to set.
     * @return This builder for chaining.
     */
    public Builder setDescriptionBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDescriptionBytes(value);
      return this;
    }

    /**
     * <pre>
     * The Measure to which this view is applied.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.Measure measure = 3;</code>
     */
    @java.lang.Override
    public boolean hasMeasure() {
      return instance.hasMeasure();
    }
    /**
     * <pre>
     * The Measure to which this view is applied.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.Measure measure = 3;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.stats.v1.Measure getMeasure() {
      return instance.getMeasure();
    }
    /**
     * <pre>
     * The Measure to which this view is applied.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.Measure measure = 3;</code>
     */
    public Builder setMeasure(io.opencensus.proto.stats.v1.Measure value) {
      copyOnWrite();
      instance.setMeasure(value);
      return this;
      }
    /**
     * <pre>
     * The Measure to which this view is applied.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.Measure measure = 3;</code>
     */
    public Builder setMeasure(
        io.opencensus.proto.stats.v1.Measure.Builder builderForValue) {
      copyOnWrite();
      instance.setMeasure(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The Measure to which this view is applied.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.Measure measure = 3;</code>
     */
    public Builder mergeMeasure(io.opencensus.proto.stats.v1.Measure value) {
      copyOnWrite();
      instance.mergeMeasure(value);
      return this;
    }
    /**
     * <pre>
     * The Measure to which this view is applied.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.Measure measure = 3;</code>
     */
    public Builder clearMeasure() {  copyOnWrite();
      instance.clearMeasure();
      return this;
    }

    /**
     * <pre>
     * An array of tag keys. These values associated with tags of this name form the basis by which
     * individual stats will be aggregated (one aggregation per unique tag value). If none are
     * provided, then all data is recorded in a single aggregation.
     * </pre>
     *
     * <code>repeated string columns = 4;</code>
     * @return A list containing the columns.
     */
    @java.lang.Override
    public java.util.List<java.lang.String>
        getColumnsList() {
      return java.util.Collections.unmodifiableList(
          instance.getColumnsList());
    }
    /**
     * <pre>
     * An array of tag keys. These values associated with tags of this name form the basis by which
     * individual stats will be aggregated (one aggregation per unique tag value). If none are
     * provided, then all data is recorded in a single aggregation.
     * </pre>
     *
     * <code>repeated string columns = 4;</code>
     * @return The count of columns.
     */
    @java.lang.Override
    public int getColumnsCount() {
      return instance.getColumnsCount();
    }
    /**
     * <pre>
     * An array of tag keys. These values associated with tags of this name form the basis by which
     * individual stats will be aggregated (one aggregation per unique tag value). If none are
     * provided, then all data is recorded in a single aggregation.
     * </pre>
     *
     * <code>repeated string columns = 4;</code>
     * @param index The index of the element to return.
     * @return The columns at the given index.
     */
    @java.lang.Override
    public java.lang.String getColumns(int index) {
      return instance.getColumns(index);
    }
    /**
     * <pre>
     * An array of tag keys. These values associated with tags of this name form the basis by which
     * individual stats will be aggregated (one aggregation per unique tag value). If none are
     * provided, then all data is recorded in a single aggregation.
     * </pre>
     *
     * <code>repeated string columns = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the columns at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getColumnsBytes(int index) {
      return instance.getColumnsBytes(index);
    }
    /**
     * <pre>
     * An array of tag keys. These values associated with tags of this name form the basis by which
     * individual stats will be aggregated (one aggregation per unique tag value). If none are
     * provided, then all data is recorded in a single aggregation.
     * </pre>
     *
     * <code>repeated string columns = 4;</code>
     * @param index The index to set the value at.
     * @param value The columns to set.
     * @return This builder for chaining.
     */
    public Builder setColumns(
        int index, java.lang.String value) {
      copyOnWrite();
      instance.setColumns(index, value);
      return this;
    }
    /**
     * <pre>
     * An array of tag keys. These values associated with tags of this name form the basis by which
     * individual stats will be aggregated (one aggregation per unique tag value). If none are
     * provided, then all data is recorded in a single aggregation.
     * </pre>
     *
     * <code>repeated string columns = 4;</code>
     * @param value The columns to add.
     * @return This builder for chaining.
     */
    public Builder addColumns(
        java.lang.String value) {
      copyOnWrite();
      instance.addColumns(value);
      return this;
    }
    /**
     * <pre>
     * An array of tag keys. These values associated with tags of this name form the basis by which
     * individual stats will be aggregated (one aggregation per unique tag value). If none are
     * provided, then all data is recorded in a single aggregation.
     * </pre>
     *
     * <code>repeated string columns = 4;</code>
     * @param values The columns to add.
     * @return This builder for chaining.
     */
    public Builder addAllColumns(
        java.lang.Iterable<java.lang.String> values) {
      copyOnWrite();
      instance.addAllColumns(values);
      return this;
    }
    /**
     * <pre>
     * An array of tag keys. These values associated with tags of this name form the basis by which
     * individual stats will be aggregated (one aggregation per unique tag value). If none are
     * provided, then all data is recorded in a single aggregation.
     * </pre>
     *
     * <code>repeated string columns = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearColumns() {
      copyOnWrite();
      instance.clearColumns();
      return this;
    }
    /**
     * <pre>
     * An array of tag keys. These values associated with tags of this name form the basis by which
     * individual stats will be aggregated (one aggregation per unique tag value). If none are
     * provided, then all data is recorded in a single aggregation.
     * </pre>
     *
     * <code>repeated string columns = 4;</code>
     * @param value The bytes of the columns to add.
     * @return This builder for chaining.
     */
    public Builder addColumnsBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.addColumnsBytes(value);
      return this;
    }

    /**
     * <pre>
     * Counts the number of measurements recorded.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;</code>
     */
    @java.lang.Override
    public boolean hasCountAggregation() {
      return instance.hasCountAggregation();
    }
    /**
     * <pre>
     * Counts the number of measurements recorded.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.stats.v1.CountAggregation getCountAggregation() {
      return instance.getCountAggregation();
    }
    /**
     * <pre>
     * Counts the number of measurements recorded.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;</code>
     */
    public Builder setCountAggregation(io.opencensus.proto.stats.v1.CountAggregation value) {
      copyOnWrite();
      instance.setCountAggregation(value);
      return this;
    }
    /**
     * <pre>
     * Counts the number of measurements recorded.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;</code>
     */
    public Builder setCountAggregation(
        io.opencensus.proto.stats.v1.CountAggregation.Builder builderForValue) {
      copyOnWrite();
      instance.setCountAggregation(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Counts the number of measurements recorded.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;</code>
     */
    public Builder mergeCountAggregation(io.opencensus.proto.stats.v1.CountAggregation value) {
      copyOnWrite();
      instance.mergeCountAggregation(value);
      return this;
    }
    /**
     * <pre>
     * Counts the number of measurements recorded.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.CountAggregation count_aggregation = 5;</code>
     */
    public Builder clearCountAggregation() {
      copyOnWrite();
      instance.clearCountAggregation();
      return this;
    }

    /**
     * <pre>
     * Indicates that data collected and aggregated with this Aggregation will be summed up.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;</code>
     */
    @java.lang.Override
    public boolean hasSumAggregation() {
      return instance.hasSumAggregation();
    }
    /**
     * <pre>
     * Indicates that data collected and aggregated with this Aggregation will be summed up.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.stats.v1.SumAggregation getSumAggregation() {
      return instance.getSumAggregation();
    }
    /**
     * <pre>
     * Indicates that data collected and aggregated with this Aggregation will be summed up.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;</code>
     */
    public Builder setSumAggregation(io.opencensus.proto.stats.v1.SumAggregation value) {
      copyOnWrite();
      instance.setSumAggregation(value);
      return this;
    }
    /**
     * <pre>
     * Indicates that data collected and aggregated with this Aggregation will be summed up.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;</code>
     */
    public Builder setSumAggregation(
        io.opencensus.proto.stats.v1.SumAggregation.Builder builderForValue) {
      copyOnWrite();
      instance.setSumAggregation(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Indicates that data collected and aggregated with this Aggregation will be summed up.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;</code>
     */
    public Builder mergeSumAggregation(io.opencensus.proto.stats.v1.SumAggregation value) {
      copyOnWrite();
      instance.mergeSumAggregation(value);
      return this;
    }
    /**
     * <pre>
     * Indicates that data collected and aggregated with this Aggregation will be summed up.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.SumAggregation sum_aggregation = 6;</code>
     */
    public Builder clearSumAggregation() {
      copyOnWrite();
      instance.clearSumAggregation();
      return this;
    }

    /**
     * <pre>
     * Indicates that data collected and aggregated with this Aggregation will represent the last
     * recorded value. This is useful to support Gauges.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;</code>
     */
    @java.lang.Override
    public boolean hasLastValueAggregation() {
      return instance.hasLastValueAggregation();
    }
    /**
     * <pre>
     * Indicates that data collected and aggregated with this Aggregation will represent the last
     * recorded value. This is useful to support Gauges.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.stats.v1.LastValueAggregation getLastValueAggregation() {
      return instance.getLastValueAggregation();
    }
    /**
     * <pre>
     * Indicates that data collected and aggregated with this Aggregation will represent the last
     * recorded value. This is useful to support Gauges.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;</code>
     */
    public Builder setLastValueAggregation(io.opencensus.proto.stats.v1.LastValueAggregation value) {
      copyOnWrite();
      instance.setLastValueAggregation(value);
      return this;
    }
    /**
     * <pre>
     * Indicates that data collected and aggregated with this Aggregation will represent the last
     * recorded value. This is useful to support Gauges.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;</code>
     */
    public Builder setLastValueAggregation(
        io.opencensus.proto.stats.v1.LastValueAggregation.Builder builderForValue) {
      copyOnWrite();
      instance.setLastValueAggregation(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Indicates that data collected and aggregated with this Aggregation will represent the last
     * recorded value. This is useful to support Gauges.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;</code>
     */
    public Builder mergeLastValueAggregation(io.opencensus.proto.stats.v1.LastValueAggregation value) {
      copyOnWrite();
      instance.mergeLastValueAggregation(value);
      return this;
    }
    /**
     * <pre>
     * Indicates that data collected and aggregated with this Aggregation will represent the last
     * recorded value. This is useful to support Gauges.
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.LastValueAggregation last_value_aggregation = 7;</code>
     */
    public Builder clearLastValueAggregation() {
      copyOnWrite();
      instance.clearLastValueAggregation();
      return this;
    }

    /**
     * <pre>
     * Indicates that the desired Aggregation is a histogram distribution. A distribution
     * Aggregation may contain a histogram of the values in the population. User should define the
     * bucket boundaries for that histogram (see DistributionAggregation).
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;</code>
     */
    @java.lang.Override
    public boolean hasDistributionAggregation() {
      return instance.hasDistributionAggregation();
    }
    /**
     * <pre>
     * Indicates that the desired Aggregation is a histogram distribution. A distribution
     * Aggregation may contain a histogram of the values in the population. User should define the
     * bucket boundaries for that histogram (see DistributionAggregation).
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.stats.v1.DistributionAggregation getDistributionAggregation() {
      return instance.getDistributionAggregation();
    }
    /**
     * <pre>
     * Indicates that the desired Aggregation is a histogram distribution. A distribution
     * Aggregation may contain a histogram of the values in the population. User should define the
     * bucket boundaries for that histogram (see DistributionAggregation).
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;</code>
     */
    public Builder setDistributionAggregation(io.opencensus.proto.stats.v1.DistributionAggregation value) {
      copyOnWrite();
      instance.setDistributionAggregation(value);
      return this;
    }
    /**
     * <pre>
     * Indicates that the desired Aggregation is a histogram distribution. A distribution
     * Aggregation may contain a histogram of the values in the population. User should define the
     * bucket boundaries for that histogram (see DistributionAggregation).
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;</code>
     */
    public Builder setDistributionAggregation(
        io.opencensus.proto.stats.v1.DistributionAggregation.Builder builderForValue) {
      copyOnWrite();
      instance.setDistributionAggregation(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Indicates that the desired Aggregation is a histogram distribution. A distribution
     * Aggregation may contain a histogram of the values in the population. User should define the
     * bucket boundaries for that histogram (see DistributionAggregation).
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;</code>
     */
    public Builder mergeDistributionAggregation(io.opencensus.proto.stats.v1.DistributionAggregation value) {
      copyOnWrite();
      instance.mergeDistributionAggregation(value);
      return this;
    }
    /**
     * <pre>
     * Indicates that the desired Aggregation is a histogram distribution. A distribution
     * Aggregation may contain a histogram of the values in the population. User should define the
     * bucket boundaries for that histogram (see DistributionAggregation).
     * </pre>
     *
     * <code>.opencensus.proto.stats.v1.DistributionAggregation distribution_aggregation = 8;</code>
     */
    public Builder clearDistributionAggregation() {
      copyOnWrite();
      instance.clearDistributionAggregation();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:opencensus.proto.stats.v1.View)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new io.opencensus.proto.stats.v1.View();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "aggregation_",
            "aggregationCase_",
            "name_",
            "description_",
            "measure_",
            "columns_",
            io.opencensus.proto.stats.v1.CountAggregation.class,
            io.opencensus.proto.stats.v1.SumAggregation.class,
            io.opencensus.proto.stats.v1.LastValueAggregation.class,
            io.opencensus.proto.stats.v1.DistributionAggregation.class,
          };
          java.lang.String info =
              "\u0000\b\u0001\u0000\u0001\b\b\u0000\u0001\u0000\u0001\u0208\u0002\u0208\u0003\t" +
              "\u0004\u021a\u0005<\u0000\u0006<\u0000\u0007<\u0000\b<\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<io.opencensus.proto.stats.v1.View> parser = PARSER;
        if (parser == null) {
          synchronized (io.opencensus.proto.stats.v1.View.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<io.opencensus.proto.stats.v1.View>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:opencensus.proto.stats.v1.View)
  private static final io.opencensus.proto.stats.v1.View DEFAULT_INSTANCE;
  static {
    View defaultInstance = new View();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      View.class, defaultInstance);
  }

  public static io.opencensus.proto.stats.v1.View getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<View> PARSER;

  public static com.google.protobuf.Parser<View> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

