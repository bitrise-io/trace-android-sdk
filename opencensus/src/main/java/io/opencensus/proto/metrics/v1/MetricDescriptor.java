// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/metrics/v1/metrics.proto

package io.opencensus.proto.metrics.v1;

/**
 * <pre>
 * Defines a metric type and its schema.
 * </pre>
 *
 * Protobuf type {@code opencensus.proto.metrics.v1.MetricDescriptor}
 */
public  final class MetricDescriptor extends
    com.google.protobuf.GeneratedMessageLite<
        MetricDescriptor, MetricDescriptor.Builder> implements
    // @@protoc_insertion_point(message_implements:opencensus.proto.metrics.v1.MetricDescriptor)
    MetricDescriptorOrBuilder {
  private MetricDescriptor() {
    name_ = "";
    description_ = "";
    unit_ = "";
    labelKeys_ = emptyProtobufList();
  }
  /**
   * <pre>
   * The kind of metric. It describes how the data is reported.
   * A gauge is an instantaneous measurement of a value.
   * A cumulative measurement is a value accumulated over a time interval. In
   * a time series, cumulative measurements should have the same start time,
   * increasing values and increasing end times, until an event resets the
   * cumulative value to zero and sets a new start time for the following
   * points.
   * </pre>
   *
   * Protobuf enum {@code opencensus.proto.metrics.v1.MetricDescriptor.Type}
   */
  public enum Type
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * Do not use this default value.
     * </pre>
     *
     * <code>UNSPECIFIED = 0;</code>
     */
    UNSPECIFIED(0),
    /**
     * <pre>
     * Integer gauge. The value can go both up and down.
     * </pre>
     *
     * <code>GAUGE_INT64 = 1;</code>
     */
    GAUGE_INT64(1),
    /**
     * <pre>
     * Floating point gauge. The value can go both up and down.
     * </pre>
     *
     * <code>GAUGE_DOUBLE = 2;</code>
     */
    GAUGE_DOUBLE(2),
    /**
     * <pre>
     * Distribution gauge measurement. The count and sum can go both up and
     * down. Recorded values are always &gt;= 0.
     * Used in scenarios like a snapshot of time the current items in a queue
     * have spent there.
     * </pre>
     *
     * <code>GAUGE_DISTRIBUTION = 3;</code>
     */
    GAUGE_DISTRIBUTION(3),
    /**
     * <pre>
     * Integer cumulative measurement. The value cannot decrease, if resets
     * then the start_time should also be reset.
     * </pre>
     *
     * <code>CUMULATIVE_INT64 = 4;</code>
     */
    CUMULATIVE_INT64(4),
    /**
     * <pre>
     * Floating point cumulative measurement. The value cannot decrease, if
     * resets then the start_time should also be reset. Recorded values are
     * always &gt;= 0.
     * </pre>
     *
     * <code>CUMULATIVE_DOUBLE = 5;</code>
     */
    CUMULATIVE_DOUBLE(5),
    /**
     * <pre>
     * Distribution cumulative measurement. The count and sum cannot decrease,
     * if resets then the start_time should also be reset.
     * </pre>
     *
     * <code>CUMULATIVE_DISTRIBUTION = 6;</code>
     */
    CUMULATIVE_DISTRIBUTION(6),
    /**
     * <pre>
     * Some frameworks implemented Histograms as a summary of observations
     * (usually things like request durations and response sizes). While it
     * also provides a total count of observations and a sum of all observed
     * values, it calculates configurable percentiles over a sliding time
     * window. This is not recommended, since it cannot be aggregated.
     * </pre>
     *
     * <code>SUMMARY = 7;</code>
     */
    SUMMARY(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Do not use this default value.
     * </pre>
     *
     * <code>UNSPECIFIED = 0;</code>
     */
    public static final int UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Integer gauge. The value can go both up and down.
     * </pre>
     *
     * <code>GAUGE_INT64 = 1;</code>
     */
    public static final int GAUGE_INT64_VALUE = 1;
    /**
     * <pre>
     * Floating point gauge. The value can go both up and down.
     * </pre>
     *
     * <code>GAUGE_DOUBLE = 2;</code>
     */
    public static final int GAUGE_DOUBLE_VALUE = 2;
    /**
     * <pre>
     * Distribution gauge measurement. The count and sum can go both up and
     * down. Recorded values are always &gt;= 0.
     * Used in scenarios like a snapshot of time the current items in a queue
     * have spent there.
     * </pre>
     *
     * <code>GAUGE_DISTRIBUTION = 3;</code>
     */
    public static final int GAUGE_DISTRIBUTION_VALUE = 3;
    /**
     * <pre>
     * Integer cumulative measurement. The value cannot decrease, if resets
     * then the start_time should also be reset.
     * </pre>
     *
     * <code>CUMULATIVE_INT64 = 4;</code>
     */
    public static final int CUMULATIVE_INT64_VALUE = 4;
    /**
     * <pre>
     * Floating point cumulative measurement. The value cannot decrease, if
     * resets then the start_time should also be reset. Recorded values are
     * always &gt;= 0.
     * </pre>
     *
     * <code>CUMULATIVE_DOUBLE = 5;</code>
     */
    public static final int CUMULATIVE_DOUBLE_VALUE = 5;
    /**
     * <pre>
     * Distribution cumulative measurement. The count and sum cannot decrease,
     * if resets then the start_time should also be reset.
     * </pre>
     *
     * <code>CUMULATIVE_DISTRIBUTION = 6;</code>
     */
    public static final int CUMULATIVE_DISTRIBUTION_VALUE = 6;
    /**
     * <pre>
     * Some frameworks implemented Histograms as a summary of observations
     * (usually things like request durations and response sizes). While it
     * also provides a total count of observations and a sum of all observed
     * values, it calculates configurable percentiles over a sliding time
     * window. This is not recommended, since it cannot be aggregated.
     * </pre>
     *
     * <code>SUMMARY = 7;</code>
     */
    public static final int SUMMARY_VALUE = 7;


    @java.lang.Override
    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Type valueOf(int value) {
      return forNumber(value);
    }

    public static Type forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED;
        case 1: return GAUGE_INT64;
        case 2: return GAUGE_DOUBLE;
        case 3: return GAUGE_DISTRIBUTION;
        case 4: return CUMULATIVE_INT64;
        case 5: return CUMULATIVE_DOUBLE;
        case 6: return CUMULATIVE_DISTRIBUTION;
        case 7: return SUMMARY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Type>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Type> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Type>() {
            @java.lang.Override
            public Type findValueByNumber(int number) {
              return Type.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return TypeVerifier.INSTANCE;
    }

    private static final class TypeVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new TypeVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return Type.forNumber(number) != null;
            }
          };

    private final int value;

    private Type(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:opencensus.proto.metrics.v1.MetricDescriptor.Type)
  }

  public static final int NAME_FIELD_NUMBER = 1;
  private java.lang.String name_;
  /**
   * <pre>
   * The metric type, including its DNS name prefix. It must be unique.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    return name_;
  }
  /**
   * <pre>
   * The metric type, including its DNS name prefix. It must be unique.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(name_);
  }
  /**
   * <pre>
   * The metric type, including its DNS name prefix. It must be unique.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @param value The name to set.
   */
  private void setName(
      java.lang.String value) {
    value.getClass();
  
    name_ = value;
  }
  /**
   * <pre>
   * The metric type, including its DNS name prefix. It must be unique.
   * </pre>
   *
   * <code>string name = 1;</code>
   */
  private void clearName() {
    
    name_ = getDefaultInstance().getName();
  }
  /**
   * <pre>
   * The metric type, including its DNS name prefix. It must be unique.
   * </pre>
   *
   * <code>string name = 1;</code>
   * @param value The bytes for name to set.
   */
  private void setNameBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    name_ = value.toStringUtf8();
    
  }

  public static final int DESCRIPTION_FIELD_NUMBER = 2;
  private java.lang.String description_;
  /**
   * <pre>
   * A detailed description of the metric, which can be used in documentation.
   * </pre>
   *
   * <code>string description = 2;</code>
   * @return The description.
   */
  @java.lang.Override
  public java.lang.String getDescription() {
    return description_;
  }
  /**
   * <pre>
   * A detailed description of the metric, which can be used in documentation.
   * </pre>
   *
   * <code>string description = 2;</code>
   * @return The bytes for description.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDescriptionBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(description_);
  }
  /**
   * <pre>
   * A detailed description of the metric, which can be used in documentation.
   * </pre>
   *
   * <code>string description = 2;</code>
   * @param value The description to set.
   */
  private void setDescription(
      java.lang.String value) {
    value.getClass();
  
    description_ = value;
  }
  /**
   * <pre>
   * A detailed description of the metric, which can be used in documentation.
   * </pre>
   *
   * <code>string description = 2;</code>
   */
  private void clearDescription() {
    
    description_ = getDefaultInstance().getDescription();
  }
  /**
   * <pre>
   * A detailed description of the metric, which can be used in documentation.
   * </pre>
   *
   * <code>string description = 2;</code>
   * @param value The bytes for description to set.
   */
  private void setDescriptionBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    description_ = value.toStringUtf8();
    
  }

  public static final int UNIT_FIELD_NUMBER = 3;
  private java.lang.String unit_;
  /**
   * <pre>
   * The unit in which the metric value is reported. Follows the format
   * described by http://unitsofmeasure.org/ucum.html.
   * </pre>
   *
   * <code>string unit = 3;</code>
   * @return The unit.
   */
  @java.lang.Override
  public java.lang.String getUnit() {
    return unit_;
  }
  /**
   * <pre>
   * The unit in which the metric value is reported. Follows the format
   * described by http://unitsofmeasure.org/ucum.html.
   * </pre>
   *
   * <code>string unit = 3;</code>
   * @return The bytes for unit.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getUnitBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(unit_);
  }
  /**
   * <pre>
   * The unit in which the metric value is reported. Follows the format
   * described by http://unitsofmeasure.org/ucum.html.
   * </pre>
   *
   * <code>string unit = 3;</code>
   * @param value The unit to set.
   */
  private void setUnit(
      java.lang.String value) {
    value.getClass();
  
    unit_ = value;
  }
  /**
   * <pre>
   * The unit in which the metric value is reported. Follows the format
   * described by http://unitsofmeasure.org/ucum.html.
   * </pre>
   *
   * <code>string unit = 3;</code>
   */
  private void clearUnit() {
    
    unit_ = getDefaultInstance().getUnit();
  }
  /**
   * <pre>
   * The unit in which the metric value is reported. Follows the format
   * described by http://unitsofmeasure.org/ucum.html.
   * </pre>
   *
   * <code>string unit = 3;</code>
   * @param value The bytes for unit to set.
   */
  private void setUnitBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    unit_ = value.toStringUtf8();
    
  }

  public static final int TYPE_FIELD_NUMBER = 4;
  private int type_;
  /**
   * <code>.opencensus.proto.metrics.v1.MetricDescriptor.Type type = 4;</code>
   * @return The enum numeric value on the wire for type.
   */
  @java.lang.Override
  public int getTypeValue() {
    return type_;
  }
  /**
   * <code>.opencensus.proto.metrics.v1.MetricDescriptor.Type type = 4;</code>
   * @return The type.
   */
  @java.lang.Override
  public io.opencensus.proto.metrics.v1.MetricDescriptor.Type getType() {
    io.opencensus.proto.metrics.v1.MetricDescriptor.Type result = io.opencensus.proto.metrics.v1.MetricDescriptor.Type.forNumber(type_);
    return result == null ? io.opencensus.proto.metrics.v1.MetricDescriptor.Type.UNRECOGNIZED : result;
  }
  /**
   * <code>.opencensus.proto.metrics.v1.MetricDescriptor.Type type = 4;</code>
   * @param value The enum numeric value on the wire for type to set.
   */
  private void setTypeValue(int value) {
      type_ = value;
  }
  /**
   * <code>.opencensus.proto.metrics.v1.MetricDescriptor.Type type = 4;</code>
   * @param value The type to set.
   */
  private void setType(io.opencensus.proto.metrics.v1.MetricDescriptor.Type value) {
    type_ = value.getNumber();
    
  }
  /**
   * <code>.opencensus.proto.metrics.v1.MetricDescriptor.Type type = 4;</code>
   */
  private void clearType() {
    
    type_ = 0;
  }

  public static final int LABEL_KEYS_FIELD_NUMBER = 5;
  private com.google.protobuf.Internal.ProtobufList<io.opencensus.proto.metrics.v1.LabelKey> labelKeys_;
  /**
   * <pre>
   * The label keys associated with the metric descriptor.
   * </pre>
   *
   * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
   */
  @java.lang.Override
  public java.util.List<io.opencensus.proto.metrics.v1.LabelKey> getLabelKeysList() {
    return labelKeys_;
  }
  /**
   * <pre>
   * The label keys associated with the metric descriptor.
   * </pre>
   *
   * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
   */
  public java.util.List<? extends io.opencensus.proto.metrics.v1.LabelKeyOrBuilder> 
      getLabelKeysOrBuilderList() {
    return labelKeys_;
  }
  /**
   * <pre>
   * The label keys associated with the metric descriptor.
   * </pre>
   *
   * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
   */
  @java.lang.Override
  public int getLabelKeysCount() {
    return labelKeys_.size();
  }
  /**
   * <pre>
   * The label keys associated with the metric descriptor.
   * </pre>
   *
   * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.metrics.v1.LabelKey getLabelKeys(int index) {
    return labelKeys_.get(index);
  }
  /**
   * <pre>
   * The label keys associated with the metric descriptor.
   * </pre>
   *
   * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
   */
  public io.opencensus.proto.metrics.v1.LabelKeyOrBuilder getLabelKeysOrBuilder(
      int index) {
    return labelKeys_.get(index);
  }
  private void ensureLabelKeysIsMutable() {
    com.google.protobuf.Internal.ProtobufList<io.opencensus.proto.metrics.v1.LabelKey> tmp = labelKeys_;
    if (!tmp.isModifiable()) {
      labelKeys_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }

  /**
   * <pre>
   * The label keys associated with the metric descriptor.
   * </pre>
   *
   * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
   */
  private void setLabelKeys(
      int index, io.opencensus.proto.metrics.v1.LabelKey value) {
    value.getClass();
  ensureLabelKeysIsMutable();
    labelKeys_.set(index, value);
  }
  /**
   * <pre>
   * The label keys associated with the metric descriptor.
   * </pre>
   *
   * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
   */
  private void addLabelKeys(io.opencensus.proto.metrics.v1.LabelKey value) {
    value.getClass();
  ensureLabelKeysIsMutable();
    labelKeys_.add(value);
  }
  /**
   * <pre>
   * The label keys associated with the metric descriptor.
   * </pre>
   *
   * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
   */
  private void addLabelKeys(
      int index, io.opencensus.proto.metrics.v1.LabelKey value) {
    value.getClass();
  ensureLabelKeysIsMutable();
    labelKeys_.add(index, value);
  }
  /**
   * <pre>
   * The label keys associated with the metric descriptor.
   * </pre>
   *
   * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
   */
  private void addAllLabelKeys(
      java.lang.Iterable<? extends io.opencensus.proto.metrics.v1.LabelKey> values) {
    ensureLabelKeysIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, labelKeys_);
  }
  /**
   * <pre>
   * The label keys associated with the metric descriptor.
   * </pre>
   *
   * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
   */
  private void clearLabelKeys() {
    labelKeys_ = emptyProtobufList();
  }
  /**
   * <pre>
   * The label keys associated with the metric descriptor.
   * </pre>
   *
   * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
   */
  private void removeLabelKeys(int index) {
    ensureLabelKeysIsMutable();
    labelKeys_.remove(index);
  }

  public static io.opencensus.proto.metrics.v1.MetricDescriptor parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.metrics.v1.MetricDescriptor parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.metrics.v1.MetricDescriptor parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.metrics.v1.MetricDescriptor parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.metrics.v1.MetricDescriptor parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.metrics.v1.MetricDescriptor parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.metrics.v1.MetricDescriptor parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.metrics.v1.MetricDescriptor parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.opencensus.proto.metrics.v1.MetricDescriptor parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.metrics.v1.MetricDescriptor parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.opencensus.proto.metrics.v1.MetricDescriptor parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.metrics.v1.MetricDescriptor parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(io.opencensus.proto.metrics.v1.MetricDescriptor prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Defines a metric type and its schema.
   * </pre>
   *
   * Protobuf type {@code opencensus.proto.metrics.v1.MetricDescriptor}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        io.opencensus.proto.metrics.v1.MetricDescriptor, Builder> implements
      // @@protoc_insertion_point(builder_implements:opencensus.proto.metrics.v1.MetricDescriptor)
      io.opencensus.proto.metrics.v1.MetricDescriptorOrBuilder {
    // Construct using io.opencensus.proto.metrics.v1.MetricDescriptor.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The metric type, including its DNS name prefix. It must be unique.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      return instance.getName();
    }
    /**
     * <pre>
     * The metric type, including its DNS name prefix. It must be unique.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      return instance.getNameBytes();
    }
    /**
     * <pre>
     * The metric type, including its DNS name prefix. It must be unique.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      copyOnWrite();
      instance.setName(value);
      return this;
    }
    /**
     * <pre>
     * The metric type, including its DNS name prefix. It must be unique.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      copyOnWrite();
      instance.clearName();
      return this;
    }
    /**
     * <pre>
     * The metric type, including its DNS name prefix. It must be unique.
     * </pre>
     *
     * <code>string name = 1;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * A detailed description of the metric, which can be used in documentation.
     * </pre>
     *
     * <code>string description = 2;</code>
     * @return The description.
     */
    @java.lang.Override
    public java.lang.String getDescription() {
      return instance.getDescription();
    }
    /**
     * <pre>
     * A detailed description of the metric, which can be used in documentation.
     * </pre>
     *
     * <code>string description = 2;</code>
     * @return The bytes for description.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      return instance.getDescriptionBytes();
    }
    /**
     * <pre>
     * A detailed description of the metric, which can be used in documentation.
     * </pre>
     *
     * <code>string description = 2;</code>
     * @param value The description to set.
     * @return This builder for chaining.
     */
    public Builder setDescription(
        java.lang.String value) {
      copyOnWrite();
      instance.setDescription(value);
      return this;
    }
    /**
     * <pre>
     * A detailed description of the metric, which can be used in documentation.
     * </pre>
     *
     * <code>string description = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearDescription() {
      copyOnWrite();
      instance.clearDescription();
      return this;
    }
    /**
     * <pre>
     * A detailed description of the metric, which can be used in documentation.
     * </pre>
     *
     * <code>string description = 2;</code>
     * @param value The bytes for description to set.
     * @return This builder for chaining.
     */
    public Builder setDescriptionBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDescriptionBytes(value);
      return this;
    }

    /**
     * <pre>
     * The unit in which the metric value is reported. Follows the format
     * described by http://unitsofmeasure.org/ucum.html.
     * </pre>
     *
     * <code>string unit = 3;</code>
     * @return The unit.
     */
    @java.lang.Override
    public java.lang.String getUnit() {
      return instance.getUnit();
    }
    /**
     * <pre>
     * The unit in which the metric value is reported. Follows the format
     * described by http://unitsofmeasure.org/ucum.html.
     * </pre>
     *
     * <code>string unit = 3;</code>
     * @return The bytes for unit.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUnitBytes() {
      return instance.getUnitBytes();
    }
    /**
     * <pre>
     * The unit in which the metric value is reported. Follows the format
     * described by http://unitsofmeasure.org/ucum.html.
     * </pre>
     *
     * <code>string unit = 3;</code>
     * @param value The unit to set.
     * @return This builder for chaining.
     */
    public Builder setUnit(
        java.lang.String value) {
      copyOnWrite();
      instance.setUnit(value);
      return this;
    }
    /**
     * <pre>
     * The unit in which the metric value is reported. Follows the format
     * described by http://unitsofmeasure.org/ucum.html.
     * </pre>
     *
     * <code>string unit = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearUnit() {
      copyOnWrite();
      instance.clearUnit();
      return this;
    }
    /**
     * <pre>
     * The unit in which the metric value is reported. Follows the format
     * described by http://unitsofmeasure.org/ucum.html.
     * </pre>
     *
     * <code>string unit = 3;</code>
     * @param value The bytes for unit to set.
     * @return This builder for chaining.
     */
    public Builder setUnitBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setUnitBytes(value);
      return this;
    }

    /**
     * <code>.opencensus.proto.metrics.v1.MetricDescriptor.Type type = 4;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override
    public int getTypeValue() {
      return instance.getTypeValue();
    }
    /**
     * <code>.opencensus.proto.metrics.v1.MetricDescriptor.Type type = 4;</code>
     * @param value The type to set.
     * @return This builder for chaining.
     */
    public Builder setTypeValue(int value) {
      copyOnWrite();
      instance.setTypeValue(value);
      return this;
    }
    /**
     * <code>.opencensus.proto.metrics.v1.MetricDescriptor.Type type = 4;</code>
     * @return The type.
     */
    @java.lang.Override
    public io.opencensus.proto.metrics.v1.MetricDescriptor.Type getType() {
      return instance.getType();
    }
    /**
     * <code>.opencensus.proto.metrics.v1.MetricDescriptor.Type type = 4;</code>
     * @param value The enum numeric value on the wire for type to set.
     * @return This builder for chaining.
     */
    public Builder setType(io.opencensus.proto.metrics.v1.MetricDescriptor.Type value) {
      copyOnWrite();
      instance.setType(value);
      return this;
    }
    /**
     * <code>.opencensus.proto.metrics.v1.MetricDescriptor.Type type = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearType() {
      copyOnWrite();
      instance.clearType();
      return this;
    }

    /**
     * <pre>
     * The label keys associated with the metric descriptor.
     * </pre>
     *
     * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
     */
    @java.lang.Override
    public java.util.List<io.opencensus.proto.metrics.v1.LabelKey> getLabelKeysList() {
      return java.util.Collections.unmodifiableList(
          instance.getLabelKeysList());
    }
    /**
     * <pre>
     * The label keys associated with the metric descriptor.
     * </pre>
     *
     * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
     */
    @java.lang.Override
    public int getLabelKeysCount() {
      return instance.getLabelKeysCount();
    }/**
     * <pre>
     * The label keys associated with the metric descriptor.
     * </pre>
     *
     * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.metrics.v1.LabelKey getLabelKeys(int index) {
      return instance.getLabelKeys(index);
    }
    /**
     * <pre>
     * The label keys associated with the metric descriptor.
     * </pre>
     *
     * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
     */
    public Builder setLabelKeys(
        int index, io.opencensus.proto.metrics.v1.LabelKey value) {
      copyOnWrite();
      instance.setLabelKeys(index, value);
      return this;
    }
    /**
     * <pre>
     * The label keys associated with the metric descriptor.
     * </pre>
     *
     * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
     */
    public Builder setLabelKeys(
        int index, io.opencensus.proto.metrics.v1.LabelKey.Builder builderForValue) {
      copyOnWrite();
      instance.setLabelKeys(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The label keys associated with the metric descriptor.
     * </pre>
     *
     * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
     */
    public Builder addLabelKeys(io.opencensus.proto.metrics.v1.LabelKey value) {
      copyOnWrite();
      instance.addLabelKeys(value);
      return this;
    }
    /**
     * <pre>
     * The label keys associated with the metric descriptor.
     * </pre>
     *
     * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
     */
    public Builder addLabelKeys(
        int index, io.opencensus.proto.metrics.v1.LabelKey value) {
      copyOnWrite();
      instance.addLabelKeys(index, value);
      return this;
    }
    /**
     * <pre>
     * The label keys associated with the metric descriptor.
     * </pre>
     *
     * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
     */
    public Builder addLabelKeys(
        io.opencensus.proto.metrics.v1.LabelKey.Builder builderForValue) {
      copyOnWrite();
      instance.addLabelKeys(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The label keys associated with the metric descriptor.
     * </pre>
     *
     * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
     */
    public Builder addLabelKeys(
        int index, io.opencensus.proto.metrics.v1.LabelKey.Builder builderForValue) {
      copyOnWrite();
      instance.addLabelKeys(index,
          builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The label keys associated with the metric descriptor.
     * </pre>
     *
     * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
     */
    public Builder addAllLabelKeys(
        java.lang.Iterable<? extends io.opencensus.proto.metrics.v1.LabelKey> values) {
      copyOnWrite();
      instance.addAllLabelKeys(values);
      return this;
    }
    /**
     * <pre>
     * The label keys associated with the metric descriptor.
     * </pre>
     *
     * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
     */
    public Builder clearLabelKeys() {
      copyOnWrite();
      instance.clearLabelKeys();
      return this;
    }
    /**
     * <pre>
     * The label keys associated with the metric descriptor.
     * </pre>
     *
     * <code>repeated .opencensus.proto.metrics.v1.LabelKey label_keys = 5;</code>
     */
    public Builder removeLabelKeys(int index) {
      copyOnWrite();
      instance.removeLabelKeys(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:opencensus.proto.metrics.v1.MetricDescriptor)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new io.opencensus.proto.metrics.v1.MetricDescriptor();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "name_",
            "description_",
            "unit_",
            "type_",
            "labelKeys_",
            io.opencensus.proto.metrics.v1.LabelKey.class,
          };
          java.lang.String info =
              "\u0000\u0005\u0000\u0000\u0001\u0005\u0005\u0000\u0001\u0000\u0001\u0208\u0002\u0208" +
              "\u0003\u0208\u0004\f\u0005\u001b";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<io.opencensus.proto.metrics.v1.MetricDescriptor> parser = PARSER;
        if (parser == null) {
          synchronized (io.opencensus.proto.metrics.v1.MetricDescriptor.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<io.opencensus.proto.metrics.v1.MetricDescriptor>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:opencensus.proto.metrics.v1.MetricDescriptor)
  private static final io.opencensus.proto.metrics.v1.MetricDescriptor DEFAULT_INSTANCE;
  static {
    MetricDescriptor defaultInstance = new MetricDescriptor();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      MetricDescriptor.class, defaultInstance);
  }

  public static io.opencensus.proto.metrics.v1.MetricDescriptor getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<MetricDescriptor> PARSER;

  public static com.google.protobuf.Parser<MetricDescriptor> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

