// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/trace/v1/trace_config.proto

package io.opencensus.proto.trace.v1;

/**
 * <pre>
 * Sampler that always makes a constant decision on span sampling.
 * </pre>
 *
 * Protobuf type {@code opencensus.proto.trace.v1.ConstantSampler}
 */
public  final class ConstantSampler extends
    com.google.protobuf.GeneratedMessageLite<
        ConstantSampler, ConstantSampler.Builder> implements
    // @@protoc_insertion_point(message_implements:opencensus.proto.trace.v1.ConstantSampler)
    ConstantSamplerOrBuilder {
  private ConstantSampler() {
  }
  /**
   * <pre>
   * How spans should be sampled:
   * - Always off
   * - Always on
   * - Always follow the parent Span's decision (off if no parent).
   * </pre>
   *
   * Protobuf enum {@code opencensus.proto.trace.v1.ConstantSampler.ConstantDecision}
   */
  public enum ConstantDecision
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>ALWAYS_OFF = 0;</code>
     */
    ALWAYS_OFF(0),
    /**
     * <code>ALWAYS_ON = 1;</code>
     */
    ALWAYS_ON(1),
    /**
     * <code>ALWAYS_PARENT = 2;</code>
     */
    ALWAYS_PARENT(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>ALWAYS_OFF = 0;</code>
     */
    public static final int ALWAYS_OFF_VALUE = 0;
    /**
     * <code>ALWAYS_ON = 1;</code>
     */
    public static final int ALWAYS_ON_VALUE = 1;
    /**
     * <code>ALWAYS_PARENT = 2;</code>
     */
    public static final int ALWAYS_PARENT_VALUE = 2;


    @java.lang.Override
    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ConstantDecision valueOf(int value) {
      return forNumber(value);
    }

    public static ConstantDecision forNumber(int value) {
      switch (value) {
        case 0: return ALWAYS_OFF;
        case 1: return ALWAYS_ON;
        case 2: return ALWAYS_PARENT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ConstantDecision>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ConstantDecision> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ConstantDecision>() {
            @java.lang.Override
            public ConstantDecision findValueByNumber(int number) {
              return ConstantDecision.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return ConstantDecisionVerifier.INSTANCE;
    }

    private static final class ConstantDecisionVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new ConstantDecisionVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return ConstantDecision.forNumber(number) != null;
            }
          };

    private final int value;

    private ConstantDecision(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:opencensus.proto.trace.v1.ConstantSampler.ConstantDecision)
  }

  public static final int DECISION_FIELD_NUMBER = 1;
  private int decision_;
  /**
   * <code>.opencensus.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;</code>
   * @return The enum numeric value on the wire for decision.
   */
  @java.lang.Override
  public int getDecisionValue() {
    return decision_;
  }
  /**
   * <code>.opencensus.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;</code>
   * @return The decision.
   */
  @java.lang.Override
  public io.opencensus.proto.trace.v1.ConstantSampler.ConstantDecision getDecision() {
    io.opencensus.proto.trace.v1.ConstantSampler.ConstantDecision result = io.opencensus.proto.trace.v1.ConstantSampler.ConstantDecision.forNumber(decision_);
    return result == null ? io.opencensus.proto.trace.v1.ConstantSampler.ConstantDecision.UNRECOGNIZED : result;
  }
  /**
   * <code>.opencensus.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;</code>
   * @param value The enum numeric value on the wire for decision to set.
   */
  private void setDecisionValue(int value) {
      decision_ = value;
  }
  /**
   * <code>.opencensus.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;</code>
   * @param value The decision to set.
   */
  private void setDecision(io.opencensus.proto.trace.v1.ConstantSampler.ConstantDecision value) {
    decision_ = value.getNumber();
    
  }
  /**
   * <code>.opencensus.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;</code>
   */
  private void clearDecision() {
    
    decision_ = 0;
  }

  public static io.opencensus.proto.trace.v1.ConstantSampler parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.trace.v1.ConstantSampler parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.ConstantSampler parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.trace.v1.ConstantSampler parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.ConstantSampler parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.trace.v1.ConstantSampler parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.ConstantSampler parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.trace.v1.ConstantSampler parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.ConstantSampler parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.trace.v1.ConstantSampler parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.ConstantSampler parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.trace.v1.ConstantSampler parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(io.opencensus.proto.trace.v1.ConstantSampler prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Sampler that always makes a constant decision on span sampling.
   * </pre>
   *
   * Protobuf type {@code opencensus.proto.trace.v1.ConstantSampler}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        io.opencensus.proto.trace.v1.ConstantSampler, Builder> implements
      // @@protoc_insertion_point(builder_implements:opencensus.proto.trace.v1.ConstantSampler)
      io.opencensus.proto.trace.v1.ConstantSamplerOrBuilder {
    // Construct using io.opencensus.proto.trace.v1.ConstantSampler.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>.opencensus.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;</code>
     * @return The enum numeric value on the wire for decision.
     */
    @java.lang.Override
    public int getDecisionValue() {
      return instance.getDecisionValue();
    }
    /**
     * <code>.opencensus.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;</code>
     * @param value The decision to set.
     * @return This builder for chaining.
     */
    public Builder setDecisionValue(int value) {
      copyOnWrite();
      instance.setDecisionValue(value);
      return this;
    }
    /**
     * <code>.opencensus.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;</code>
     * @return The decision.
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.ConstantSampler.ConstantDecision getDecision() {
      return instance.getDecision();
    }
    /**
     * <code>.opencensus.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;</code>
     * @param value The enum numeric value on the wire for decision to set.
     * @return This builder for chaining.
     */
    public Builder setDecision(io.opencensus.proto.trace.v1.ConstantSampler.ConstantDecision value) {
      copyOnWrite();
      instance.setDecision(value);
      return this;
    }
    /**
     * <code>.opencensus.proto.trace.v1.ConstantSampler.ConstantDecision decision = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearDecision() {
      copyOnWrite();
      instance.clearDecision();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:opencensus.proto.trace.v1.ConstantSampler)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new io.opencensus.proto.trace.v1.ConstantSampler();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "decision_",
          };
          java.lang.String info =
              "\u0000\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0000\u0000\u0001\f";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<io.opencensus.proto.trace.v1.ConstantSampler> parser = PARSER;
        if (parser == null) {
          synchronized (io.opencensus.proto.trace.v1.ConstantSampler.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<io.opencensus.proto.trace.v1.ConstantSampler>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.ConstantSampler)
  private static final io.opencensus.proto.trace.v1.ConstantSampler DEFAULT_INSTANCE;
  static {
    ConstantSampler defaultInstance = new ConstantSampler();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ConstantSampler.class, defaultInstance);
  }

  public static io.opencensus.proto.trace.v1.ConstantSampler getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ConstantSampler> PARSER;

  public static com.google.protobuf.Parser<ConstantSampler> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

