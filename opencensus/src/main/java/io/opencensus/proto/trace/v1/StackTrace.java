// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/trace/v1/trace.proto

package io.opencensus.proto.trace.v1;

/**
 * <pre>
 * The call stack which originated this span.
 * </pre>
 *
 * Protobuf type {@code opencensus.proto.trace.v1.StackTrace}
 */
public  final class StackTrace extends
    com.google.protobuf.GeneratedMessageLite<
        StackTrace, StackTrace.Builder> implements
    // @@protoc_insertion_point(message_implements:opencensus.proto.trace.v1.StackTrace)
    StackTraceOrBuilder {
  private StackTrace() {
  }
  public interface StackFrameOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opencensus.proto.trace.v1.StackTrace.StackFrame)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString function_name = 1;</code>
     * @return Whether the functionName field is set.
     */
    boolean hasFunctionName();
    /**
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString function_name = 1;</code>
     * @return The functionName.
     */
    io.opencensus.proto.trace.v1.TruncatableString getFunctionName();

    /**
     * <pre>
     * An un-mangled function name, if `function_name` is
     * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
     * be fully qualified.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString original_function_name = 2;</code>
     * @return Whether the originalFunctionName field is set.
     */
    boolean hasOriginalFunctionName();
    /**
     * <pre>
     * An un-mangled function name, if `function_name` is
     * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
     * be fully qualified.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString original_function_name = 2;</code>
     * @return The originalFunctionName.
     */
    io.opencensus.proto.trace.v1.TruncatableString getOriginalFunctionName();

    /**
     * <pre>
     * The name of the source file where the function call appears.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString file_name = 3;</code>
     * @return Whether the fileName field is set.
     */
    boolean hasFileName();
    /**
     * <pre>
     * The name of the source file where the function call appears.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString file_name = 3;</code>
     * @return The fileName.
     */
    io.opencensus.proto.trace.v1.TruncatableString getFileName();

    /**
     * <pre>
     * The line number in `file_name` where the function call appears.
     * </pre>
     *
     * <code>int64 line_number = 4;</code>
     * @return The lineNumber.
     */
    long getLineNumber();

    /**
     * <pre>
     * The column number where the function call appears, if available.
     * This is important in JavaScript because of its anonymous functions.
     * </pre>
     *
     * <code>int64 column_number = 5;</code>
     * @return The columnNumber.
     */
    long getColumnNumber();

    /**
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Module load_module = 6;</code>
     * @return Whether the loadModule field is set.
     */
    boolean hasLoadModule();
    /**
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Module load_module = 6;</code>
     * @return The loadModule.
     */
    io.opencensus.proto.trace.v1.Module getLoadModule();

    /**
     * <pre>
     * The version of the deployed source code.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString source_version = 7;</code>
     * @return Whether the sourceVersion field is set.
     */
    boolean hasSourceVersion();
    /**
     * <pre>
     * The version of the deployed source code.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString source_version = 7;</code>
     * @return The sourceVersion.
     */
    io.opencensus.proto.trace.v1.TruncatableString getSourceVersion();
  }
  /**
   * <pre>
   * A single stack frame in a stack trace.
   * </pre>
   *
   * Protobuf type {@code opencensus.proto.trace.v1.StackTrace.StackFrame}
   */
  public  static final class StackFrame extends
      com.google.protobuf.GeneratedMessageLite<
          StackFrame, StackFrame.Builder> implements
      // @@protoc_insertion_point(message_implements:opencensus.proto.trace.v1.StackTrace.StackFrame)
      StackFrameOrBuilder {
    private StackFrame() {
    }
    public static final int FUNCTION_NAME_FIELD_NUMBER = 1;
    private io.opencensus.proto.trace.v1.TruncatableString functionName_;
    /**
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString function_name = 1;</code>
     */
    @java.lang.Override
    public boolean hasFunctionName() {
      return functionName_ != null;
    }
    /**
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString function_name = 1;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.TruncatableString getFunctionName() {
      return functionName_ == null ? io.opencensus.proto.trace.v1.TruncatableString.getDefaultInstance() : functionName_;
    }
    /**
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString function_name = 1;</code>
     */
    private void setFunctionName(io.opencensus.proto.trace.v1.TruncatableString value) {
      value.getClass();
  functionName_ = value;
      
      }
    /**
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString function_name = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeFunctionName(io.opencensus.proto.trace.v1.TruncatableString value) {
      value.getClass();
  if (functionName_ != null &&
          functionName_ != io.opencensus.proto.trace.v1.TruncatableString.getDefaultInstance()) {
        functionName_ =
          io.opencensus.proto.trace.v1.TruncatableString.newBuilder(functionName_).mergeFrom(value).buildPartial();
      } else {
        functionName_ = value;
      }
      
    }
    /**
     * <pre>
     * The fully-qualified name that uniquely identifies the function or
     * method that is active in this frame.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString function_name = 1;</code>
     */
    private void clearFunctionName() {  functionName_ = null;
      
    }

    public static final int ORIGINAL_FUNCTION_NAME_FIELD_NUMBER = 2;
    private io.opencensus.proto.trace.v1.TruncatableString originalFunctionName_;
    /**
     * <pre>
     * An un-mangled function name, if `function_name` is
     * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
     * be fully qualified.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString original_function_name = 2;</code>
     */
    @java.lang.Override
    public boolean hasOriginalFunctionName() {
      return originalFunctionName_ != null;
    }
    /**
     * <pre>
     * An un-mangled function name, if `function_name` is
     * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
     * be fully qualified.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString original_function_name = 2;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.TruncatableString getOriginalFunctionName() {
      return originalFunctionName_ == null ? io.opencensus.proto.trace.v1.TruncatableString.getDefaultInstance() : originalFunctionName_;
    }
    /**
     * <pre>
     * An un-mangled function name, if `function_name` is
     * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
     * be fully qualified.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString original_function_name = 2;</code>
     */
    private void setOriginalFunctionName(io.opencensus.proto.trace.v1.TruncatableString value) {
      value.getClass();
  originalFunctionName_ = value;
      
      }
    /**
     * <pre>
     * An un-mangled function name, if `function_name` is
     * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
     * be fully qualified.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString original_function_name = 2;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeOriginalFunctionName(io.opencensus.proto.trace.v1.TruncatableString value) {
      value.getClass();
  if (originalFunctionName_ != null &&
          originalFunctionName_ != io.opencensus.proto.trace.v1.TruncatableString.getDefaultInstance()) {
        originalFunctionName_ =
          io.opencensus.proto.trace.v1.TruncatableString.newBuilder(originalFunctionName_).mergeFrom(value).buildPartial();
      } else {
        originalFunctionName_ = value;
      }
      
    }
    /**
     * <pre>
     * An un-mangled function name, if `function_name` is
     * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
     * be fully qualified.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString original_function_name = 2;</code>
     */
    private void clearOriginalFunctionName() {  originalFunctionName_ = null;
      
    }

    public static final int FILE_NAME_FIELD_NUMBER = 3;
    private io.opencensus.proto.trace.v1.TruncatableString fileName_;
    /**
     * <pre>
     * The name of the source file where the function call appears.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString file_name = 3;</code>
     */
    @java.lang.Override
    public boolean hasFileName() {
      return fileName_ != null;
    }
    /**
     * <pre>
     * The name of the source file where the function call appears.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString file_name = 3;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.TruncatableString getFileName() {
      return fileName_ == null ? io.opencensus.proto.trace.v1.TruncatableString.getDefaultInstance() : fileName_;
    }
    /**
     * <pre>
     * The name of the source file where the function call appears.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString file_name = 3;</code>
     */
    private void setFileName(io.opencensus.proto.trace.v1.TruncatableString value) {
      value.getClass();
  fileName_ = value;
      
      }
    /**
     * <pre>
     * The name of the source file where the function call appears.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString file_name = 3;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeFileName(io.opencensus.proto.trace.v1.TruncatableString value) {
      value.getClass();
  if (fileName_ != null &&
          fileName_ != io.opencensus.proto.trace.v1.TruncatableString.getDefaultInstance()) {
        fileName_ =
          io.opencensus.proto.trace.v1.TruncatableString.newBuilder(fileName_).mergeFrom(value).buildPartial();
      } else {
        fileName_ = value;
      }
      
    }
    /**
     * <pre>
     * The name of the source file where the function call appears.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString file_name = 3;</code>
     */
    private void clearFileName() {  fileName_ = null;
      
    }

    public static final int LINE_NUMBER_FIELD_NUMBER = 4;
    private long lineNumber_;
    /**
     * <pre>
     * The line number in `file_name` where the function call appears.
     * </pre>
     *
     * <code>int64 line_number = 4;</code>
     * @return The lineNumber.
     */
    @java.lang.Override
    public long getLineNumber() {
      return lineNumber_;
    }
    /**
     * <pre>
     * The line number in `file_name` where the function call appears.
     * </pre>
     *
     * <code>int64 line_number = 4;</code>
     * @param value The lineNumber to set.
     */
    private void setLineNumber(long value) {
      
      lineNumber_ = value;
    }
    /**
     * <pre>
     * The line number in `file_name` where the function call appears.
     * </pre>
     *
     * <code>int64 line_number = 4;</code>
     */
    private void clearLineNumber() {
      
      lineNumber_ = 0L;
    }

    public static final int COLUMN_NUMBER_FIELD_NUMBER = 5;
    private long columnNumber_;
    /**
     * <pre>
     * The column number where the function call appears, if available.
     * This is important in JavaScript because of its anonymous functions.
     * </pre>
     *
     * <code>int64 column_number = 5;</code>
     * @return The columnNumber.
     */
    @java.lang.Override
    public long getColumnNumber() {
      return columnNumber_;
    }
    /**
     * <pre>
     * The column number where the function call appears, if available.
     * This is important in JavaScript because of its anonymous functions.
     * </pre>
     *
     * <code>int64 column_number = 5;</code>
     * @param value The columnNumber to set.
     */
    private void setColumnNumber(long value) {
      
      columnNumber_ = value;
    }
    /**
     * <pre>
     * The column number where the function call appears, if available.
     * This is important in JavaScript because of its anonymous functions.
     * </pre>
     *
     * <code>int64 column_number = 5;</code>
     */
    private void clearColumnNumber() {
      
      columnNumber_ = 0L;
    }

    public static final int LOAD_MODULE_FIELD_NUMBER = 6;
    private io.opencensus.proto.trace.v1.Module loadModule_;
    /**
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Module load_module = 6;</code>
     */
    @java.lang.Override
    public boolean hasLoadModule() {
      return loadModule_ != null;
    }
    /**
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Module load_module = 6;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.Module getLoadModule() {
      return loadModule_ == null ? io.opencensus.proto.trace.v1.Module.getDefaultInstance() : loadModule_;
    }
    /**
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Module load_module = 6;</code>
     */
    private void setLoadModule(io.opencensus.proto.trace.v1.Module value) {
      value.getClass();
  loadModule_ = value;
      
      }
    /**
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Module load_module = 6;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeLoadModule(io.opencensus.proto.trace.v1.Module value) {
      value.getClass();
  if (loadModule_ != null &&
          loadModule_ != io.opencensus.proto.trace.v1.Module.getDefaultInstance()) {
        loadModule_ =
          io.opencensus.proto.trace.v1.Module.newBuilder(loadModule_).mergeFrom(value).buildPartial();
      } else {
        loadModule_ = value;
      }
      
    }
    /**
     * <pre>
     * The binary module from where the code was loaded.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Module load_module = 6;</code>
     */
    private void clearLoadModule() {  loadModule_ = null;
      
    }

    public static final int SOURCE_VERSION_FIELD_NUMBER = 7;
    private io.opencensus.proto.trace.v1.TruncatableString sourceVersion_;
    /**
     * <pre>
     * The version of the deployed source code.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString source_version = 7;</code>
     */
    @java.lang.Override
    public boolean hasSourceVersion() {
      return sourceVersion_ != null;
    }
    /**
     * <pre>
     * The version of the deployed source code.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString source_version = 7;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.TruncatableString getSourceVersion() {
      return sourceVersion_ == null ? io.opencensus.proto.trace.v1.TruncatableString.getDefaultInstance() : sourceVersion_;
    }
    /**
     * <pre>
     * The version of the deployed source code.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString source_version = 7;</code>
     */
    private void setSourceVersion(io.opencensus.proto.trace.v1.TruncatableString value) {
      value.getClass();
  sourceVersion_ = value;
      
      }
    /**
     * <pre>
     * The version of the deployed source code.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString source_version = 7;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeSourceVersion(io.opencensus.proto.trace.v1.TruncatableString value) {
      value.getClass();
  if (sourceVersion_ != null &&
          sourceVersion_ != io.opencensus.proto.trace.v1.TruncatableString.getDefaultInstance()) {
        sourceVersion_ =
          io.opencensus.proto.trace.v1.TruncatableString.newBuilder(sourceVersion_).mergeFrom(value).buildPartial();
      } else {
        sourceVersion_ = value;
      }
      
    }
    /**
     * <pre>
     * The version of the deployed source code.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString source_version = 7;</code>
     */
    private void clearSourceVersion() {  sourceVersion_ = null;
      
    }

    public static io.opencensus.proto.trace.v1.StackTrace.StackFrame parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrame parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrame parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrame parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrame parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrame parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrame parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrame parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrame parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrame parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrame parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrame parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(io.opencensus.proto.trace.v1.StackTrace.StackFrame prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A single stack frame in a stack trace.
     * </pre>
     *
     * Protobuf type {@code opencensus.proto.trace.v1.StackTrace.StackFrame}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          io.opencensus.proto.trace.v1.StackTrace.StackFrame, Builder> implements
        // @@protoc_insertion_point(builder_implements:opencensus.proto.trace.v1.StackTrace.StackFrame)
        io.opencensus.proto.trace.v1.StackTrace.StackFrameOrBuilder {
      // Construct using io.opencensus.proto.trace.v1.StackTrace.StackFrame.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString function_name = 1;</code>
       */
      @java.lang.Override
      public boolean hasFunctionName() {
        return instance.hasFunctionName();
      }
      /**
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString function_name = 1;</code>
       */
      @java.lang.Override
      public io.opencensus.proto.trace.v1.TruncatableString getFunctionName() {
        return instance.getFunctionName();
      }
      /**
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString function_name = 1;</code>
       */
      public Builder setFunctionName(io.opencensus.proto.trace.v1.TruncatableString value) {
        copyOnWrite();
        instance.setFunctionName(value);
        return this;
        }
      /**
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString function_name = 1;</code>
       */
      public Builder setFunctionName(
          io.opencensus.proto.trace.v1.TruncatableString.Builder builderForValue) {
        copyOnWrite();
        instance.setFunctionName(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString function_name = 1;</code>
       */
      public Builder mergeFunctionName(io.opencensus.proto.trace.v1.TruncatableString value) {
        copyOnWrite();
        instance.mergeFunctionName(value);
        return this;
      }
      /**
       * <pre>
       * The fully-qualified name that uniquely identifies the function or
       * method that is active in this frame.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString function_name = 1;</code>
       */
      public Builder clearFunctionName() {  copyOnWrite();
        instance.clearFunctionName();
        return this;
      }

      /**
       * <pre>
       * An un-mangled function name, if `function_name` is
       * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
       * be fully qualified.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString original_function_name = 2;</code>
       */
      @java.lang.Override
      public boolean hasOriginalFunctionName() {
        return instance.hasOriginalFunctionName();
      }
      /**
       * <pre>
       * An un-mangled function name, if `function_name` is
       * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
       * be fully qualified.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString original_function_name = 2;</code>
       */
      @java.lang.Override
      public io.opencensus.proto.trace.v1.TruncatableString getOriginalFunctionName() {
        return instance.getOriginalFunctionName();
      }
      /**
       * <pre>
       * An un-mangled function name, if `function_name` is
       * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
       * be fully qualified.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString original_function_name = 2;</code>
       */
      public Builder setOriginalFunctionName(io.opencensus.proto.trace.v1.TruncatableString value) {
        copyOnWrite();
        instance.setOriginalFunctionName(value);
        return this;
        }
      /**
       * <pre>
       * An un-mangled function name, if `function_name` is
       * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
       * be fully qualified.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString original_function_name = 2;</code>
       */
      public Builder setOriginalFunctionName(
          io.opencensus.proto.trace.v1.TruncatableString.Builder builderForValue) {
        copyOnWrite();
        instance.setOriginalFunctionName(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * An un-mangled function name, if `function_name` is
       * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
       * be fully qualified.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString original_function_name = 2;</code>
       */
      public Builder mergeOriginalFunctionName(io.opencensus.proto.trace.v1.TruncatableString value) {
        copyOnWrite();
        instance.mergeOriginalFunctionName(value);
        return this;
      }
      /**
       * <pre>
       * An un-mangled function name, if `function_name` is
       * [mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can
       * be fully qualified.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString original_function_name = 2;</code>
       */
      public Builder clearOriginalFunctionName() {  copyOnWrite();
        instance.clearOriginalFunctionName();
        return this;
      }

      /**
       * <pre>
       * The name of the source file where the function call appears.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString file_name = 3;</code>
       */
      @java.lang.Override
      public boolean hasFileName() {
        return instance.hasFileName();
      }
      /**
       * <pre>
       * The name of the source file where the function call appears.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString file_name = 3;</code>
       */
      @java.lang.Override
      public io.opencensus.proto.trace.v1.TruncatableString getFileName() {
        return instance.getFileName();
      }
      /**
       * <pre>
       * The name of the source file where the function call appears.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString file_name = 3;</code>
       */
      public Builder setFileName(io.opencensus.proto.trace.v1.TruncatableString value) {
        copyOnWrite();
        instance.setFileName(value);
        return this;
        }
      /**
       * <pre>
       * The name of the source file where the function call appears.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString file_name = 3;</code>
       */
      public Builder setFileName(
          io.opencensus.proto.trace.v1.TruncatableString.Builder builderForValue) {
        copyOnWrite();
        instance.setFileName(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The name of the source file where the function call appears.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString file_name = 3;</code>
       */
      public Builder mergeFileName(io.opencensus.proto.trace.v1.TruncatableString value) {
        copyOnWrite();
        instance.mergeFileName(value);
        return this;
      }
      /**
       * <pre>
       * The name of the source file where the function call appears.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString file_name = 3;</code>
       */
      public Builder clearFileName() {  copyOnWrite();
        instance.clearFileName();
        return this;
      }

      /**
       * <pre>
       * The line number in `file_name` where the function call appears.
       * </pre>
       *
       * <code>int64 line_number = 4;</code>
       * @return The lineNumber.
       */
      @java.lang.Override
      public long getLineNumber() {
        return instance.getLineNumber();
      }
      /**
       * <pre>
       * The line number in `file_name` where the function call appears.
       * </pre>
       *
       * <code>int64 line_number = 4;</code>
       * @param value The lineNumber to set.
       * @return This builder for chaining.
       */
      public Builder setLineNumber(long value) {
        copyOnWrite();
        instance.setLineNumber(value);
        return this;
      }
      /**
       * <pre>
       * The line number in `file_name` where the function call appears.
       * </pre>
       *
       * <code>int64 line_number = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearLineNumber() {
        copyOnWrite();
        instance.clearLineNumber();
        return this;
      }

      /**
       * <pre>
       * The column number where the function call appears, if available.
       * This is important in JavaScript because of its anonymous functions.
       * </pre>
       *
       * <code>int64 column_number = 5;</code>
       * @return The columnNumber.
       */
      @java.lang.Override
      public long getColumnNumber() {
        return instance.getColumnNumber();
      }
      /**
       * <pre>
       * The column number where the function call appears, if available.
       * This is important in JavaScript because of its anonymous functions.
       * </pre>
       *
       * <code>int64 column_number = 5;</code>
       * @param value The columnNumber to set.
       * @return This builder for chaining.
       */
      public Builder setColumnNumber(long value) {
        copyOnWrite();
        instance.setColumnNumber(value);
        return this;
      }
      /**
       * <pre>
       * The column number where the function call appears, if available.
       * This is important in JavaScript because of its anonymous functions.
       * </pre>
       *
       * <code>int64 column_number = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearColumnNumber() {
        copyOnWrite();
        instance.clearColumnNumber();
        return this;
      }

      /**
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Module load_module = 6;</code>
       */
      @java.lang.Override
      public boolean hasLoadModule() {
        return instance.hasLoadModule();
      }
      /**
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Module load_module = 6;</code>
       */
      @java.lang.Override
      public io.opencensus.proto.trace.v1.Module getLoadModule() {
        return instance.getLoadModule();
      }
      /**
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Module load_module = 6;</code>
       */
      public Builder setLoadModule(io.opencensus.proto.trace.v1.Module value) {
        copyOnWrite();
        instance.setLoadModule(value);
        return this;
        }
      /**
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Module load_module = 6;</code>
       */
      public Builder setLoadModule(
          io.opencensus.proto.trace.v1.Module.Builder builderForValue) {
        copyOnWrite();
        instance.setLoadModule(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Module load_module = 6;</code>
       */
      public Builder mergeLoadModule(io.opencensus.proto.trace.v1.Module value) {
        copyOnWrite();
        instance.mergeLoadModule(value);
        return this;
      }
      /**
       * <pre>
       * The binary module from where the code was loaded.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Module load_module = 6;</code>
       */
      public Builder clearLoadModule() {  copyOnWrite();
        instance.clearLoadModule();
        return this;
      }

      /**
       * <pre>
       * The version of the deployed source code.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString source_version = 7;</code>
       */
      @java.lang.Override
      public boolean hasSourceVersion() {
        return instance.hasSourceVersion();
      }
      /**
       * <pre>
       * The version of the deployed source code.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString source_version = 7;</code>
       */
      @java.lang.Override
      public io.opencensus.proto.trace.v1.TruncatableString getSourceVersion() {
        return instance.getSourceVersion();
      }
      /**
       * <pre>
       * The version of the deployed source code.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString source_version = 7;</code>
       */
      public Builder setSourceVersion(io.opencensus.proto.trace.v1.TruncatableString value) {
        copyOnWrite();
        instance.setSourceVersion(value);
        return this;
        }
      /**
       * <pre>
       * The version of the deployed source code.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString source_version = 7;</code>
       */
      public Builder setSourceVersion(
          io.opencensus.proto.trace.v1.TruncatableString.Builder builderForValue) {
        copyOnWrite();
        instance.setSourceVersion(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The version of the deployed source code.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString source_version = 7;</code>
       */
      public Builder mergeSourceVersion(io.opencensus.proto.trace.v1.TruncatableString value) {
        copyOnWrite();
        instance.mergeSourceVersion(value);
        return this;
      }
      /**
       * <pre>
       * The version of the deployed source code.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString source_version = 7;</code>
       */
      public Builder clearSourceVersion() {  copyOnWrite();
        instance.clearSourceVersion();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:opencensus.proto.trace.v1.StackTrace.StackFrame)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new io.opencensus.proto.trace.v1.StackTrace.StackFrame();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "functionName_",
              "originalFunctionName_",
              "fileName_",
              "lineNumber_",
              "columnNumber_",
              "loadModule_",
              "sourceVersion_",
            };
            java.lang.String info =
                "\u0000\u0007\u0000\u0000\u0001\u0007\u0007\u0000\u0000\u0000\u0001\t\u0002\t\u0003" +
                "\t\u0004\u0002\u0005\u0002\u0006\t\u0007\t";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<io.opencensus.proto.trace.v1.StackTrace.StackFrame> parser = PARSER;
          if (parser == null) {
            synchronized (io.opencensus.proto.trace.v1.StackTrace.StackFrame.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<io.opencensus.proto.trace.v1.StackTrace.StackFrame>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.StackTrace.StackFrame)
    private static final io.opencensus.proto.trace.v1.StackTrace.StackFrame DEFAULT_INSTANCE;
    static {
      StackFrame defaultInstance = new StackFrame();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        StackFrame.class, defaultInstance);
    }

    public static io.opencensus.proto.trace.v1.StackTrace.StackFrame getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<StackFrame> PARSER;

    public static com.google.protobuf.Parser<StackFrame> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface StackFramesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opencensus.proto.trace.v1.StackTrace.StackFrames)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
     */
    java.util.List<io.opencensus.proto.trace.v1.StackTrace.StackFrame> 
        getFrameList();
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
     */
    io.opencensus.proto.trace.v1.StackTrace.StackFrame getFrame(int index);
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
     */
    int getFrameCount();

    /**
     * <pre>
     * The number of stack frames that were dropped because there
     * were too many stack frames.
     * If this value is 0, then no stack frames were dropped.
     * </pre>
     *
     * <code>int32 dropped_frames_count = 2;</code>
     * @return The droppedFramesCount.
     */
    int getDroppedFramesCount();
  }
  /**
   * <pre>
   * A collection of stack frames, which can be truncated.
   * </pre>
   *
   * Protobuf type {@code opencensus.proto.trace.v1.StackTrace.StackFrames}
   */
  public  static final class StackFrames extends
      com.google.protobuf.GeneratedMessageLite<
          StackFrames, StackFrames.Builder> implements
      // @@protoc_insertion_point(message_implements:opencensus.proto.trace.v1.StackTrace.StackFrames)
      StackFramesOrBuilder {
    private StackFrames() {
      frame_ = emptyProtobufList();
    }
    public static final int FRAME_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<io.opencensus.proto.trace.v1.StackTrace.StackFrame> frame_;
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.opencensus.proto.trace.v1.StackTrace.StackFrame> getFrameList() {
      return frame_;
    }
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
     */
    public java.util.List<? extends io.opencensus.proto.trace.v1.StackTrace.StackFrameOrBuilder> 
        getFrameOrBuilderList() {
      return frame_;
    }
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
     */
    @java.lang.Override
    public int getFrameCount() {
      return frame_.size();
    }
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.StackTrace.StackFrame getFrame(int index) {
      return frame_.get(index);
    }
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
     */
    public io.opencensus.proto.trace.v1.StackTrace.StackFrameOrBuilder getFrameOrBuilder(
        int index) {
      return frame_.get(index);
    }
    private void ensureFrameIsMutable() {
      com.google.protobuf.Internal.ProtobufList<io.opencensus.proto.trace.v1.StackTrace.StackFrame> tmp = frame_;
      if (!tmp.isModifiable()) {
        frame_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
     */
    private void setFrame(
        int index, io.opencensus.proto.trace.v1.StackTrace.StackFrame value) {
      value.getClass();
  ensureFrameIsMutable();
      frame_.set(index, value);
    }
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
     */
    private void addFrame(io.opencensus.proto.trace.v1.StackTrace.StackFrame value) {
      value.getClass();
  ensureFrameIsMutable();
      frame_.add(value);
    }
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
     */
    private void addFrame(
        int index, io.opencensus.proto.trace.v1.StackTrace.StackFrame value) {
      value.getClass();
  ensureFrameIsMutable();
      frame_.add(index, value);
    }
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
     */
    private void addAllFrame(
        java.lang.Iterable<? extends io.opencensus.proto.trace.v1.StackTrace.StackFrame> values) {
      ensureFrameIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, frame_);
    }
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
     */
    private void clearFrame() {
      frame_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Stack frames in this call stack.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
     */
    private void removeFrame(int index) {
      ensureFrameIsMutable();
      frame_.remove(index);
    }

    public static final int DROPPED_FRAMES_COUNT_FIELD_NUMBER = 2;
    private int droppedFramesCount_;
    /**
     * <pre>
     * The number of stack frames that were dropped because there
     * were too many stack frames.
     * If this value is 0, then no stack frames were dropped.
     * </pre>
     *
     * <code>int32 dropped_frames_count = 2;</code>
     * @return The droppedFramesCount.
     */
    @java.lang.Override
    public int getDroppedFramesCount() {
      return droppedFramesCount_;
    }
    /**
     * <pre>
     * The number of stack frames that were dropped because there
     * were too many stack frames.
     * If this value is 0, then no stack frames were dropped.
     * </pre>
     *
     * <code>int32 dropped_frames_count = 2;</code>
     * @param value The droppedFramesCount to set.
     */
    private void setDroppedFramesCount(int value) {
      
      droppedFramesCount_ = value;
    }
    /**
     * <pre>
     * The number of stack frames that were dropped because there
     * were too many stack frames.
     * If this value is 0, then no stack frames were dropped.
     * </pre>
     *
     * <code>int32 dropped_frames_count = 2;</code>
     */
    private void clearDroppedFramesCount() {
      
      droppedFramesCount_ = 0;
    }

    public static io.opencensus.proto.trace.v1.StackTrace.StackFrames parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrames parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrames parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrames parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrames parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrames parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrames parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrames parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrames parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrames parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrames parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.StackTrace.StackFrames parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(io.opencensus.proto.trace.v1.StackTrace.StackFrames prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A collection of stack frames, which can be truncated.
     * </pre>
     *
     * Protobuf type {@code opencensus.proto.trace.v1.StackTrace.StackFrames}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          io.opencensus.proto.trace.v1.StackTrace.StackFrames, Builder> implements
        // @@protoc_insertion_point(builder_implements:opencensus.proto.trace.v1.StackTrace.StackFrames)
        io.opencensus.proto.trace.v1.StackTrace.StackFramesOrBuilder {
      // Construct using io.opencensus.proto.trace.v1.StackTrace.StackFrames.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
       */
      @java.lang.Override
      public java.util.List<io.opencensus.proto.trace.v1.StackTrace.StackFrame> getFrameList() {
        return java.util.Collections.unmodifiableList(
            instance.getFrameList());
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
       */
      @java.lang.Override
      public int getFrameCount() {
        return instance.getFrameCount();
      }/**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
       */
      @java.lang.Override
      public io.opencensus.proto.trace.v1.StackTrace.StackFrame getFrame(int index) {
        return instance.getFrame(index);
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder setFrame(
          int index, io.opencensus.proto.trace.v1.StackTrace.StackFrame value) {
        copyOnWrite();
        instance.setFrame(index, value);
        return this;
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder setFrame(
          int index, io.opencensus.proto.trace.v1.StackTrace.StackFrame.Builder builderForValue) {
        copyOnWrite();
        instance.setFrame(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder addFrame(io.opencensus.proto.trace.v1.StackTrace.StackFrame value) {
        copyOnWrite();
        instance.addFrame(value);
        return this;
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder addFrame(
          int index, io.opencensus.proto.trace.v1.StackTrace.StackFrame value) {
        copyOnWrite();
        instance.addFrame(index, value);
        return this;
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder addFrame(
          io.opencensus.proto.trace.v1.StackTrace.StackFrame.Builder builderForValue) {
        copyOnWrite();
        instance.addFrame(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder addFrame(
          int index, io.opencensus.proto.trace.v1.StackTrace.StackFrame.Builder builderForValue) {
        copyOnWrite();
        instance.addFrame(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder addAllFrame(
          java.lang.Iterable<? extends io.opencensus.proto.trace.v1.StackTrace.StackFrame> values) {
        copyOnWrite();
        instance.addAllFrame(values);
        return this;
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder clearFrame() {
        copyOnWrite();
        instance.clearFrame();
        return this;
      }
      /**
       * <pre>
       * Stack frames in this call stack.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.StackTrace.StackFrame frame = 1;</code>
       */
      public Builder removeFrame(int index) {
        copyOnWrite();
        instance.removeFrame(index);
        return this;
      }

      /**
       * <pre>
       * The number of stack frames that were dropped because there
       * were too many stack frames.
       * If this value is 0, then no stack frames were dropped.
       * </pre>
       *
       * <code>int32 dropped_frames_count = 2;</code>
       * @return The droppedFramesCount.
       */
      @java.lang.Override
      public int getDroppedFramesCount() {
        return instance.getDroppedFramesCount();
      }
      /**
       * <pre>
       * The number of stack frames that were dropped because there
       * were too many stack frames.
       * If this value is 0, then no stack frames were dropped.
       * </pre>
       *
       * <code>int32 dropped_frames_count = 2;</code>
       * @param value The droppedFramesCount to set.
       * @return This builder for chaining.
       */
      public Builder setDroppedFramesCount(int value) {
        copyOnWrite();
        instance.setDroppedFramesCount(value);
        return this;
      }
      /**
       * <pre>
       * The number of stack frames that were dropped because there
       * were too many stack frames.
       * If this value is 0, then no stack frames were dropped.
       * </pre>
       *
       * <code>int32 dropped_frames_count = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDroppedFramesCount() {
        copyOnWrite();
        instance.clearDroppedFramesCount();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:opencensus.proto.trace.v1.StackTrace.StackFrames)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new io.opencensus.proto.trace.v1.StackTrace.StackFrames();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "frame_",
              io.opencensus.proto.trace.v1.StackTrace.StackFrame.class,
              "droppedFramesCount_",
            };
            java.lang.String info =
                "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0001\u0000\u0001\u001b\u0002\u0004" +
                "";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<io.opencensus.proto.trace.v1.StackTrace.StackFrames> parser = PARSER;
          if (parser == null) {
            synchronized (io.opencensus.proto.trace.v1.StackTrace.StackFrames.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<io.opencensus.proto.trace.v1.StackTrace.StackFrames>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.StackTrace.StackFrames)
    private static final io.opencensus.proto.trace.v1.StackTrace.StackFrames DEFAULT_INSTANCE;
    static {
      StackFrames defaultInstance = new StackFrames();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        StackFrames.class, defaultInstance);
    }

    public static io.opencensus.proto.trace.v1.StackTrace.StackFrames getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<StackFrames> PARSER;

    public static com.google.protobuf.Parser<StackFrames> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public static final int STACK_FRAMES_FIELD_NUMBER = 1;
  private io.opencensus.proto.trace.v1.StackTrace.StackFrames stackFrames_;
  /**
   * <pre>
   * Stack frames in this stack trace.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;</code>
   */
  @java.lang.Override
  public boolean hasStackFrames() {
    return stackFrames_ != null;
  }
  /**
   * <pre>
   * Stack frames in this stack trace.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.trace.v1.StackTrace.StackFrames getStackFrames() {
    return stackFrames_ == null ? io.opencensus.proto.trace.v1.StackTrace.StackFrames.getDefaultInstance() : stackFrames_;
  }
  /**
   * <pre>
   * Stack frames in this stack trace.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;</code>
   */
  private void setStackFrames(io.opencensus.proto.trace.v1.StackTrace.StackFrames value) {
    value.getClass();
  stackFrames_ = value;
    
    }
  /**
   * <pre>
   * Stack frames in this stack trace.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeStackFrames(io.opencensus.proto.trace.v1.StackTrace.StackFrames value) {
    value.getClass();
  if (stackFrames_ != null &&
        stackFrames_ != io.opencensus.proto.trace.v1.StackTrace.StackFrames.getDefaultInstance()) {
      stackFrames_ =
        io.opencensus.proto.trace.v1.StackTrace.StackFrames.newBuilder(stackFrames_).mergeFrom(value).buildPartial();
    } else {
      stackFrames_ = value;
    }
    
  }
  /**
   * <pre>
   * Stack frames in this stack trace.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;</code>
   */
  private void clearStackFrames() {  stackFrames_ = null;
    
  }

  public static final int STACK_TRACE_HASH_ID_FIELD_NUMBER = 2;
  private long stackTraceHashId_;
  /**
   * <pre>
   * The hash ID is used to conserve network bandwidth for duplicate
   * stack traces within a single trace.
   * Often multiple spans will have identical stack traces.
   * The first occurrence of a stack trace should contain both
   * `stack_frames` and a value in `stack_trace_hash_id`.
   * Subsequent spans within the same request can refer
   * to that stack trace by setting only `stack_trace_hash_id`.
   * TODO: describe how to deal with the case where stack_trace_hash_id is
   * zero because it was not set.
   * </pre>
   *
   * <code>uint64 stack_trace_hash_id = 2;</code>
   * @return The stackTraceHashId.
   */
  @java.lang.Override
  public long getStackTraceHashId() {
    return stackTraceHashId_;
  }
  /**
   * <pre>
   * The hash ID is used to conserve network bandwidth for duplicate
   * stack traces within a single trace.
   * Often multiple spans will have identical stack traces.
   * The first occurrence of a stack trace should contain both
   * `stack_frames` and a value in `stack_trace_hash_id`.
   * Subsequent spans within the same request can refer
   * to that stack trace by setting only `stack_trace_hash_id`.
   * TODO: describe how to deal with the case where stack_trace_hash_id is
   * zero because it was not set.
   * </pre>
   *
   * <code>uint64 stack_trace_hash_id = 2;</code>
   * @param value The stackTraceHashId to set.
   */
  private void setStackTraceHashId(long value) {
    
    stackTraceHashId_ = value;
  }
  /**
   * <pre>
   * The hash ID is used to conserve network bandwidth for duplicate
   * stack traces within a single trace.
   * Often multiple spans will have identical stack traces.
   * The first occurrence of a stack trace should contain both
   * `stack_frames` and a value in `stack_trace_hash_id`.
   * Subsequent spans within the same request can refer
   * to that stack trace by setting only `stack_trace_hash_id`.
   * TODO: describe how to deal with the case where stack_trace_hash_id is
   * zero because it was not set.
   * </pre>
   *
   * <code>uint64 stack_trace_hash_id = 2;</code>
   */
  private void clearStackTraceHashId() {
    
    stackTraceHashId_ = 0L;
  }

  public static io.opencensus.proto.trace.v1.StackTrace parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.trace.v1.StackTrace parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.StackTrace parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.trace.v1.StackTrace parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.StackTrace parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.trace.v1.StackTrace parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.StackTrace parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.trace.v1.StackTrace parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.StackTrace parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.trace.v1.StackTrace parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.StackTrace parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.trace.v1.StackTrace parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(io.opencensus.proto.trace.v1.StackTrace prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * The call stack which originated this span.
   * </pre>
   *
   * Protobuf type {@code opencensus.proto.trace.v1.StackTrace}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        io.opencensus.proto.trace.v1.StackTrace, Builder> implements
      // @@protoc_insertion_point(builder_implements:opencensus.proto.trace.v1.StackTrace)
      io.opencensus.proto.trace.v1.StackTraceOrBuilder {
    // Construct using io.opencensus.proto.trace.v1.StackTrace.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Stack frames in this stack trace.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;</code>
     */
    @java.lang.Override
    public boolean hasStackFrames() {
      return instance.hasStackFrames();
    }
    /**
     * <pre>
     * Stack frames in this stack trace.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.StackTrace.StackFrames getStackFrames() {
      return instance.getStackFrames();
    }
    /**
     * <pre>
     * Stack frames in this stack trace.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public Builder setStackFrames(io.opencensus.proto.trace.v1.StackTrace.StackFrames value) {
      copyOnWrite();
      instance.setStackFrames(value);
      return this;
      }
    /**
     * <pre>
     * Stack frames in this stack trace.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public Builder setStackFrames(
        io.opencensus.proto.trace.v1.StackTrace.StackFrames.Builder builderForValue) {
      copyOnWrite();
      instance.setStackFrames(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * Stack frames in this stack trace.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public Builder mergeStackFrames(io.opencensus.proto.trace.v1.StackTrace.StackFrames value) {
      copyOnWrite();
      instance.mergeStackFrames(value);
      return this;
    }
    /**
     * <pre>
     * Stack frames in this stack trace.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.StackTrace.StackFrames stack_frames = 1;</code>
     */
    public Builder clearStackFrames() {  copyOnWrite();
      instance.clearStackFrames();
      return this;
    }

    /**
     * <pre>
     * The hash ID is used to conserve network bandwidth for duplicate
     * stack traces within a single trace.
     * Often multiple spans will have identical stack traces.
     * The first occurrence of a stack trace should contain both
     * `stack_frames` and a value in `stack_trace_hash_id`.
     * Subsequent spans within the same request can refer
     * to that stack trace by setting only `stack_trace_hash_id`.
     * TODO: describe how to deal with the case where stack_trace_hash_id is
     * zero because it was not set.
     * </pre>
     *
     * <code>uint64 stack_trace_hash_id = 2;</code>
     * @return The stackTraceHashId.
     */
    @java.lang.Override
    public long getStackTraceHashId() {
      return instance.getStackTraceHashId();
    }
    /**
     * <pre>
     * The hash ID is used to conserve network bandwidth for duplicate
     * stack traces within a single trace.
     * Often multiple spans will have identical stack traces.
     * The first occurrence of a stack trace should contain both
     * `stack_frames` and a value in `stack_trace_hash_id`.
     * Subsequent spans within the same request can refer
     * to that stack trace by setting only `stack_trace_hash_id`.
     * TODO: describe how to deal with the case where stack_trace_hash_id is
     * zero because it was not set.
     * </pre>
     *
     * <code>uint64 stack_trace_hash_id = 2;</code>
     * @param value The stackTraceHashId to set.
     * @return This builder for chaining.
     */
    public Builder setStackTraceHashId(long value) {
      copyOnWrite();
      instance.setStackTraceHashId(value);
      return this;
    }
    /**
     * <pre>
     * The hash ID is used to conserve network bandwidth for duplicate
     * stack traces within a single trace.
     * Often multiple spans will have identical stack traces.
     * The first occurrence of a stack trace should contain both
     * `stack_frames` and a value in `stack_trace_hash_id`.
     * Subsequent spans within the same request can refer
     * to that stack trace by setting only `stack_trace_hash_id`.
     * TODO: describe how to deal with the case where stack_trace_hash_id is
     * zero because it was not set.
     * </pre>
     *
     * <code>uint64 stack_trace_hash_id = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearStackTraceHashId() {
      copyOnWrite();
      instance.clearStackTraceHashId();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:opencensus.proto.trace.v1.StackTrace)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new io.opencensus.proto.trace.v1.StackTrace();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "stackFrames_",
            "stackTraceHashId_",
          };
          java.lang.String info =
              "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001\t\u0002\u0003" +
              "";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<io.opencensus.proto.trace.v1.StackTrace> parser = PARSER;
        if (parser == null) {
          synchronized (io.opencensus.proto.trace.v1.StackTrace.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<io.opencensus.proto.trace.v1.StackTrace>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.StackTrace)
  private static final io.opencensus.proto.trace.v1.StackTrace DEFAULT_INSTANCE;
  static {
    StackTrace defaultInstance = new StackTrace();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      StackTrace.class, defaultInstance);
  }

  public static io.opencensus.proto.trace.v1.StackTrace getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<StackTrace> PARSER;

  public static com.google.protobuf.Parser<StackTrace> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

