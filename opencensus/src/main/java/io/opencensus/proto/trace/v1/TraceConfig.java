// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/trace/v1/trace_config.proto

package io.opencensus.proto.trace.v1;

/**
 * <pre>
 * Global configuration of the trace service. All fields must be specified, or
 * the default (zero) values will be used for each type.
 * </pre>
 *
 * Protobuf type {@code opencensus.proto.trace.v1.TraceConfig}
 */
public  final class TraceConfig extends
    com.google.protobuf.GeneratedMessageLite<
        TraceConfig, TraceConfig.Builder> implements
    // @@protoc_insertion_point(message_implements:opencensus.proto.trace.v1.TraceConfig)
    TraceConfigOrBuilder {
  private TraceConfig() {
  }
  private int samplerCase_ = 0;
  private java.lang.Object sampler_;
  public enum SamplerCase {
    PROBABILITY_SAMPLER(1),
    CONSTANT_SAMPLER(2),
    RATE_LIMITING_SAMPLER(3),
    SAMPLER_NOT_SET(0);
    private final int value;
    private SamplerCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SamplerCase valueOf(int value) {
      return forNumber(value);
    }

    public static SamplerCase forNumber(int value) {
      switch (value) {
        case 1: return PROBABILITY_SAMPLER;
        case 2: return CONSTANT_SAMPLER;
        case 3: return RATE_LIMITING_SAMPLER;
        case 0: return SAMPLER_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @java.lang.Override
  public SamplerCase
  getSamplerCase() {
    return SamplerCase.forNumber(
        samplerCase_);
  }

  private void clearSampler() {
    samplerCase_ = 0;
    sampler_ = null;
  }

  public static final int PROBABILITY_SAMPLER_FIELD_NUMBER = 1;
  /**
   * <code>.opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;</code>
   */
  @java.lang.Override
  public boolean hasProbabilitySampler() {
    return samplerCase_ == 1;
  }
  /**
   * <code>.opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.trace.v1.ProbabilitySampler getProbabilitySampler() {
    if (samplerCase_ == 1) {
       return (io.opencensus.proto.trace.v1.ProbabilitySampler) sampler_;
    }
    return io.opencensus.proto.trace.v1.ProbabilitySampler.getDefaultInstance();
  }
  /**
   * <code>.opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;</code>
   */
  private void setProbabilitySampler(io.opencensus.proto.trace.v1.ProbabilitySampler value) {
    value.getClass();
  sampler_ = value;
    samplerCase_ = 1;
  }
  /**
   * <code>.opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;</code>
   */
  private void mergeProbabilitySampler(io.opencensus.proto.trace.v1.ProbabilitySampler value) {
    value.getClass();
  if (samplerCase_ == 1 &&
        sampler_ != io.opencensus.proto.trace.v1.ProbabilitySampler.getDefaultInstance()) {
      sampler_ = io.opencensus.proto.trace.v1.ProbabilitySampler.newBuilder((io.opencensus.proto.trace.v1.ProbabilitySampler) sampler_)
          .mergeFrom(value).buildPartial();
    } else {
      sampler_ = value;
    }
    samplerCase_ = 1;
  }
  /**
   * <code>.opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;</code>
   */
  private void clearProbabilitySampler() {
    if (samplerCase_ == 1) {
      samplerCase_ = 0;
      sampler_ = null;
    }
  }

  public static final int CONSTANT_SAMPLER_FIELD_NUMBER = 2;
  /**
   * <code>.opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;</code>
   */
  @java.lang.Override
  public boolean hasConstantSampler() {
    return samplerCase_ == 2;
  }
  /**
   * <code>.opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.trace.v1.ConstantSampler getConstantSampler() {
    if (samplerCase_ == 2) {
       return (io.opencensus.proto.trace.v1.ConstantSampler) sampler_;
    }
    return io.opencensus.proto.trace.v1.ConstantSampler.getDefaultInstance();
  }
  /**
   * <code>.opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;</code>
   */
  private void setConstantSampler(io.opencensus.proto.trace.v1.ConstantSampler value) {
    value.getClass();
  sampler_ = value;
    samplerCase_ = 2;
  }
  /**
   * <code>.opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;</code>
   */
  private void mergeConstantSampler(io.opencensus.proto.trace.v1.ConstantSampler value) {
    value.getClass();
  if (samplerCase_ == 2 &&
        sampler_ != io.opencensus.proto.trace.v1.ConstantSampler.getDefaultInstance()) {
      sampler_ = io.opencensus.proto.trace.v1.ConstantSampler.newBuilder((io.opencensus.proto.trace.v1.ConstantSampler) sampler_)
          .mergeFrom(value).buildPartial();
    } else {
      sampler_ = value;
    }
    samplerCase_ = 2;
  }
  /**
   * <code>.opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;</code>
   */
  private void clearConstantSampler() {
    if (samplerCase_ == 2) {
      samplerCase_ = 0;
      sampler_ = null;
    }
  }

  public static final int RATE_LIMITING_SAMPLER_FIELD_NUMBER = 3;
  /**
   * <code>.opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;</code>
   */
  @java.lang.Override
  public boolean hasRateLimitingSampler() {
    return samplerCase_ == 3;
  }
  /**
   * <code>.opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.trace.v1.RateLimitingSampler getRateLimitingSampler() {
    if (samplerCase_ == 3) {
       return (io.opencensus.proto.trace.v1.RateLimitingSampler) sampler_;
    }
    return io.opencensus.proto.trace.v1.RateLimitingSampler.getDefaultInstance();
  }
  /**
   * <code>.opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;</code>
   */
  private void setRateLimitingSampler(io.opencensus.proto.trace.v1.RateLimitingSampler value) {
    value.getClass();
  sampler_ = value;
    samplerCase_ = 3;
  }
  /**
   * <code>.opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;</code>
   */
  private void mergeRateLimitingSampler(io.opencensus.proto.trace.v1.RateLimitingSampler value) {
    value.getClass();
  if (samplerCase_ == 3 &&
        sampler_ != io.opencensus.proto.trace.v1.RateLimitingSampler.getDefaultInstance()) {
      sampler_ = io.opencensus.proto.trace.v1.RateLimitingSampler.newBuilder((io.opencensus.proto.trace.v1.RateLimitingSampler) sampler_)
          .mergeFrom(value).buildPartial();
    } else {
      sampler_ = value;
    }
    samplerCase_ = 3;
  }
  /**
   * <code>.opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;</code>
   */
  private void clearRateLimitingSampler() {
    if (samplerCase_ == 3) {
      samplerCase_ = 0;
      sampler_ = null;
    }
  }

  public static final int MAX_NUMBER_OF_ATTRIBUTES_FIELD_NUMBER = 4;
  private long maxNumberOfAttributes_;
  /**
   * <pre>
   * The global default max number of attributes per span.
   * </pre>
   *
   * <code>int64 max_number_of_attributes = 4;</code>
   * @return The maxNumberOfAttributes.
   */
  @java.lang.Override
  public long getMaxNumberOfAttributes() {
    return maxNumberOfAttributes_;
  }
  /**
   * <pre>
   * The global default max number of attributes per span.
   * </pre>
   *
   * <code>int64 max_number_of_attributes = 4;</code>
   * @param value The maxNumberOfAttributes to set.
   */
  private void setMaxNumberOfAttributes(long value) {
    
    maxNumberOfAttributes_ = value;
  }
  /**
   * <pre>
   * The global default max number of attributes per span.
   * </pre>
   *
   * <code>int64 max_number_of_attributes = 4;</code>
   */
  private void clearMaxNumberOfAttributes() {
    
    maxNumberOfAttributes_ = 0L;
  }

  public static final int MAX_NUMBER_OF_ANNOTATIONS_FIELD_NUMBER = 5;
  private long maxNumberOfAnnotations_;
  /**
   * <pre>
   * The global default max number of annotation events per span.
   * </pre>
   *
   * <code>int64 max_number_of_annotations = 5;</code>
   * @return The maxNumberOfAnnotations.
   */
  @java.lang.Override
  public long getMaxNumberOfAnnotations() {
    return maxNumberOfAnnotations_;
  }
  /**
   * <pre>
   * The global default max number of annotation events per span.
   * </pre>
   *
   * <code>int64 max_number_of_annotations = 5;</code>
   * @param value The maxNumberOfAnnotations to set.
   */
  private void setMaxNumberOfAnnotations(long value) {
    
    maxNumberOfAnnotations_ = value;
  }
  /**
   * <pre>
   * The global default max number of annotation events per span.
   * </pre>
   *
   * <code>int64 max_number_of_annotations = 5;</code>
   */
  private void clearMaxNumberOfAnnotations() {
    
    maxNumberOfAnnotations_ = 0L;
  }

  public static final int MAX_NUMBER_OF_MESSAGE_EVENTS_FIELD_NUMBER = 6;
  private long maxNumberOfMessageEvents_;
  /**
   * <pre>
   * The global default max number of message events per span.
   * </pre>
   *
   * <code>int64 max_number_of_message_events = 6;</code>
   * @return The maxNumberOfMessageEvents.
   */
  @java.lang.Override
  public long getMaxNumberOfMessageEvents() {
    return maxNumberOfMessageEvents_;
  }
  /**
   * <pre>
   * The global default max number of message events per span.
   * </pre>
   *
   * <code>int64 max_number_of_message_events = 6;</code>
   * @param value The maxNumberOfMessageEvents to set.
   */
  private void setMaxNumberOfMessageEvents(long value) {
    
    maxNumberOfMessageEvents_ = value;
  }
  /**
   * <pre>
   * The global default max number of message events per span.
   * </pre>
   *
   * <code>int64 max_number_of_message_events = 6;</code>
   */
  private void clearMaxNumberOfMessageEvents() {
    
    maxNumberOfMessageEvents_ = 0L;
  }

  public static final int MAX_NUMBER_OF_LINKS_FIELD_NUMBER = 7;
  private long maxNumberOfLinks_;
  /**
   * <pre>
   * The global default max number of link entries per span.
   * </pre>
   *
   * <code>int64 max_number_of_links = 7;</code>
   * @return The maxNumberOfLinks.
   */
  @java.lang.Override
  public long getMaxNumberOfLinks() {
    return maxNumberOfLinks_;
  }
  /**
   * <pre>
   * The global default max number of link entries per span.
   * </pre>
   *
   * <code>int64 max_number_of_links = 7;</code>
   * @param value The maxNumberOfLinks to set.
   */
  private void setMaxNumberOfLinks(long value) {
    
    maxNumberOfLinks_ = value;
  }
  /**
   * <pre>
   * The global default max number of link entries per span.
   * </pre>
   *
   * <code>int64 max_number_of_links = 7;</code>
   */
  private void clearMaxNumberOfLinks() {
    
    maxNumberOfLinks_ = 0L;
  }

  public static io.opencensus.proto.trace.v1.TraceConfig parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.trace.v1.TraceConfig parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.TraceConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.trace.v1.TraceConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.TraceConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.trace.v1.TraceConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.TraceConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.trace.v1.TraceConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.TraceConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.trace.v1.TraceConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.TraceConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.trace.v1.TraceConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(io.opencensus.proto.trace.v1.TraceConfig prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Global configuration of the trace service. All fields must be specified, or
   * the default (zero) values will be used for each type.
   * </pre>
   *
   * Protobuf type {@code opencensus.proto.trace.v1.TraceConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        io.opencensus.proto.trace.v1.TraceConfig, Builder> implements
      // @@protoc_insertion_point(builder_implements:opencensus.proto.trace.v1.TraceConfig)
      io.opencensus.proto.trace.v1.TraceConfigOrBuilder {
    // Construct using io.opencensus.proto.trace.v1.TraceConfig.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @java.lang.Override
    public SamplerCase
        getSamplerCase() {
      return instance.getSamplerCase();
    }

    public Builder clearSampler() {
      copyOnWrite();
      instance.clearSampler();
      return this;
    }


    /**
     * <code>.opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;</code>
     */
    @java.lang.Override
    public boolean hasProbabilitySampler() {
      return instance.hasProbabilitySampler();
    }
    /**
     * <code>.opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.ProbabilitySampler getProbabilitySampler() {
      return instance.getProbabilitySampler();
    }
    /**
     * <code>.opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;</code>
     */
    public Builder setProbabilitySampler(io.opencensus.proto.trace.v1.ProbabilitySampler value) {
      copyOnWrite();
      instance.setProbabilitySampler(value);
      return this;
    }
    /**
     * <code>.opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;</code>
     */
    public Builder setProbabilitySampler(
        io.opencensus.proto.trace.v1.ProbabilitySampler.Builder builderForValue) {
      copyOnWrite();
      instance.setProbabilitySampler(builderForValue.build());
      return this;
    }
    /**
     * <code>.opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;</code>
     */
    public Builder mergeProbabilitySampler(io.opencensus.proto.trace.v1.ProbabilitySampler value) {
      copyOnWrite();
      instance.mergeProbabilitySampler(value);
      return this;
    }
    /**
     * <code>.opencensus.proto.trace.v1.ProbabilitySampler probability_sampler = 1;</code>
     */
    public Builder clearProbabilitySampler() {
      copyOnWrite();
      instance.clearProbabilitySampler();
      return this;
    }

    /**
     * <code>.opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;</code>
     */
    @java.lang.Override
    public boolean hasConstantSampler() {
      return instance.hasConstantSampler();
    }
    /**
     * <code>.opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.ConstantSampler getConstantSampler() {
      return instance.getConstantSampler();
    }
    /**
     * <code>.opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;</code>
     */
    public Builder setConstantSampler(io.opencensus.proto.trace.v1.ConstantSampler value) {
      copyOnWrite();
      instance.setConstantSampler(value);
      return this;
    }
    /**
     * <code>.opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;</code>
     */
    public Builder setConstantSampler(
        io.opencensus.proto.trace.v1.ConstantSampler.Builder builderForValue) {
      copyOnWrite();
      instance.setConstantSampler(builderForValue.build());
      return this;
    }
    /**
     * <code>.opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;</code>
     */
    public Builder mergeConstantSampler(io.opencensus.proto.trace.v1.ConstantSampler value) {
      copyOnWrite();
      instance.mergeConstantSampler(value);
      return this;
    }
    /**
     * <code>.opencensus.proto.trace.v1.ConstantSampler constant_sampler = 2;</code>
     */
    public Builder clearConstantSampler() {
      copyOnWrite();
      instance.clearConstantSampler();
      return this;
    }

    /**
     * <code>.opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;</code>
     */
    @java.lang.Override
    public boolean hasRateLimitingSampler() {
      return instance.hasRateLimitingSampler();
    }
    /**
     * <code>.opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.RateLimitingSampler getRateLimitingSampler() {
      return instance.getRateLimitingSampler();
    }
    /**
     * <code>.opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;</code>
     */
    public Builder setRateLimitingSampler(io.opencensus.proto.trace.v1.RateLimitingSampler value) {
      copyOnWrite();
      instance.setRateLimitingSampler(value);
      return this;
    }
    /**
     * <code>.opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;</code>
     */
    public Builder setRateLimitingSampler(
        io.opencensus.proto.trace.v1.RateLimitingSampler.Builder builderForValue) {
      copyOnWrite();
      instance.setRateLimitingSampler(builderForValue.build());
      return this;
    }
    /**
     * <code>.opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;</code>
     */
    public Builder mergeRateLimitingSampler(io.opencensus.proto.trace.v1.RateLimitingSampler value) {
      copyOnWrite();
      instance.mergeRateLimitingSampler(value);
      return this;
    }
    /**
     * <code>.opencensus.proto.trace.v1.RateLimitingSampler rate_limiting_sampler = 3;</code>
     */
    public Builder clearRateLimitingSampler() {
      copyOnWrite();
      instance.clearRateLimitingSampler();
      return this;
    }

    /**
     * <pre>
     * The global default max number of attributes per span.
     * </pre>
     *
     * <code>int64 max_number_of_attributes = 4;</code>
     * @return The maxNumberOfAttributes.
     */
    @java.lang.Override
    public long getMaxNumberOfAttributes() {
      return instance.getMaxNumberOfAttributes();
    }
    /**
     * <pre>
     * The global default max number of attributes per span.
     * </pre>
     *
     * <code>int64 max_number_of_attributes = 4;</code>
     * @param value The maxNumberOfAttributes to set.
     * @return This builder for chaining.
     */
    public Builder setMaxNumberOfAttributes(long value) {
      copyOnWrite();
      instance.setMaxNumberOfAttributes(value);
      return this;
    }
    /**
     * <pre>
     * The global default max number of attributes per span.
     * </pre>
     *
     * <code>int64 max_number_of_attributes = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxNumberOfAttributes() {
      copyOnWrite();
      instance.clearMaxNumberOfAttributes();
      return this;
    }

    /**
     * <pre>
     * The global default max number of annotation events per span.
     * </pre>
     *
     * <code>int64 max_number_of_annotations = 5;</code>
     * @return The maxNumberOfAnnotations.
     */
    @java.lang.Override
    public long getMaxNumberOfAnnotations() {
      return instance.getMaxNumberOfAnnotations();
    }
    /**
     * <pre>
     * The global default max number of annotation events per span.
     * </pre>
     *
     * <code>int64 max_number_of_annotations = 5;</code>
     * @param value The maxNumberOfAnnotations to set.
     * @return This builder for chaining.
     */
    public Builder setMaxNumberOfAnnotations(long value) {
      copyOnWrite();
      instance.setMaxNumberOfAnnotations(value);
      return this;
    }
    /**
     * <pre>
     * The global default max number of annotation events per span.
     * </pre>
     *
     * <code>int64 max_number_of_annotations = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxNumberOfAnnotations() {
      copyOnWrite();
      instance.clearMaxNumberOfAnnotations();
      return this;
    }

    /**
     * <pre>
     * The global default max number of message events per span.
     * </pre>
     *
     * <code>int64 max_number_of_message_events = 6;</code>
     * @return The maxNumberOfMessageEvents.
     */
    @java.lang.Override
    public long getMaxNumberOfMessageEvents() {
      return instance.getMaxNumberOfMessageEvents();
    }
    /**
     * <pre>
     * The global default max number of message events per span.
     * </pre>
     *
     * <code>int64 max_number_of_message_events = 6;</code>
     * @param value The maxNumberOfMessageEvents to set.
     * @return This builder for chaining.
     */
    public Builder setMaxNumberOfMessageEvents(long value) {
      copyOnWrite();
      instance.setMaxNumberOfMessageEvents(value);
      return this;
    }
    /**
     * <pre>
     * The global default max number of message events per span.
     * </pre>
     *
     * <code>int64 max_number_of_message_events = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxNumberOfMessageEvents() {
      copyOnWrite();
      instance.clearMaxNumberOfMessageEvents();
      return this;
    }

    /**
     * <pre>
     * The global default max number of link entries per span.
     * </pre>
     *
     * <code>int64 max_number_of_links = 7;</code>
     * @return The maxNumberOfLinks.
     */
    @java.lang.Override
    public long getMaxNumberOfLinks() {
      return instance.getMaxNumberOfLinks();
    }
    /**
     * <pre>
     * The global default max number of link entries per span.
     * </pre>
     *
     * <code>int64 max_number_of_links = 7;</code>
     * @param value The maxNumberOfLinks to set.
     * @return This builder for chaining.
     */
    public Builder setMaxNumberOfLinks(long value) {
      copyOnWrite();
      instance.setMaxNumberOfLinks(value);
      return this;
    }
    /**
     * <pre>
     * The global default max number of link entries per span.
     * </pre>
     *
     * <code>int64 max_number_of_links = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxNumberOfLinks() {
      copyOnWrite();
      instance.clearMaxNumberOfLinks();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:opencensus.proto.trace.v1.TraceConfig)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new io.opencensus.proto.trace.v1.TraceConfig();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "sampler_",
            "samplerCase_",
            io.opencensus.proto.trace.v1.ProbabilitySampler.class,
            io.opencensus.proto.trace.v1.ConstantSampler.class,
            io.opencensus.proto.trace.v1.RateLimitingSampler.class,
            "maxNumberOfAttributes_",
            "maxNumberOfAnnotations_",
            "maxNumberOfMessageEvents_",
            "maxNumberOfLinks_",
          };
          java.lang.String info =
              "\u0000\u0007\u0001\u0000\u0001\u0007\u0007\u0000\u0000\u0000\u0001<\u0000\u0002<" +
              "\u0000\u0003<\u0000\u0004\u0002\u0005\u0002\u0006\u0002\u0007\u0002";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<io.opencensus.proto.trace.v1.TraceConfig> parser = PARSER;
        if (parser == null) {
          synchronized (io.opencensus.proto.trace.v1.TraceConfig.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<io.opencensus.proto.trace.v1.TraceConfig>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.TraceConfig)
  private static final io.opencensus.proto.trace.v1.TraceConfig DEFAULT_INSTANCE;
  static {
    TraceConfig defaultInstance = new TraceConfig();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      TraceConfig.class, defaultInstance);
  }

  public static io.opencensus.proto.trace.v1.TraceConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<TraceConfig> PARSER;

  public static com.google.protobuf.Parser<TraceConfig> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

