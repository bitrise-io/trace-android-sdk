// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: opencensus/proto/trace/v1/trace.proto

package io.opencensus.proto.trace.v1;

/**
 * <pre>
 * A span represents a single operation within a trace. Spans can be
 * nested to form a trace tree. Spans may also be linked to other spans
 * from the same or different trace. And form graphs. Often, a trace
 * contains a root span that describes the end-to-end latency, and one
 * or more subspans for its sub-operations. A trace can also contain
 * multiple root spans, or none at all. Spans do not need to be
 * contiguous - there may be gaps or overlaps between spans in a trace.
 * The next id is 17.
 * TODO(bdrutu): Add an example.
 * </pre>
 *
 * Protobuf type {@code opencensus.proto.trace.v1.Span}
 */
public  final class Span extends
    com.google.protobuf.GeneratedMessageLite<
        Span, Span.Builder> implements
    // @@protoc_insertion_point(message_implements:opencensus.proto.trace.v1.Span)
    SpanOrBuilder {
  private Span() {
    traceId_ = com.google.protobuf.ByteString.EMPTY;
    spanId_ = com.google.protobuf.ByteString.EMPTY;
    parentSpanId_ = com.google.protobuf.ByteString.EMPTY;
  }
  /**
   * <pre>
   * Type of span. Can be used to specify additional relationships between spans
   * in addition to a parent/child relationship.
   * </pre>
   *
   * Protobuf enum {@code opencensus.proto.trace.v1.Span.SpanKind}
   */
  public enum SpanKind
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * Unspecified.
     * </pre>
     *
     * <code>SPAN_KIND_UNSPECIFIED = 0;</code>
     */
    SPAN_KIND_UNSPECIFIED(0),
    /**
     * <pre>
     * Indicates that the span covers server-side handling of an RPC or other
     * remote network request.
     * </pre>
     *
     * <code>SERVER = 1;</code>
     */
    SERVER(1),
    /**
     * <pre>
     * Indicates that the span covers the client-side wrapper around an RPC or
     * other remote request.
     * </pre>
     *
     * <code>CLIENT = 2;</code>
     */
    CLIENT(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Unspecified.
     * </pre>
     *
     * <code>SPAN_KIND_UNSPECIFIED = 0;</code>
     */
    public static final int SPAN_KIND_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * Indicates that the span covers server-side handling of an RPC or other
     * remote network request.
     * </pre>
     *
     * <code>SERVER = 1;</code>
     */
    public static final int SERVER_VALUE = 1;
    /**
     * <pre>
     * Indicates that the span covers the client-side wrapper around an RPC or
     * other remote request.
     * </pre>
     *
     * <code>CLIENT = 2;</code>
     */
    public static final int CLIENT_VALUE = 2;


    @java.lang.Override
    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SpanKind valueOf(int value) {
      return forNumber(value);
    }

    public static SpanKind forNumber(int value) {
      switch (value) {
        case 0: return SPAN_KIND_UNSPECIFIED;
        case 1: return SERVER;
        case 2: return CLIENT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SpanKind>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SpanKind> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SpanKind>() {
            @java.lang.Override
            public SpanKind findValueByNumber(int number) {
              return SpanKind.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return SpanKindVerifier.INSTANCE;
    }

    private static final class SpanKindVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new SpanKindVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return SpanKind.forNumber(number) != null;
            }
          };

    private final int value;

    private SpanKind(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:opencensus.proto.trace.v1.Span.SpanKind)
  }

  public interface TracestateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opencensus.proto.trace.v1.Span.Tracestate)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * A list of entries that represent the Tracestate.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
     */
    java.util.List<io.opencensus.proto.trace.v1.Span.Tracestate.Entry> 
        getEntriesList();
    /**
     * <pre>
     * A list of entries that represent the Tracestate.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
     */
    io.opencensus.proto.trace.v1.Span.Tracestate.Entry getEntries(int index);
    /**
     * <pre>
     * A list of entries that represent the Tracestate.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
     */
    int getEntriesCount();
  }
  /**
   * <pre>
   * This field conveys information about request position in multiple distributed tracing graphs.
   * It is a list of Tracestate.Entry with a maximum of 32 members in the list.
   * See the https://github.com/w3c/distributed-tracing for more details about this field.
   * </pre>
   *
   * Protobuf type {@code opencensus.proto.trace.v1.Span.Tracestate}
   */
  public  static final class Tracestate extends
      com.google.protobuf.GeneratedMessageLite<
          Tracestate, Tracestate.Builder> implements
      // @@protoc_insertion_point(message_implements:opencensus.proto.trace.v1.Span.Tracestate)
      TracestateOrBuilder {
    private Tracestate() {
      entries_ = emptyProtobufList();
    }
    public interface EntryOrBuilder extends
        // @@protoc_insertion_point(interface_extends:opencensus.proto.trace.v1.Span.Tracestate.Entry)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * The key must begin with a lowercase letter, and can only contain
       * lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
       * '-', asterisks '*', and forward slashes '/'.
       * </pre>
       *
       * <code>string key = 1;</code>
       * @return The key.
       */
      java.lang.String getKey();
      /**
       * <pre>
       * The key must begin with a lowercase letter, and can only contain
       * lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
       * '-', asterisks '*', and forward slashes '/'.
       * </pre>
       *
       * <code>string key = 1;</code>
       * @return The bytes for key.
       */
      com.google.protobuf.ByteString
          getKeyBytes();

      /**
       * <pre>
       * The value is opaque string up to 256 characters printable ASCII
       * RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
       * Note that this also excludes tabs, newlines, carriage returns, etc.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return The value.
       */
      java.lang.String getValue();
      /**
       * <pre>
       * The value is opaque string up to 256 characters printable ASCII
       * RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
       * Note that this also excludes tabs, newlines, carriage returns, etc.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return The bytes for value.
       */
      com.google.protobuf.ByteString
          getValueBytes();
    }
    /**
     * Protobuf type {@code opencensus.proto.trace.v1.Span.Tracestate.Entry}
     */
    public  static final class Entry extends
        com.google.protobuf.GeneratedMessageLite<
            Entry, Entry.Builder> implements
        // @@protoc_insertion_point(message_implements:opencensus.proto.trace.v1.Span.Tracestate.Entry)
        EntryOrBuilder {
      private Entry() {
        key_ = "";
        value_ = "";
      }
      public static final int KEY_FIELD_NUMBER = 1;
      private java.lang.String key_;
      /**
       * <pre>
       * The key must begin with a lowercase letter, and can only contain
       * lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
       * '-', asterisks '*', and forward slashes '/'.
       * </pre>
       *
       * <code>string key = 1;</code>
       * @return The key.
       */
      @java.lang.Override
      public java.lang.String getKey() {
        return key_;
      }
      /**
       * <pre>
       * The key must begin with a lowercase letter, and can only contain
       * lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
       * '-', asterisks '*', and forward slashes '/'.
       * </pre>
       *
       * <code>string key = 1;</code>
       * @return The bytes for key.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getKeyBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(key_);
      }
      /**
       * <pre>
       * The key must begin with a lowercase letter, and can only contain
       * lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
       * '-', asterisks '*', and forward slashes '/'.
       * </pre>
       *
       * <code>string key = 1;</code>
       * @param value The key to set.
       */
      private void setKey(
          java.lang.String value) {
        value.getClass();
  
        key_ = value;
      }
      /**
       * <pre>
       * The key must begin with a lowercase letter, and can only contain
       * lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
       * '-', asterisks '*', and forward slashes '/'.
       * </pre>
       *
       * <code>string key = 1;</code>
       */
      private void clearKey() {
        
        key_ = getDefaultInstance().getKey();
      }
      /**
       * <pre>
       * The key must begin with a lowercase letter, and can only contain
       * lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
       * '-', asterisks '*', and forward slashes '/'.
       * </pre>
       *
       * <code>string key = 1;</code>
       * @param value The bytes for key to set.
       */
      private void setKeyBytes(
          com.google.protobuf.ByteString value) {
        checkByteStringIsUtf8(value);
        key_ = value.toStringUtf8();
        
      }

      public static final int VALUE_FIELD_NUMBER = 2;
      private java.lang.String value_;
      /**
       * <pre>
       * The value is opaque string up to 256 characters printable ASCII
       * RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
       * Note that this also excludes tabs, newlines, carriage returns, etc.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return The value.
       */
      @java.lang.Override
      public java.lang.String getValue() {
        return value_;
      }
      /**
       * <pre>
       * The value is opaque string up to 256 characters printable ASCII
       * RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
       * Note that this also excludes tabs, newlines, carriage returns, etc.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @return The bytes for value.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getValueBytes() {
        return com.google.protobuf.ByteString.copyFromUtf8(value_);
      }
      /**
       * <pre>
       * The value is opaque string up to 256 characters printable ASCII
       * RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
       * Note that this also excludes tabs, newlines, carriage returns, etc.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @param value The value to set.
       */
      private void setValue(
          java.lang.String value) {
        value.getClass();
  
        value_ = value;
      }
      /**
       * <pre>
       * The value is opaque string up to 256 characters printable ASCII
       * RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
       * Note that this also excludes tabs, newlines, carriage returns, etc.
       * </pre>
       *
       * <code>string value = 2;</code>
       */
      private void clearValue() {
        
        value_ = getDefaultInstance().getValue();
      }
      /**
       * <pre>
       * The value is opaque string up to 256 characters printable ASCII
       * RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
       * Note that this also excludes tabs, newlines, carriage returns, etc.
       * </pre>
       *
       * <code>string value = 2;</code>
       * @param value The bytes for value to set.
       */
      private void setValueBytes(
          com.google.protobuf.ByteString value) {
        checkByteStringIsUtf8(value);
        value_ = value.toStringUtf8();
        
      }

      public static io.opencensus.proto.trace.v1.Span.Tracestate.Entry parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static io.opencensus.proto.trace.v1.Span.Tracestate.Entry parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static io.opencensus.proto.trace.v1.Span.Tracestate.Entry parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static io.opencensus.proto.trace.v1.Span.Tracestate.Entry parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static io.opencensus.proto.trace.v1.Span.Tracestate.Entry parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static io.opencensus.proto.trace.v1.Span.Tracestate.Entry parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static io.opencensus.proto.trace.v1.Span.Tracestate.Entry parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static io.opencensus.proto.trace.v1.Span.Tracestate.Entry parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static io.opencensus.proto.trace.v1.Span.Tracestate.Entry parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static io.opencensus.proto.trace.v1.Span.Tracestate.Entry parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static io.opencensus.proto.trace.v1.Span.Tracestate.Entry parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static io.opencensus.proto.trace.v1.Span.Tracestate.Entry parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(io.opencensus.proto.trace.v1.Span.Tracestate.Entry prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * Protobuf type {@code opencensus.proto.trace.v1.Span.Tracestate.Entry}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            io.opencensus.proto.trace.v1.Span.Tracestate.Entry, Builder> implements
          // @@protoc_insertion_point(builder_implements:opencensus.proto.trace.v1.Span.Tracestate.Entry)
          io.opencensus.proto.trace.v1.Span.Tracestate.EntryOrBuilder {
        // Construct using io.opencensus.proto.trace.v1.Span.Tracestate.Entry.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * The key must begin with a lowercase letter, and can only contain
         * lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
         * '-', asterisks '*', and forward slashes '/'.
         * </pre>
         *
         * <code>string key = 1;</code>
         * @return The key.
         */
        @java.lang.Override
        public java.lang.String getKey() {
          return instance.getKey();
        }
        /**
         * <pre>
         * The key must begin with a lowercase letter, and can only contain
         * lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
         * '-', asterisks '*', and forward slashes '/'.
         * </pre>
         *
         * <code>string key = 1;</code>
         * @return The bytes for key.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getKeyBytes() {
          return instance.getKeyBytes();
        }
        /**
         * <pre>
         * The key must begin with a lowercase letter, and can only contain
         * lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
         * '-', asterisks '*', and forward slashes '/'.
         * </pre>
         *
         * <code>string key = 1;</code>
         * @param value The key to set.
         * @return This builder for chaining.
         */
        public Builder setKey(
            java.lang.String value) {
          copyOnWrite();
          instance.setKey(value);
          return this;
        }
        /**
         * <pre>
         * The key must begin with a lowercase letter, and can only contain
         * lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
         * '-', asterisks '*', and forward slashes '/'.
         * </pre>
         *
         * <code>string key = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearKey() {
          copyOnWrite();
          instance.clearKey();
          return this;
        }
        /**
         * <pre>
         * The key must begin with a lowercase letter, and can only contain
         * lowercase letters 'a'-'z', digits '0'-'9', underscores '_', dashes
         * '-', asterisks '*', and forward slashes '/'.
         * </pre>
         *
         * <code>string key = 1;</code>
         * @param value The bytes for key to set.
         * @return This builder for chaining.
         */
        public Builder setKeyBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setKeyBytes(value);
          return this;
        }

        /**
         * <pre>
         * The value is opaque string up to 256 characters printable ASCII
         * RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
         * Note that this also excludes tabs, newlines, carriage returns, etc.
         * </pre>
         *
         * <code>string value = 2;</code>
         * @return The value.
         */
        @java.lang.Override
        public java.lang.String getValue() {
          return instance.getValue();
        }
        /**
         * <pre>
         * The value is opaque string up to 256 characters printable ASCII
         * RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
         * Note that this also excludes tabs, newlines, carriage returns, etc.
         * </pre>
         *
         * <code>string value = 2;</code>
         * @return The bytes for value.
         */
        @java.lang.Override
        public com.google.protobuf.ByteString
            getValueBytes() {
          return instance.getValueBytes();
        }
        /**
         * <pre>
         * The value is opaque string up to 256 characters printable ASCII
         * RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
         * Note that this also excludes tabs, newlines, carriage returns, etc.
         * </pre>
         *
         * <code>string value = 2;</code>
         * @param value The value to set.
         * @return This builder for chaining.
         */
        public Builder setValue(
            java.lang.String value) {
          copyOnWrite();
          instance.setValue(value);
          return this;
        }
        /**
         * <pre>
         * The value is opaque string up to 256 characters printable ASCII
         * RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
         * Note that this also excludes tabs, newlines, carriage returns, etc.
         * </pre>
         *
         * <code>string value = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearValue() {
          copyOnWrite();
          instance.clearValue();
          return this;
        }
        /**
         * <pre>
         * The value is opaque string up to 256 characters printable ASCII
         * RFC0020 characters (i.e., the range 0x20 to 0x7E) except ',' and '='.
         * Note that this also excludes tabs, newlines, carriage returns, etc.
         * </pre>
         *
         * <code>string value = 2;</code>
         * @param value The bytes for value to set.
         * @return This builder for chaining.
         */
        public Builder setValueBytes(
            com.google.protobuf.ByteString value) {
          copyOnWrite();
          instance.setValueBytes(value);
          return this;
        }

        // @@protoc_insertion_point(builder_scope:opencensus.proto.trace.v1.Span.Tracestate.Entry)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new io.opencensus.proto.trace.v1.Span.Tracestate.Entry();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "key_",
                "value_",
              };
              java.lang.String info =
                  "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u0208\u0002\u0208" +
                  "";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<io.opencensus.proto.trace.v1.Span.Tracestate.Entry> parser = PARSER;
            if (parser == null) {
              synchronized (io.opencensus.proto.trace.v1.Span.Tracestate.Entry.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<io.opencensus.proto.trace.v1.Span.Tracestate.Entry>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.Tracestate.Entry)
      private static final io.opencensus.proto.trace.v1.Span.Tracestate.Entry DEFAULT_INSTANCE;
      static {
        Entry defaultInstance = new Entry();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          Entry.class, defaultInstance);
      }

      public static io.opencensus.proto.trace.v1.Span.Tracestate.Entry getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<Entry> PARSER;

      public static com.google.protobuf.Parser<Entry> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public static final int ENTRIES_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<io.opencensus.proto.trace.v1.Span.Tracestate.Entry> entries_;
    /**
     * <pre>
     * A list of entries that represent the Tracestate.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.opencensus.proto.trace.v1.Span.Tracestate.Entry> getEntriesList() {
      return entries_;
    }
    /**
     * <pre>
     * A list of entries that represent the Tracestate.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
     */
    public java.util.List<? extends io.opencensus.proto.trace.v1.Span.Tracestate.EntryOrBuilder> 
        getEntriesOrBuilderList() {
      return entries_;
    }
    /**
     * <pre>
     * A list of entries that represent the Tracestate.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
     */
    @java.lang.Override
    public int getEntriesCount() {
      return entries_.size();
    }
    /**
     * <pre>
     * A list of entries that represent the Tracestate.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.Span.Tracestate.Entry getEntries(int index) {
      return entries_.get(index);
    }
    /**
     * <pre>
     * A list of entries that represent the Tracestate.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
     */
    public io.opencensus.proto.trace.v1.Span.Tracestate.EntryOrBuilder getEntriesOrBuilder(
        int index) {
      return entries_.get(index);
    }
    private void ensureEntriesIsMutable() {
      com.google.protobuf.Internal.ProtobufList<io.opencensus.proto.trace.v1.Span.Tracestate.Entry> tmp = entries_;
      if (!tmp.isModifiable()) {
        entries_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * A list of entries that represent the Tracestate.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
     */
    private void setEntries(
        int index, io.opencensus.proto.trace.v1.Span.Tracestate.Entry value) {
      value.getClass();
  ensureEntriesIsMutable();
      entries_.set(index, value);
    }
    /**
     * <pre>
     * A list of entries that represent the Tracestate.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
     */
    private void addEntries(io.opencensus.proto.trace.v1.Span.Tracestate.Entry value) {
      value.getClass();
  ensureEntriesIsMutable();
      entries_.add(value);
    }
    /**
     * <pre>
     * A list of entries that represent the Tracestate.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
     */
    private void addEntries(
        int index, io.opencensus.proto.trace.v1.Span.Tracestate.Entry value) {
      value.getClass();
  ensureEntriesIsMutable();
      entries_.add(index, value);
    }
    /**
     * <pre>
     * A list of entries that represent the Tracestate.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
     */
    private void addAllEntries(
        java.lang.Iterable<? extends io.opencensus.proto.trace.v1.Span.Tracestate.Entry> values) {
      ensureEntriesIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, entries_);
    }
    /**
     * <pre>
     * A list of entries that represent the Tracestate.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
     */
    private void clearEntries() {
      entries_ = emptyProtobufList();
    }
    /**
     * <pre>
     * A list of entries that represent the Tracestate.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
     */
    private void removeEntries(int index) {
      ensureEntriesIsMutable();
      entries_.remove(index);
    }

    public static io.opencensus.proto.trace.v1.Span.Tracestate parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.Tracestate parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Tracestate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.Tracestate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Tracestate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.Tracestate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Tracestate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.Tracestate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Tracestate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.Tracestate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Tracestate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.Tracestate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(io.opencensus.proto.trace.v1.Span.Tracestate prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * This field conveys information about request position in multiple distributed tracing graphs.
     * It is a list of Tracestate.Entry with a maximum of 32 members in the list.
     * See the https://github.com/w3c/distributed-tracing for more details about this field.
     * </pre>
     *
     * Protobuf type {@code opencensus.proto.trace.v1.Span.Tracestate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          io.opencensus.proto.trace.v1.Span.Tracestate, Builder> implements
        // @@protoc_insertion_point(builder_implements:opencensus.proto.trace.v1.Span.Tracestate)
        io.opencensus.proto.trace.v1.Span.TracestateOrBuilder {
      // Construct using io.opencensus.proto.trace.v1.Span.Tracestate.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * A list of entries that represent the Tracestate.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
       */
      @java.lang.Override
      public java.util.List<io.opencensus.proto.trace.v1.Span.Tracestate.Entry> getEntriesList() {
        return java.util.Collections.unmodifiableList(
            instance.getEntriesList());
      }
      /**
       * <pre>
       * A list of entries that represent the Tracestate.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
       */
      @java.lang.Override
      public int getEntriesCount() {
        return instance.getEntriesCount();
      }/**
       * <pre>
       * A list of entries that represent the Tracestate.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
       */
      @java.lang.Override
      public io.opencensus.proto.trace.v1.Span.Tracestate.Entry getEntries(int index) {
        return instance.getEntries(index);
      }
      /**
       * <pre>
       * A list of entries that represent the Tracestate.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
       */
      public Builder setEntries(
          int index, io.opencensus.proto.trace.v1.Span.Tracestate.Entry value) {
        copyOnWrite();
        instance.setEntries(index, value);
        return this;
      }
      /**
       * <pre>
       * A list of entries that represent the Tracestate.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
       */
      public Builder setEntries(
          int index, io.opencensus.proto.trace.v1.Span.Tracestate.Entry.Builder builderForValue) {
        copyOnWrite();
        instance.setEntries(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A list of entries that represent the Tracestate.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
       */
      public Builder addEntries(io.opencensus.proto.trace.v1.Span.Tracestate.Entry value) {
        copyOnWrite();
        instance.addEntries(value);
        return this;
      }
      /**
       * <pre>
       * A list of entries that represent the Tracestate.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
       */
      public Builder addEntries(
          int index, io.opencensus.proto.trace.v1.Span.Tracestate.Entry value) {
        copyOnWrite();
        instance.addEntries(index, value);
        return this;
      }
      /**
       * <pre>
       * A list of entries that represent the Tracestate.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
       */
      public Builder addEntries(
          io.opencensus.proto.trace.v1.Span.Tracestate.Entry.Builder builderForValue) {
        copyOnWrite();
        instance.addEntries(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A list of entries that represent the Tracestate.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
       */
      public Builder addEntries(
          int index, io.opencensus.proto.trace.v1.Span.Tracestate.Entry.Builder builderForValue) {
        copyOnWrite();
        instance.addEntries(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A list of entries that represent the Tracestate.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
       */
      public Builder addAllEntries(
          java.lang.Iterable<? extends io.opencensus.proto.trace.v1.Span.Tracestate.Entry> values) {
        copyOnWrite();
        instance.addAllEntries(values);
        return this;
      }
      /**
       * <pre>
       * A list of entries that represent the Tracestate.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
       */
      public Builder clearEntries() {
        copyOnWrite();
        instance.clearEntries();
        return this;
      }
      /**
       * <pre>
       * A list of entries that represent the Tracestate.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Tracestate.Entry entries = 1;</code>
       */
      public Builder removeEntries(int index) {
        copyOnWrite();
        instance.removeEntries(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:opencensus.proto.trace.v1.Span.Tracestate)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new io.opencensus.proto.trace.v1.Span.Tracestate();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "entries_",
              io.opencensus.proto.trace.v1.Span.Tracestate.Entry.class,
            };
            java.lang.String info =
                "\u0000\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0000\u0001\u001b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<io.opencensus.proto.trace.v1.Span.Tracestate> parser = PARSER;
          if (parser == null) {
            synchronized (io.opencensus.proto.trace.v1.Span.Tracestate.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<io.opencensus.proto.trace.v1.Span.Tracestate>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.Tracestate)
    private static final io.opencensus.proto.trace.v1.Span.Tracestate DEFAULT_INSTANCE;
    static {
      Tracestate defaultInstance = new Tracestate();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Tracestate.class, defaultInstance);
    }

    public static io.opencensus.proto.trace.v1.Span.Tracestate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Tracestate> PARSER;

    public static com.google.protobuf.Parser<Tracestate> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface AttributesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opencensus.proto.trace.v1.Span.Attributes)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The set of attributes. The value can be a string, an integer, a double
     * or the Boolean values `true` or `false`. Note, global attributes like 
     * server name can be set as tags using resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * </pre>
     *
     * <code>map&lt;string, .opencensus.proto.trace.v1.AttributeValue&gt; attribute_map = 1;</code>
     */
    int getAttributeMapCount();
    /**
     * <pre>
     * The set of attributes. The value can be a string, an integer, a double
     * or the Boolean values `true` or `false`. Note, global attributes like 
     * server name can be set as tags using resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * </pre>
     *
     * <code>map&lt;string, .opencensus.proto.trace.v1.AttributeValue&gt; attribute_map = 1;</code>
     */
    boolean containsAttributeMap(
        java.lang.String key);
    /**
     * Use {@link #getAttributeMapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, io.opencensus.proto.trace.v1.AttributeValue>
    getAttributeMap();
    /**
     * <pre>
     * The set of attributes. The value can be a string, an integer, a double
     * or the Boolean values `true` or `false`. Note, global attributes like 
     * server name can be set as tags using resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * </pre>
     *
     * <code>map&lt;string, .opencensus.proto.trace.v1.AttributeValue&gt; attribute_map = 1;</code>
     */
    java.util.Map<java.lang.String, io.opencensus.proto.trace.v1.AttributeValue>
    getAttributeMapMap();
    /**
     * <pre>
     * The set of attributes. The value can be a string, an integer, a double
     * or the Boolean values `true` or `false`. Note, global attributes like 
     * server name can be set as tags using resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * </pre>
     *
     * <code>map&lt;string, .opencensus.proto.trace.v1.AttributeValue&gt; attribute_map = 1;</code>
     */

    io.opencensus.proto.trace.v1.AttributeValue getAttributeMapOrDefault(
        java.lang.String key,
        io.opencensus.proto.trace.v1.AttributeValue defaultValue);
    /**
     * <pre>
     * The set of attributes. The value can be a string, an integer, a double
     * or the Boolean values `true` or `false`. Note, global attributes like 
     * server name can be set as tags using resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * </pre>
     *
     * <code>map&lt;string, .opencensus.proto.trace.v1.AttributeValue&gt; attribute_map = 1;</code>
     */

    io.opencensus.proto.trace.v1.AttributeValue getAttributeMapOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * The number of attributes that were discarded. Attributes can be discarded
     * because their keys are too long or because there are too many attributes.
     * If this value is 0, then no attributes were dropped.
     * </pre>
     *
     * <code>int32 dropped_attributes_count = 2;</code>
     * @return The droppedAttributesCount.
     */
    int getDroppedAttributesCount();
  }
  /**
   * <pre>
   * A set of attributes, each with a key and a value.
   * </pre>
   *
   * Protobuf type {@code opencensus.proto.trace.v1.Span.Attributes}
   */
  public  static final class Attributes extends
      com.google.protobuf.GeneratedMessageLite<
          Attributes, Attributes.Builder> implements
      // @@protoc_insertion_point(message_implements:opencensus.proto.trace.v1.Span.Attributes)
      AttributesOrBuilder {
    private Attributes() {
    }
    public static final int ATTRIBUTE_MAP_FIELD_NUMBER = 1;
    private static final class AttributeMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, io.opencensus.proto.trace.v1.AttributeValue> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, io.opencensus.proto.trace.v1.AttributeValue>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  io.opencensus.proto.trace.v1.AttributeValue.getDefaultInstance());
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, io.opencensus.proto.trace.v1.AttributeValue> attributeMap_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, io.opencensus.proto.trace.v1.AttributeValue>
    internalGetAttributeMap() {
      return attributeMap_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, io.opencensus.proto.trace.v1.AttributeValue>
    internalGetMutableAttributeMap() {
      if (!attributeMap_.isMutable()) {
        attributeMap_ = attributeMap_.mutableCopy();
      }
      return attributeMap_;
    }
    @java.lang.Override

    public int getAttributeMapCount() {
      return internalGetAttributeMap().size();
    }
    /**
     * <pre>
     * The set of attributes. The value can be a string, an integer, a double
     * or the Boolean values `true` or `false`. Note, global attributes like 
     * server name can be set as tags using resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * </pre>
     *
     * <code>map&lt;string, .opencensus.proto.trace.v1.AttributeValue&gt; attribute_map = 1;</code>
     */
    @java.lang.Override

    public boolean containsAttributeMap(
        java.lang.String key) {
      key.getClass();
      return internalGetAttributeMap().containsKey(key);
    }
    /**
     * Use {@link #getAttributeMapMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.opencensus.proto.trace.v1.AttributeValue> getAttributeMap() {
      return getAttributeMapMap();
    }
    /**
     * <pre>
     * The set of attributes. The value can be a string, an integer, a double
     * or the Boolean values `true` or `false`. Note, global attributes like 
     * server name can be set as tags using resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * </pre>
     *
     * <code>map&lt;string, .opencensus.proto.trace.v1.AttributeValue&gt; attribute_map = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, io.opencensus.proto.trace.v1.AttributeValue> getAttributeMapMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetAttributeMap());
    }
    /**
     * <pre>
     * The set of attributes. The value can be a string, an integer, a double
     * or the Boolean values `true` or `false`. Note, global attributes like 
     * server name can be set as tags using resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * </pre>
     *
     * <code>map&lt;string, .opencensus.proto.trace.v1.AttributeValue&gt; attribute_map = 1;</code>
     */
    @java.lang.Override

    public io.opencensus.proto.trace.v1.AttributeValue getAttributeMapOrDefault(
        java.lang.String key,
        io.opencensus.proto.trace.v1.AttributeValue defaultValue) {
      key.getClass();
      java.util.Map<java.lang.String, io.opencensus.proto.trace.v1.AttributeValue> map =
          internalGetAttributeMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * The set of attributes. The value can be a string, an integer, a double
     * or the Boolean values `true` or `false`. Note, global attributes like 
     * server name can be set as tags using resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * </pre>
     *
     * <code>map&lt;string, .opencensus.proto.trace.v1.AttributeValue&gt; attribute_map = 1;</code>
     */
    @java.lang.Override

    public io.opencensus.proto.trace.v1.AttributeValue getAttributeMapOrThrow(
        java.lang.String key) {
      key.getClass();
      java.util.Map<java.lang.String, io.opencensus.proto.trace.v1.AttributeValue> map =
          internalGetAttributeMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * The set of attributes. The value can be a string, an integer, a double
     * or the Boolean values `true` or `false`. Note, global attributes like 
     * server name can be set as tags using resource API. Examples of attributes:
     *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
     *     "/http/server_latency": 300
     *     "abc.com/myattribute": true
     *     "abc.com/score": 10.239
     * </pre>
     *
     * <code>map&lt;string, .opencensus.proto.trace.v1.AttributeValue&gt; attribute_map = 1;</code>
     */
    private java.util.Map<java.lang.String, io.opencensus.proto.trace.v1.AttributeValue>
    getMutableAttributeMapMap() {
      return internalGetMutableAttributeMap();
    }

    public static final int DROPPED_ATTRIBUTES_COUNT_FIELD_NUMBER = 2;
    private int droppedAttributesCount_;
    /**
     * <pre>
     * The number of attributes that were discarded. Attributes can be discarded
     * because their keys are too long or because there are too many attributes.
     * If this value is 0, then no attributes were dropped.
     * </pre>
     *
     * <code>int32 dropped_attributes_count = 2;</code>
     * @return The droppedAttributesCount.
     */
    @java.lang.Override
    public int getDroppedAttributesCount() {
      return droppedAttributesCount_;
    }
    /**
     * <pre>
     * The number of attributes that were discarded. Attributes can be discarded
     * because their keys are too long or because there are too many attributes.
     * If this value is 0, then no attributes were dropped.
     * </pre>
     *
     * <code>int32 dropped_attributes_count = 2;</code>
     * @param value The droppedAttributesCount to set.
     */
    private void setDroppedAttributesCount(int value) {
      
      droppedAttributesCount_ = value;
    }
    /**
     * <pre>
     * The number of attributes that were discarded. Attributes can be discarded
     * because their keys are too long or because there are too many attributes.
     * If this value is 0, then no attributes were dropped.
     * </pre>
     *
     * <code>int32 dropped_attributes_count = 2;</code>
     */
    private void clearDroppedAttributesCount() {
      
      droppedAttributesCount_ = 0;
    }

    public static io.opencensus.proto.trace.v1.Span.Attributes parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.Attributes parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Attributes parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.Attributes parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Attributes parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.Attributes parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Attributes parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.Attributes parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Attributes parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.Attributes parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Attributes parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.Attributes parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(io.opencensus.proto.trace.v1.Span.Attributes prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A set of attributes, each with a key and a value.
     * </pre>
     *
     * Protobuf type {@code opencensus.proto.trace.v1.Span.Attributes}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          io.opencensus.proto.trace.v1.Span.Attributes, Builder> implements
        // @@protoc_insertion_point(builder_implements:opencensus.proto.trace.v1.Span.Attributes)
        io.opencensus.proto.trace.v1.Span.AttributesOrBuilder {
      // Construct using io.opencensus.proto.trace.v1.Span.Attributes.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      @java.lang.Override

      public int getAttributeMapCount() {
        return instance.getAttributeMapMap().size();
      }
      /**
       * <pre>
       * The set of attributes. The value can be a string, an integer, a double
       * or the Boolean values `true` or `false`. Note, global attributes like 
       * server name can be set as tags using resource API. Examples of attributes:
       *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
       *     "/http/server_latency": 300
       *     "abc.com/myattribute": true
       *     "abc.com/score": 10.239
       * </pre>
       *
       * <code>map&lt;string, .opencensus.proto.trace.v1.AttributeValue&gt; attribute_map = 1;</code>
       */
      @java.lang.Override

      public boolean containsAttributeMap(
          java.lang.String key) {
        key.getClass();
        return instance.getAttributeMapMap().containsKey(key);
      }

      public Builder clearAttributeMap() {
        copyOnWrite();
        instance.getMutableAttributeMapMap().clear();
        return this;
      }
      /**
       * <pre>
       * The set of attributes. The value can be a string, an integer, a double
       * or the Boolean values `true` or `false`. Note, global attributes like 
       * server name can be set as tags using resource API. Examples of attributes:
       *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
       *     "/http/server_latency": 300
       *     "abc.com/myattribute": true
       *     "abc.com/score": 10.239
       * </pre>
       *
       * <code>map&lt;string, .opencensus.proto.trace.v1.AttributeValue&gt; attribute_map = 1;</code>
       */

      public Builder removeAttributeMap(
          java.lang.String key) {
        key.getClass();
        copyOnWrite();
        instance.getMutableAttributeMapMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getAttributeMapMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, io.opencensus.proto.trace.v1.AttributeValue> getAttributeMap() {
        return getAttributeMapMap();
      }
      /**
       * <pre>
       * The set of attributes. The value can be a string, an integer, a double
       * or the Boolean values `true` or `false`. Note, global attributes like 
       * server name can be set as tags using resource API. Examples of attributes:
       *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
       *     "/http/server_latency": 300
       *     "abc.com/myattribute": true
       *     "abc.com/score": 10.239
       * </pre>
       *
       * <code>map&lt;string, .opencensus.proto.trace.v1.AttributeValue&gt; attribute_map = 1;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, io.opencensus.proto.trace.v1.AttributeValue> getAttributeMapMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getAttributeMapMap());
      }
      /**
       * <pre>
       * The set of attributes. The value can be a string, an integer, a double
       * or the Boolean values `true` or `false`. Note, global attributes like 
       * server name can be set as tags using resource API. Examples of attributes:
       *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
       *     "/http/server_latency": 300
       *     "abc.com/myattribute": true
       *     "abc.com/score": 10.239
       * </pre>
       *
       * <code>map&lt;string, .opencensus.proto.trace.v1.AttributeValue&gt; attribute_map = 1;</code>
       */
      @java.lang.Override

      public io.opencensus.proto.trace.v1.AttributeValue getAttributeMapOrDefault(
          java.lang.String key,
          io.opencensus.proto.trace.v1.AttributeValue defaultValue) {
        key.getClass();
        java.util.Map<java.lang.String, io.opencensus.proto.trace.v1.AttributeValue> map =
            instance.getAttributeMapMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * The set of attributes. The value can be a string, an integer, a double
       * or the Boolean values `true` or `false`. Note, global attributes like 
       * server name can be set as tags using resource API. Examples of attributes:
       *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
       *     "/http/server_latency": 300
       *     "abc.com/myattribute": true
       *     "abc.com/score": 10.239
       * </pre>
       *
       * <code>map&lt;string, .opencensus.proto.trace.v1.AttributeValue&gt; attribute_map = 1;</code>
       */
      @java.lang.Override

      public io.opencensus.proto.trace.v1.AttributeValue getAttributeMapOrThrow(
          java.lang.String key) {
        key.getClass();
        java.util.Map<java.lang.String, io.opencensus.proto.trace.v1.AttributeValue> map =
            instance.getAttributeMapMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <pre>
       * The set of attributes. The value can be a string, an integer, a double
       * or the Boolean values `true` or `false`. Note, global attributes like 
       * server name can be set as tags using resource API. Examples of attributes:
       *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
       *     "/http/server_latency": 300
       *     "abc.com/myattribute": true
       *     "abc.com/score": 10.239
       * </pre>
       *
       * <code>map&lt;string, .opencensus.proto.trace.v1.AttributeValue&gt; attribute_map = 1;</code>
       */
      public Builder putAttributeMap(
          java.lang.String key,
          io.opencensus.proto.trace.v1.AttributeValue value) {
        key.getClass();
        value.getClass();
        copyOnWrite();
        instance.getMutableAttributeMapMap().put(key, value);
        return this;
      }
      /**
       * <pre>
       * The set of attributes. The value can be a string, an integer, a double
       * or the Boolean values `true` or `false`. Note, global attributes like 
       * server name can be set as tags using resource API. Examples of attributes:
       *     "/http/user_agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"
       *     "/http/server_latency": 300
       *     "abc.com/myattribute": true
       *     "abc.com/score": 10.239
       * </pre>
       *
       * <code>map&lt;string, .opencensus.proto.trace.v1.AttributeValue&gt; attribute_map = 1;</code>
       */
      public Builder putAllAttributeMap(
          java.util.Map<java.lang.String, io.opencensus.proto.trace.v1.AttributeValue> values) {
        copyOnWrite();
        instance.getMutableAttributeMapMap().putAll(values);
        return this;
      }

      /**
       * <pre>
       * The number of attributes that were discarded. Attributes can be discarded
       * because their keys are too long or because there are too many attributes.
       * If this value is 0, then no attributes were dropped.
       * </pre>
       *
       * <code>int32 dropped_attributes_count = 2;</code>
       * @return The droppedAttributesCount.
       */
      @java.lang.Override
      public int getDroppedAttributesCount() {
        return instance.getDroppedAttributesCount();
      }
      /**
       * <pre>
       * The number of attributes that were discarded. Attributes can be discarded
       * because their keys are too long or because there are too many attributes.
       * If this value is 0, then no attributes were dropped.
       * </pre>
       *
       * <code>int32 dropped_attributes_count = 2;</code>
       * @param value The droppedAttributesCount to set.
       * @return This builder for chaining.
       */
      public Builder setDroppedAttributesCount(int value) {
        copyOnWrite();
        instance.setDroppedAttributesCount(value);
        return this;
      }
      /**
       * <pre>
       * The number of attributes that were discarded. Attributes can be discarded
       * because their keys are too long or because there are too many attributes.
       * If this value is 0, then no attributes were dropped.
       * </pre>
       *
       * <code>int32 dropped_attributes_count = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDroppedAttributesCount() {
        copyOnWrite();
        instance.clearDroppedAttributesCount();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:opencensus.proto.trace.v1.Span.Attributes)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new io.opencensus.proto.trace.v1.Span.Attributes();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "attributeMap_",
              AttributeMapDefaultEntryHolder.defaultEntry,
              "droppedAttributesCount_",
            };
            java.lang.String info =
                "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0001\u0000\u0000\u00012\u0002\u0004";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<io.opencensus.proto.trace.v1.Span.Attributes> parser = PARSER;
          if (parser == null) {
            synchronized (io.opencensus.proto.trace.v1.Span.Attributes.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<io.opencensus.proto.trace.v1.Span.Attributes>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.Attributes)
    private static final io.opencensus.proto.trace.v1.Span.Attributes DEFAULT_INSTANCE;
    static {
      Attributes defaultInstance = new Attributes();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Attributes.class, defaultInstance);
    }

    public static io.opencensus.proto.trace.v1.Span.Attributes getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Attributes> PARSER;

    public static com.google.protobuf.Parser<Attributes> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TimeEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opencensus.proto.trace.v1.Span.TimeEvent)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The time the event occurred.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1;</code>
     * @return Whether the time field is set.
     */
    boolean hasTime();
    /**
     * <pre>
     * The time the event occurred.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1;</code>
     * @return The time.
     */
    com.google.protobuf.Timestamp getTime();

    /**
     * <pre>
     * A text annotation with a set of attributes.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;</code>
     * @return Whether the annotation field is set.
     */
    boolean hasAnnotation();
    /**
     * <pre>
     * A text annotation with a set of attributes.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;</code>
     * @return The annotation.
     */
    io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation getAnnotation();

    /**
     * <pre>
     * An event describing a message sent/received between Spans.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;</code>
     * @return Whether the messageEvent field is set.
     */
    boolean hasMessageEvent();
    /**
     * <pre>
     * An event describing a message sent/received between Spans.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;</code>
     * @return The messageEvent.
     */
    io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent getMessageEvent();

    public io.opencensus.proto.trace.v1.Span.TimeEvent.ValueCase getValueCase();
  }
  /**
   * <pre>
   * A time-stamped annotation or message event in the Span.
   * </pre>
   *
   * Protobuf type {@code opencensus.proto.trace.v1.Span.TimeEvent}
   */
  public  static final class TimeEvent extends
      com.google.protobuf.GeneratedMessageLite<
          TimeEvent, TimeEvent.Builder> implements
      // @@protoc_insertion_point(message_implements:opencensus.proto.trace.v1.Span.TimeEvent)
      TimeEventOrBuilder {
    private TimeEvent() {
    }
    public interface AnnotationOrBuilder extends
        // @@protoc_insertion_point(interface_extends:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * A user-supplied message describing the event.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString description = 1;</code>
       * @return Whether the description field is set.
       */
      boolean hasDescription();
      /**
       * <pre>
       * A user-supplied message describing the event.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString description = 1;</code>
       * @return The description.
       */
      io.opencensus.proto.trace.v1.TruncatableString getDescription();

      /**
       * <pre>
       * A set of attributes on the annotation.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 2;</code>
       * @return Whether the attributes field is set.
       */
      boolean hasAttributes();
      /**
       * <pre>
       * A set of attributes on the annotation.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 2;</code>
       * @return The attributes.
       */
      io.opencensus.proto.trace.v1.Span.Attributes getAttributes();
    }
    /**
     * <pre>
     * A text annotation with a set of attributes.
     * </pre>
     *
     * Protobuf type {@code opencensus.proto.trace.v1.Span.TimeEvent.Annotation}
     */
    public  static final class Annotation extends
        com.google.protobuf.GeneratedMessageLite<
            Annotation, Annotation.Builder> implements
        // @@protoc_insertion_point(message_implements:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
        AnnotationOrBuilder {
      private Annotation() {
      }
      public static final int DESCRIPTION_FIELD_NUMBER = 1;
      private io.opencensus.proto.trace.v1.TruncatableString description_;
      /**
       * <pre>
       * A user-supplied message describing the event.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString description = 1;</code>
       */
      @java.lang.Override
      public boolean hasDescription() {
        return description_ != null;
      }
      /**
       * <pre>
       * A user-supplied message describing the event.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString description = 1;</code>
       */
      @java.lang.Override
      public io.opencensus.proto.trace.v1.TruncatableString getDescription() {
        return description_ == null ? io.opencensus.proto.trace.v1.TruncatableString.getDefaultInstance() : description_;
      }
      /**
       * <pre>
       * A user-supplied message describing the event.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString description = 1;</code>
       */
      private void setDescription(io.opencensus.proto.trace.v1.TruncatableString value) {
        value.getClass();
  description_ = value;
        
        }
      /**
       * <pre>
       * A user-supplied message describing the event.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString description = 1;</code>
       */
      @java.lang.SuppressWarnings({"ReferenceEquality"})
      private void mergeDescription(io.opencensus.proto.trace.v1.TruncatableString value) {
        value.getClass();
  if (description_ != null &&
            description_ != io.opencensus.proto.trace.v1.TruncatableString.getDefaultInstance()) {
          description_ =
            io.opencensus.proto.trace.v1.TruncatableString.newBuilder(description_).mergeFrom(value).buildPartial();
        } else {
          description_ = value;
        }
        
      }
      /**
       * <pre>
       * A user-supplied message describing the event.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.TruncatableString description = 1;</code>
       */
      private void clearDescription() {  description_ = null;
        
      }

      public static final int ATTRIBUTES_FIELD_NUMBER = 2;
      private io.opencensus.proto.trace.v1.Span.Attributes attributes_;
      /**
       * <pre>
       * A set of attributes on the annotation.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 2;</code>
       */
      @java.lang.Override
      public boolean hasAttributes() {
        return attributes_ != null;
      }
      /**
       * <pre>
       * A set of attributes on the annotation.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 2;</code>
       */
      @java.lang.Override
      public io.opencensus.proto.trace.v1.Span.Attributes getAttributes() {
        return attributes_ == null ? io.opencensus.proto.trace.v1.Span.Attributes.getDefaultInstance() : attributes_;
      }
      /**
       * <pre>
       * A set of attributes on the annotation.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 2;</code>
       */
      private void setAttributes(io.opencensus.proto.trace.v1.Span.Attributes value) {
        value.getClass();
  attributes_ = value;
        
        }
      /**
       * <pre>
       * A set of attributes on the annotation.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 2;</code>
       */
      @java.lang.SuppressWarnings({"ReferenceEquality"})
      private void mergeAttributes(io.opencensus.proto.trace.v1.Span.Attributes value) {
        value.getClass();
  if (attributes_ != null &&
            attributes_ != io.opencensus.proto.trace.v1.Span.Attributes.getDefaultInstance()) {
          attributes_ =
            io.opencensus.proto.trace.v1.Span.Attributes.newBuilder(attributes_).mergeFrom(value).buildPartial();
        } else {
          attributes_ = value;
        }
        
      }
      /**
       * <pre>
       * A set of attributes on the annotation.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 2;</code>
       */
      private void clearAttributes() {  attributes_ = null;
        
      }

      public static io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * A text annotation with a set of attributes.
       * </pre>
       *
       * Protobuf type {@code opencensus.proto.trace.v1.Span.TimeEvent.Annotation}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation, Builder> implements
          // @@protoc_insertion_point(builder_implements:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
          io.opencensus.proto.trace.v1.Span.TimeEvent.AnnotationOrBuilder {
        // Construct using io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * A user-supplied message describing the event.
         * </pre>
         *
         * <code>.opencensus.proto.trace.v1.TruncatableString description = 1;</code>
         */
        @java.lang.Override
        public boolean hasDescription() {
          return instance.hasDescription();
        }
        /**
         * <pre>
         * A user-supplied message describing the event.
         * </pre>
         *
         * <code>.opencensus.proto.trace.v1.TruncatableString description = 1;</code>
         */
        @java.lang.Override
        public io.opencensus.proto.trace.v1.TruncatableString getDescription() {
          return instance.getDescription();
        }
        /**
         * <pre>
         * A user-supplied message describing the event.
         * </pre>
         *
         * <code>.opencensus.proto.trace.v1.TruncatableString description = 1;</code>
         */
        public Builder setDescription(io.opencensus.proto.trace.v1.TruncatableString value) {
          copyOnWrite();
          instance.setDescription(value);
          return this;
          }
        /**
         * <pre>
         * A user-supplied message describing the event.
         * </pre>
         *
         * <code>.opencensus.proto.trace.v1.TruncatableString description = 1;</code>
         */
        public Builder setDescription(
            io.opencensus.proto.trace.v1.TruncatableString.Builder builderForValue) {
          copyOnWrite();
          instance.setDescription(builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * A user-supplied message describing the event.
         * </pre>
         *
         * <code>.opencensus.proto.trace.v1.TruncatableString description = 1;</code>
         */
        public Builder mergeDescription(io.opencensus.proto.trace.v1.TruncatableString value) {
          copyOnWrite();
          instance.mergeDescription(value);
          return this;
        }
        /**
         * <pre>
         * A user-supplied message describing the event.
         * </pre>
         *
         * <code>.opencensus.proto.trace.v1.TruncatableString description = 1;</code>
         */
        public Builder clearDescription() {  copyOnWrite();
          instance.clearDescription();
          return this;
        }

        /**
         * <pre>
         * A set of attributes on the annotation.
         * </pre>
         *
         * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 2;</code>
         */
        @java.lang.Override
        public boolean hasAttributes() {
          return instance.hasAttributes();
        }
        /**
         * <pre>
         * A set of attributes on the annotation.
         * </pre>
         *
         * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 2;</code>
         */
        @java.lang.Override
        public io.opencensus.proto.trace.v1.Span.Attributes getAttributes() {
          return instance.getAttributes();
        }
        /**
         * <pre>
         * A set of attributes on the annotation.
         * </pre>
         *
         * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 2;</code>
         */
        public Builder setAttributes(io.opencensus.proto.trace.v1.Span.Attributes value) {
          copyOnWrite();
          instance.setAttributes(value);
          return this;
          }
        /**
         * <pre>
         * A set of attributes on the annotation.
         * </pre>
         *
         * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 2;</code>
         */
        public Builder setAttributes(
            io.opencensus.proto.trace.v1.Span.Attributes.Builder builderForValue) {
          copyOnWrite();
          instance.setAttributes(builderForValue.build());
          return this;
        }
        /**
         * <pre>
         * A set of attributes on the annotation.
         * </pre>
         *
         * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 2;</code>
         */
        public Builder mergeAttributes(io.opencensus.proto.trace.v1.Span.Attributes value) {
          copyOnWrite();
          instance.mergeAttributes(value);
          return this;
        }
        /**
         * <pre>
         * A set of attributes on the annotation.
         * </pre>
         *
         * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 2;</code>
         */
        public Builder clearAttributes() {  copyOnWrite();
          instance.clearAttributes();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "description_",
                "attributes_",
              };
              java.lang.String info =
                  "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001\t\u0002\t";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation> parser = PARSER;
            if (parser == null) {
              synchronized (io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.TimeEvent.Annotation)
      private static final io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation DEFAULT_INSTANCE;
      static {
        Annotation defaultInstance = new Annotation();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          Annotation.class, defaultInstance);
      }

      public static io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<Annotation> PARSER;

      public static com.google.protobuf.Parser<Annotation> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    public interface MessageEventOrBuilder extends
        // @@protoc_insertion_point(interface_extends:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
        com.google.protobuf.MessageLiteOrBuilder {

      /**
       * <pre>
       * The type of MessageEvent. Indicates whether the message was sent or
       * received.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      int getTypeValue();
      /**
       * <pre>
       * The type of MessageEvent. Indicates whether the message was sent or
       * received.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;</code>
       * @return The type.
       */
      io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type getType();

      /**
       * <pre>
       * An identifier for the MessageEvent's message that can be used to match
       * SENT and RECEIVED MessageEvents. For example, this field could
       * represent a sequence ID for a streaming RPC. It is recommended to be
       * unique within a Span.
       * </pre>
       *
       * <code>uint64 id = 2;</code>
       * @return The id.
       */
      long getId();

      /**
       * <pre>
       * The number of uncompressed bytes sent or received.
       * </pre>
       *
       * <code>uint64 uncompressed_size = 3;</code>
       * @return The uncompressedSize.
       */
      long getUncompressedSize();

      /**
       * <pre>
       * The number of compressed bytes sent or received. If zero, assumed to
       * be the same size as uncompressed.
       * </pre>
       *
       * <code>uint64 compressed_size = 4;</code>
       * @return The compressedSize.
       */
      long getCompressedSize();
    }
    /**
     * <pre>
     * An event describing a message sent/received between Spans.
     * </pre>
     *
     * Protobuf type {@code opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent}
     */
    public  static final class MessageEvent extends
        com.google.protobuf.GeneratedMessageLite<
            MessageEvent, MessageEvent.Builder> implements
        // @@protoc_insertion_point(message_implements:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
        MessageEventOrBuilder {
      private MessageEvent() {
      }
      /**
       * <pre>
       * Indicates whether the message was sent or received.
       * </pre>
       *
       * Protobuf enum {@code opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type}
       */
      public enum Type
          implements com.google.protobuf.Internal.EnumLite {
        /**
         * <pre>
         * Unknown event type.
         * </pre>
         *
         * <code>TYPE_UNSPECIFIED = 0;</code>
         */
        TYPE_UNSPECIFIED(0),
        /**
         * <pre>
         * Indicates a sent message.
         * </pre>
         *
         * <code>SENT = 1;</code>
         */
        SENT(1),
        /**
         * <pre>
         * Indicates a received message.
         * </pre>
         *
         * <code>RECEIVED = 2;</code>
         */
        RECEIVED(2),
        UNRECOGNIZED(-1),
        ;

        /**
         * <pre>
         * Unknown event type.
         * </pre>
         *
         * <code>TYPE_UNSPECIFIED = 0;</code>
         */
        public static final int TYPE_UNSPECIFIED_VALUE = 0;
        /**
         * <pre>
         * Indicates a sent message.
         * </pre>
         *
         * <code>SENT = 1;</code>
         */
        public static final int SENT_VALUE = 1;
        /**
         * <pre>
         * Indicates a received message.
         * </pre>
         *
         * <code>RECEIVED = 2;</code>
         */
        public static final int RECEIVED_VALUE = 2;


        @java.lang.Override
        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @param value The number of the enum to look for.
         * @return The enum associated with the given number.
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Type valueOf(int value) {
          return forNumber(value);
        }

        public static Type forNumber(int value) {
          switch (value) {
            case 0: return TYPE_UNSPECIFIED;
            case 1: return SENT;
            case 2: return RECEIVED;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Type>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            Type> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<Type>() {
                @java.lang.Override
                public Type findValueByNumber(int number) {
                  return Type.forNumber(number);
                }
              };

        public static com.google.protobuf.Internal.EnumVerifier 
            internalGetVerifier() {
          return TypeVerifier.INSTANCE;
        }

        private static final class TypeVerifier implements 
             com.google.protobuf.Internal.EnumVerifier { 
                static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new TypeVerifier();
                @java.lang.Override
                public boolean isInRange(int number) {
                  return Type.forNumber(number) != null;
                }
              };

        private final int value;

        private Type(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type)
      }

      public static final int TYPE_FIELD_NUMBER = 1;
      private int type_;
      /**
       * <pre>
       * The type of MessageEvent. Indicates whether the message was sent or
       * received.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override
      public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * The type of MessageEvent. Indicates whether the message was sent or
       * received.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type getType() {
        io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type result = io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type.forNumber(type_);
        return result == null ? io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The type of MessageEvent. Indicates whether the message was sent or
       * received.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;</code>
       * @param value The enum numeric value on the wire for type to set.
       */
      private void setTypeValue(int value) {
          type_ = value;
      }
      /**
       * <pre>
       * The type of MessageEvent. Indicates whether the message was sent or
       * received.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;</code>
       * @param value The type to set.
       */
      private void setType(io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type value) {
        type_ = value.getNumber();
        
      }
      /**
       * <pre>
       * The type of MessageEvent. Indicates whether the message was sent or
       * received.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;</code>
       */
      private void clearType() {
        
        type_ = 0;
      }

      public static final int ID_FIELD_NUMBER = 2;
      private long id_;
      /**
       * <pre>
       * An identifier for the MessageEvent's message that can be used to match
       * SENT and RECEIVED MessageEvents. For example, this field could
       * represent a sequence ID for a streaming RPC. It is recommended to be
       * unique within a Span.
       * </pre>
       *
       * <code>uint64 id = 2;</code>
       * @return The id.
       */
      @java.lang.Override
      public long getId() {
        return id_;
      }
      /**
       * <pre>
       * An identifier for the MessageEvent's message that can be used to match
       * SENT and RECEIVED MessageEvents. For example, this field could
       * represent a sequence ID for a streaming RPC. It is recommended to be
       * unique within a Span.
       * </pre>
       *
       * <code>uint64 id = 2;</code>
       * @param value The id to set.
       */
      private void setId(long value) {
        
        id_ = value;
      }
      /**
       * <pre>
       * An identifier for the MessageEvent's message that can be used to match
       * SENT and RECEIVED MessageEvents. For example, this field could
       * represent a sequence ID for a streaming RPC. It is recommended to be
       * unique within a Span.
       * </pre>
       *
       * <code>uint64 id = 2;</code>
       */
      private void clearId() {
        
        id_ = 0L;
      }

      public static final int UNCOMPRESSED_SIZE_FIELD_NUMBER = 3;
      private long uncompressedSize_;
      /**
       * <pre>
       * The number of uncompressed bytes sent or received.
       * </pre>
       *
       * <code>uint64 uncompressed_size = 3;</code>
       * @return The uncompressedSize.
       */
      @java.lang.Override
      public long getUncompressedSize() {
        return uncompressedSize_;
      }
      /**
       * <pre>
       * The number of uncompressed bytes sent or received.
       * </pre>
       *
       * <code>uint64 uncompressed_size = 3;</code>
       * @param value The uncompressedSize to set.
       */
      private void setUncompressedSize(long value) {
        
        uncompressedSize_ = value;
      }
      /**
       * <pre>
       * The number of uncompressed bytes sent or received.
       * </pre>
       *
       * <code>uint64 uncompressed_size = 3;</code>
       */
      private void clearUncompressedSize() {
        
        uncompressedSize_ = 0L;
      }

      public static final int COMPRESSED_SIZE_FIELD_NUMBER = 4;
      private long compressedSize_;
      /**
       * <pre>
       * The number of compressed bytes sent or received. If zero, assumed to
       * be the same size as uncompressed.
       * </pre>
       *
       * <code>uint64 compressed_size = 4;</code>
       * @return The compressedSize.
       */
      @java.lang.Override
      public long getCompressedSize() {
        return compressedSize_;
      }
      /**
       * <pre>
       * The number of compressed bytes sent or received. If zero, assumed to
       * be the same size as uncompressed.
       * </pre>
       *
       * <code>uint64 compressed_size = 4;</code>
       * @param value The compressedSize to set.
       */
      private void setCompressedSize(long value) {
        
        compressedSize_ = value;
      }
      /**
       * <pre>
       * The number of compressed bytes sent or received. If zero, assumed to
       * be the same size as uncompressed.
       * </pre>
       *
       * <code>uint64 compressed_size = 4;</code>
       */
      private void clearCompressedSize() {
        
        compressedSize_ = 0L;
      }

      public static io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, data, extensionRegistry);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input);
      }
      public static io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageLite.parseFrom(
            DEFAULT_INSTANCE, input, extensionRegistry);
      }

      public static Builder newBuilder() {
        return (Builder) DEFAULT_INSTANCE.createBuilder();
      }
      public static Builder newBuilder(io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent prototype) {
        return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
      }

      /**
       * <pre>
       * An event describing a message sent/received between Spans.
       * </pre>
       *
       * Protobuf type {@code opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent, Builder> implements
          // @@protoc_insertion_point(builder_implements:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
          io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEventOrBuilder {
        // Construct using io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.newBuilder()
        private Builder() {
          super(DEFAULT_INSTANCE);
        }


        /**
         * <pre>
         * The type of MessageEvent. Indicates whether the message was sent or
         * received.
         * </pre>
         *
         * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;</code>
         * @return The enum numeric value on the wire for type.
         */
        @java.lang.Override
        public int getTypeValue() {
          return instance.getTypeValue();
        }
        /**
         * <pre>
         * The type of MessageEvent. Indicates whether the message was sent or
         * received.
         * </pre>
         *
         * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;</code>
         * @param value The type to set.
         * @return This builder for chaining.
         */
        public Builder setTypeValue(int value) {
          copyOnWrite();
          instance.setTypeValue(value);
          return this;
        }
        /**
         * <pre>
         * The type of MessageEvent. Indicates whether the message was sent or
         * received.
         * </pre>
         *
         * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;</code>
         * @return The type.
         */
        @java.lang.Override
        public io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type getType() {
          return instance.getType();
        }
        /**
         * <pre>
         * The type of MessageEvent. Indicates whether the message was sent or
         * received.
         * </pre>
         *
         * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;</code>
         * @param value The enum numeric value on the wire for type to set.
         * @return This builder for chaining.
         */
        public Builder setType(io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type value) {
          copyOnWrite();
          instance.setType(value);
          return this;
        }
        /**
         * <pre>
         * The type of MessageEvent. Indicates whether the message was sent or
         * received.
         * </pre>
         *
         * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type type = 1;</code>
         * @return This builder for chaining.
         */
        public Builder clearType() {
          copyOnWrite();
          instance.clearType();
          return this;
        }

        /**
         * <pre>
         * An identifier for the MessageEvent's message that can be used to match
         * SENT and RECEIVED MessageEvents. For example, this field could
         * represent a sequence ID for a streaming RPC. It is recommended to be
         * unique within a Span.
         * </pre>
         *
         * <code>uint64 id = 2;</code>
         * @return The id.
         */
        @java.lang.Override
        public long getId() {
          return instance.getId();
        }
        /**
         * <pre>
         * An identifier for the MessageEvent's message that can be used to match
         * SENT and RECEIVED MessageEvents. For example, this field could
         * represent a sequence ID for a streaming RPC. It is recommended to be
         * unique within a Span.
         * </pre>
         *
         * <code>uint64 id = 2;</code>
         * @param value The id to set.
         * @return This builder for chaining.
         */
        public Builder setId(long value) {
          copyOnWrite();
          instance.setId(value);
          return this;
        }
        /**
         * <pre>
         * An identifier for the MessageEvent's message that can be used to match
         * SENT and RECEIVED MessageEvents. For example, this field could
         * represent a sequence ID for a streaming RPC. It is recommended to be
         * unique within a Span.
         * </pre>
         *
         * <code>uint64 id = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearId() {
          copyOnWrite();
          instance.clearId();
          return this;
        }

        /**
         * <pre>
         * The number of uncompressed bytes sent or received.
         * </pre>
         *
         * <code>uint64 uncompressed_size = 3;</code>
         * @return The uncompressedSize.
         */
        @java.lang.Override
        public long getUncompressedSize() {
          return instance.getUncompressedSize();
        }
        /**
         * <pre>
         * The number of uncompressed bytes sent or received.
         * </pre>
         *
         * <code>uint64 uncompressed_size = 3;</code>
         * @param value The uncompressedSize to set.
         * @return This builder for chaining.
         */
        public Builder setUncompressedSize(long value) {
          copyOnWrite();
          instance.setUncompressedSize(value);
          return this;
        }
        /**
         * <pre>
         * The number of uncompressed bytes sent or received.
         * </pre>
         *
         * <code>uint64 uncompressed_size = 3;</code>
         * @return This builder for chaining.
         */
        public Builder clearUncompressedSize() {
          copyOnWrite();
          instance.clearUncompressedSize();
          return this;
        }

        /**
         * <pre>
         * The number of compressed bytes sent or received. If zero, assumed to
         * be the same size as uncompressed.
         * </pre>
         *
         * <code>uint64 compressed_size = 4;</code>
         * @return The compressedSize.
         */
        @java.lang.Override
        public long getCompressedSize() {
          return instance.getCompressedSize();
        }
        /**
         * <pre>
         * The number of compressed bytes sent or received. If zero, assumed to
         * be the same size as uncompressed.
         * </pre>
         *
         * <code>uint64 compressed_size = 4;</code>
         * @param value The compressedSize to set.
         * @return This builder for chaining.
         */
        public Builder setCompressedSize(long value) {
          copyOnWrite();
          instance.setCompressedSize(value);
          return this;
        }
        /**
         * <pre>
         * The number of compressed bytes sent or received. If zero, assumed to
         * be the same size as uncompressed.
         * </pre>
         *
         * <code>uint64 compressed_size = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearCompressedSize() {
          copyOnWrite();
          instance.clearCompressedSize();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
      }
      @java.lang.Override
      @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
      protected final java.lang.Object dynamicMethod(
          com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
          java.lang.Object arg0, java.lang.Object arg1) {
        switch (method) {
          case NEW_MUTABLE_INSTANCE: {
            return new io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent();
          }
          case NEW_BUILDER: {
            return new Builder();
          }
          case BUILD_MESSAGE_INFO: {
              java.lang.Object[] objects = new java.lang.Object[] {
                "type_",
                "id_",
                "uncompressedSize_",
                "compressedSize_",
              };
              java.lang.String info =
                  "\u0000\u0004\u0000\u0000\u0001\u0004\u0004\u0000\u0000\u0000\u0001\f\u0002\u0003" +
                  "\u0003\u0003\u0004\u0003";
              return newMessageInfo(DEFAULT_INSTANCE, info, objects);
          }
          // fall through
          case GET_DEFAULT_INSTANCE: {
            return DEFAULT_INSTANCE;
          }
          case GET_PARSER: {
            com.google.protobuf.Parser<io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent> parser = PARSER;
            if (parser == null) {
              synchronized (io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.class) {
                parser = PARSER;
                if (parser == null) {
                  parser =
                      new DefaultInstanceBasedParser<io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent>(
                          DEFAULT_INSTANCE);
                  PARSER = parser;
                }
              }
            }
            return parser;
        }
        case GET_MEMOIZED_IS_INITIALIZED: {
          return (byte) 1;
        }
        case SET_MEMOIZED_IS_INITIALIZED: {
          return null;
        }
        }
        throw new UnsupportedOperationException();
      }


      // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent)
      private static final io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent DEFAULT_INSTANCE;
      static {
        MessageEvent defaultInstance = new MessageEvent();
        // New instances are implicitly immutable so no need to make
        // immutable.
        DEFAULT_INSTANCE = defaultInstance;
        com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
          MessageEvent.class, defaultInstance);
      }

      public static io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static volatile com.google.protobuf.Parser<MessageEvent> PARSER;

      public static com.google.protobuf.Parser<MessageEvent> parser() {
        return DEFAULT_INSTANCE.getParserForType();
      }
    }

    private int valueCase_ = 0;
    private java.lang.Object value_;
    public enum ValueCase {
      ANNOTATION(2),
      MESSAGE_EVENT(3),
      VALUE_NOT_SET(0);
      private final int value;
      private ValueCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ValueCase valueOf(int value) {
        return forNumber(value);
      }

      public static ValueCase forNumber(int value) {
        switch (value) {
          case 2: return ANNOTATION;
          case 3: return MESSAGE_EVENT;
          case 0: return VALUE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    @java.lang.Override
    public ValueCase
    getValueCase() {
      return ValueCase.forNumber(
          valueCase_);
    }

    private void clearValue() {
      valueCase_ = 0;
      value_ = null;
    }

    public static final int TIME_FIELD_NUMBER = 1;
    private com.google.protobuf.Timestamp time_;
    /**
     * <pre>
     * The time the event occurred.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1;</code>
     */
    @java.lang.Override
    public boolean hasTime() {
      return time_ != null;
    }
    /**
     * <pre>
     * The time the event occurred.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Timestamp getTime() {
      return time_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : time_;
    }
    /**
     * <pre>
     * The time the event occurred.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1;</code>
     */
    private void setTime(com.google.protobuf.Timestamp value) {
      value.getClass();
  time_ = value;
      
      }
    /**
     * <pre>
     * The time the event occurred.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeTime(com.google.protobuf.Timestamp value) {
      value.getClass();
  if (time_ != null &&
          time_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
        time_ =
          com.google.protobuf.Timestamp.newBuilder(time_).mergeFrom(value).buildPartial();
      } else {
        time_ = value;
      }
      
    }
    /**
     * <pre>
     * The time the event occurred.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp time = 1;</code>
     */
    private void clearTime() {  time_ = null;
      
    }

    public static final int ANNOTATION_FIELD_NUMBER = 2;
    /**
     * <pre>
     * A text annotation with a set of attributes.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;</code>
     */
    @java.lang.Override
    public boolean hasAnnotation() {
      return valueCase_ == 2;
    }
    /**
     * <pre>
     * A text annotation with a set of attributes.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation getAnnotation() {
      if (valueCase_ == 2) {
         return (io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation) value_;
      }
      return io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.getDefaultInstance();
    }
    /**
     * <pre>
     * A text annotation with a set of attributes.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;</code>
     */
    private void setAnnotation(io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation value) {
      value.getClass();
  value_ = value;
      valueCase_ = 2;
    }
    /**
     * <pre>
     * A text annotation with a set of attributes.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;</code>
     */
    private void mergeAnnotation(io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation value) {
      value.getClass();
  if (valueCase_ == 2 &&
          value_ != io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.getDefaultInstance()) {
        value_ = io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.newBuilder((io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation) value_)
            .mergeFrom(value).buildPartial();
      } else {
        value_ = value;
      }
      valueCase_ = 2;
    }
    /**
     * <pre>
     * A text annotation with a set of attributes.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;</code>
     */
    private void clearAnnotation() {
      if (valueCase_ == 2) {
        valueCase_ = 0;
        value_ = null;
      }
    }

    public static final int MESSAGE_EVENT_FIELD_NUMBER = 3;
    /**
     * <pre>
     * An event describing a message sent/received between Spans.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;</code>
     */
    @java.lang.Override
    public boolean hasMessageEvent() {
      return valueCase_ == 3;
    }
    /**
     * <pre>
     * An event describing a message sent/received between Spans.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent getMessageEvent() {
      if (valueCase_ == 3) {
         return (io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent) value_;
      }
      return io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.getDefaultInstance();
    }
    /**
     * <pre>
     * An event describing a message sent/received between Spans.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;</code>
     */
    private void setMessageEvent(io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent value) {
      value.getClass();
  value_ = value;
      valueCase_ = 3;
    }
    /**
     * <pre>
     * An event describing a message sent/received between Spans.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;</code>
     */
    private void mergeMessageEvent(io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent value) {
      value.getClass();
  if (valueCase_ == 3 &&
          value_ != io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.getDefaultInstance()) {
        value_ = io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.newBuilder((io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent) value_)
            .mergeFrom(value).buildPartial();
      } else {
        value_ = value;
      }
      valueCase_ = 3;
    }
    /**
     * <pre>
     * An event describing a message sent/received between Spans.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;</code>
     */
    private void clearMessageEvent() {
      if (valueCase_ == 3) {
        valueCase_ = 0;
        value_ = null;
      }
    }

    public static io.opencensus.proto.trace.v1.Span.TimeEvent parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvent parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(io.opencensus.proto.trace.v1.Span.TimeEvent prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A time-stamped annotation or message event in the Span.
     * </pre>
     *
     * Protobuf type {@code opencensus.proto.trace.v1.Span.TimeEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          io.opencensus.proto.trace.v1.Span.TimeEvent, Builder> implements
        // @@protoc_insertion_point(builder_implements:opencensus.proto.trace.v1.Span.TimeEvent)
        io.opencensus.proto.trace.v1.Span.TimeEventOrBuilder {
      // Construct using io.opencensus.proto.trace.v1.Span.TimeEvent.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      @java.lang.Override
      public ValueCase
          getValueCase() {
        return instance.getValueCase();
      }

      public Builder clearValue() {
        copyOnWrite();
        instance.clearValue();
        return this;
      }


      /**
       * <pre>
       * The time the event occurred.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp time = 1;</code>
       */
      @java.lang.Override
      public boolean hasTime() {
        return instance.hasTime();
      }
      /**
       * <pre>
       * The time the event occurred.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp time = 1;</code>
       */
      @java.lang.Override
      public com.google.protobuf.Timestamp getTime() {
        return instance.getTime();
      }
      /**
       * <pre>
       * The time the event occurred.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp time = 1;</code>
       */
      public Builder setTime(com.google.protobuf.Timestamp value) {
        copyOnWrite();
        instance.setTime(value);
        return this;
        }
      /**
       * <pre>
       * The time the event occurred.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp time = 1;</code>
       */
      public Builder setTime(
          com.google.protobuf.Timestamp.Builder builderForValue) {
        copyOnWrite();
        instance.setTime(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The time the event occurred.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp time = 1;</code>
       */
      public Builder mergeTime(com.google.protobuf.Timestamp value) {
        copyOnWrite();
        instance.mergeTime(value);
        return this;
      }
      /**
       * <pre>
       * The time the event occurred.
       * </pre>
       *
       * <code>.google.protobuf.Timestamp time = 1;</code>
       */
      public Builder clearTime() {  copyOnWrite();
        instance.clearTime();
        return this;
      }

      /**
       * <pre>
       * A text annotation with a set of attributes.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;</code>
       */
      @java.lang.Override
      public boolean hasAnnotation() {
        return instance.hasAnnotation();
      }
      /**
       * <pre>
       * A text annotation with a set of attributes.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;</code>
       */
      @java.lang.Override
      public io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation getAnnotation() {
        return instance.getAnnotation();
      }
      /**
       * <pre>
       * A text annotation with a set of attributes.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;</code>
       */
      public Builder setAnnotation(io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation value) {
        copyOnWrite();
        instance.setAnnotation(value);
        return this;
      }
      /**
       * <pre>
       * A text annotation with a set of attributes.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;</code>
       */
      public Builder setAnnotation(
          io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.Builder builderForValue) {
        copyOnWrite();
        instance.setAnnotation(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A text annotation with a set of attributes.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;</code>
       */
      public Builder mergeAnnotation(io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation value) {
        copyOnWrite();
        instance.mergeAnnotation(value);
        return this;
      }
      /**
       * <pre>
       * A text annotation with a set of attributes.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.Annotation annotation = 2;</code>
       */
      public Builder clearAnnotation() {
        copyOnWrite();
        instance.clearAnnotation();
        return this;
      }

      /**
       * <pre>
       * An event describing a message sent/received between Spans.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;</code>
       */
      @java.lang.Override
      public boolean hasMessageEvent() {
        return instance.hasMessageEvent();
      }
      /**
       * <pre>
       * An event describing a message sent/received between Spans.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;</code>
       */
      @java.lang.Override
      public io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent getMessageEvent() {
        return instance.getMessageEvent();
      }
      /**
       * <pre>
       * An event describing a message sent/received between Spans.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;</code>
       */
      public Builder setMessageEvent(io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent value) {
        copyOnWrite();
        instance.setMessageEvent(value);
        return this;
      }
      /**
       * <pre>
       * An event describing a message sent/received between Spans.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;</code>
       */
      public Builder setMessageEvent(
          io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Builder builderForValue) {
        copyOnWrite();
        instance.setMessageEvent(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * An event describing a message sent/received between Spans.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;</code>
       */
      public Builder mergeMessageEvent(io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent value) {
        copyOnWrite();
        instance.mergeMessageEvent(value);
        return this;
      }
      /**
       * <pre>
       * An event describing a message sent/received between Spans.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent message_event = 3;</code>
       */
      public Builder clearMessageEvent() {
        copyOnWrite();
        instance.clearMessageEvent();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:opencensus.proto.trace.v1.Span.TimeEvent)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new io.opencensus.proto.trace.v1.Span.TimeEvent();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "value_",
              "valueCase_",
              "time_",
              io.opencensus.proto.trace.v1.Span.TimeEvent.Annotation.class,
              io.opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.class,
            };
            java.lang.String info =
                "\u0000\u0003\u0001\u0000\u0001\u0003\u0003\u0000\u0000\u0000\u0001\t\u0002<\u0000" +
                "\u0003<\u0000";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<io.opencensus.proto.trace.v1.Span.TimeEvent> parser = PARSER;
          if (parser == null) {
            synchronized (io.opencensus.proto.trace.v1.Span.TimeEvent.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<io.opencensus.proto.trace.v1.Span.TimeEvent>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.TimeEvent)
    private static final io.opencensus.proto.trace.v1.Span.TimeEvent DEFAULT_INSTANCE;
    static {
      TimeEvent defaultInstance = new TimeEvent();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TimeEvent.class, defaultInstance);
    }

    public static io.opencensus.proto.trace.v1.Span.TimeEvent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TimeEvent> PARSER;

    public static com.google.protobuf.Parser<TimeEvent> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TimeEventsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opencensus.proto.trace.v1.Span.TimeEvents)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * A collection of `TimeEvent`s.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
     */
    java.util.List<io.opencensus.proto.trace.v1.Span.TimeEvent> 
        getTimeEventList();
    /**
     * <pre>
     * A collection of `TimeEvent`s.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
     */
    io.opencensus.proto.trace.v1.Span.TimeEvent getTimeEvent(int index);
    /**
     * <pre>
     * A collection of `TimeEvent`s.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
     */
    int getTimeEventCount();

    /**
     * <pre>
     * The number of dropped annotations in all the included time events.
     * If the value is 0, then no annotations were dropped.
     * </pre>
     *
     * <code>int32 dropped_annotations_count = 2;</code>
     * @return The droppedAnnotationsCount.
     */
    int getDroppedAnnotationsCount();

    /**
     * <pre>
     * The number of dropped message events in all the included time events.
     * If the value is 0, then no message events were dropped.
     * </pre>
     *
     * <code>int32 dropped_message_events_count = 3;</code>
     * @return The droppedMessageEventsCount.
     */
    int getDroppedMessageEventsCount();
  }
  /**
   * <pre>
   * A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation
   * on the span, consisting of either user-supplied key-value pairs, or
   * details of a message sent/received between Spans.
   * </pre>
   *
   * Protobuf type {@code opencensus.proto.trace.v1.Span.TimeEvents}
   */
  public  static final class TimeEvents extends
      com.google.protobuf.GeneratedMessageLite<
          TimeEvents, TimeEvents.Builder> implements
      // @@protoc_insertion_point(message_implements:opencensus.proto.trace.v1.Span.TimeEvents)
      TimeEventsOrBuilder {
    private TimeEvents() {
      timeEvent_ = emptyProtobufList();
    }
    public static final int TIME_EVENT_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<io.opencensus.proto.trace.v1.Span.TimeEvent> timeEvent_;
    /**
     * <pre>
     * A collection of `TimeEvent`s.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.opencensus.proto.trace.v1.Span.TimeEvent> getTimeEventList() {
      return timeEvent_;
    }
    /**
     * <pre>
     * A collection of `TimeEvent`s.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
     */
    public java.util.List<? extends io.opencensus.proto.trace.v1.Span.TimeEventOrBuilder> 
        getTimeEventOrBuilderList() {
      return timeEvent_;
    }
    /**
     * <pre>
     * A collection of `TimeEvent`s.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
     */
    @java.lang.Override
    public int getTimeEventCount() {
      return timeEvent_.size();
    }
    /**
     * <pre>
     * A collection of `TimeEvent`s.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.Span.TimeEvent getTimeEvent(int index) {
      return timeEvent_.get(index);
    }
    /**
     * <pre>
     * A collection of `TimeEvent`s.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
     */
    public io.opencensus.proto.trace.v1.Span.TimeEventOrBuilder getTimeEventOrBuilder(
        int index) {
      return timeEvent_.get(index);
    }
    private void ensureTimeEventIsMutable() {
      com.google.protobuf.Internal.ProtobufList<io.opencensus.proto.trace.v1.Span.TimeEvent> tmp = timeEvent_;
      if (!tmp.isModifiable()) {
        timeEvent_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * A collection of `TimeEvent`s.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
     */
    private void setTimeEvent(
        int index, io.opencensus.proto.trace.v1.Span.TimeEvent value) {
      value.getClass();
  ensureTimeEventIsMutable();
      timeEvent_.set(index, value);
    }
    /**
     * <pre>
     * A collection of `TimeEvent`s.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
     */
    private void addTimeEvent(io.opencensus.proto.trace.v1.Span.TimeEvent value) {
      value.getClass();
  ensureTimeEventIsMutable();
      timeEvent_.add(value);
    }
    /**
     * <pre>
     * A collection of `TimeEvent`s.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
     */
    private void addTimeEvent(
        int index, io.opencensus.proto.trace.v1.Span.TimeEvent value) {
      value.getClass();
  ensureTimeEventIsMutable();
      timeEvent_.add(index, value);
    }
    /**
     * <pre>
     * A collection of `TimeEvent`s.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
     */
    private void addAllTimeEvent(
        java.lang.Iterable<? extends io.opencensus.proto.trace.v1.Span.TimeEvent> values) {
      ensureTimeEventIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, timeEvent_);
    }
    /**
     * <pre>
     * A collection of `TimeEvent`s.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
     */
    private void clearTimeEvent() {
      timeEvent_ = emptyProtobufList();
    }
    /**
     * <pre>
     * A collection of `TimeEvent`s.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
     */
    private void removeTimeEvent(int index) {
      ensureTimeEventIsMutable();
      timeEvent_.remove(index);
    }

    public static final int DROPPED_ANNOTATIONS_COUNT_FIELD_NUMBER = 2;
    private int droppedAnnotationsCount_;
    /**
     * <pre>
     * The number of dropped annotations in all the included time events.
     * If the value is 0, then no annotations were dropped.
     * </pre>
     *
     * <code>int32 dropped_annotations_count = 2;</code>
     * @return The droppedAnnotationsCount.
     */
    @java.lang.Override
    public int getDroppedAnnotationsCount() {
      return droppedAnnotationsCount_;
    }
    /**
     * <pre>
     * The number of dropped annotations in all the included time events.
     * If the value is 0, then no annotations were dropped.
     * </pre>
     *
     * <code>int32 dropped_annotations_count = 2;</code>
     * @param value The droppedAnnotationsCount to set.
     */
    private void setDroppedAnnotationsCount(int value) {
      
      droppedAnnotationsCount_ = value;
    }
    /**
     * <pre>
     * The number of dropped annotations in all the included time events.
     * If the value is 0, then no annotations were dropped.
     * </pre>
     *
     * <code>int32 dropped_annotations_count = 2;</code>
     */
    private void clearDroppedAnnotationsCount() {
      
      droppedAnnotationsCount_ = 0;
    }

    public static final int DROPPED_MESSAGE_EVENTS_COUNT_FIELD_NUMBER = 3;
    private int droppedMessageEventsCount_;
    /**
     * <pre>
     * The number of dropped message events in all the included time events.
     * If the value is 0, then no message events were dropped.
     * </pre>
     *
     * <code>int32 dropped_message_events_count = 3;</code>
     * @return The droppedMessageEventsCount.
     */
    @java.lang.Override
    public int getDroppedMessageEventsCount() {
      return droppedMessageEventsCount_;
    }
    /**
     * <pre>
     * The number of dropped message events in all the included time events.
     * If the value is 0, then no message events were dropped.
     * </pre>
     *
     * <code>int32 dropped_message_events_count = 3;</code>
     * @param value The droppedMessageEventsCount to set.
     */
    private void setDroppedMessageEventsCount(int value) {
      
      droppedMessageEventsCount_ = value;
    }
    /**
     * <pre>
     * The number of dropped message events in all the included time events.
     * If the value is 0, then no message events were dropped.
     * </pre>
     *
     * <code>int32 dropped_message_events_count = 3;</code>
     */
    private void clearDroppedMessageEventsCount() {
      
      droppedMessageEventsCount_ = 0;
    }

    public static io.opencensus.proto.trace.v1.Span.TimeEvents parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvents parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvents parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvents parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvents parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvents parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvents parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvents parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvents parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvents parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvents parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.TimeEvents parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(io.opencensus.proto.trace.v1.Span.TimeEvents prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation
     * on the span, consisting of either user-supplied key-value pairs, or
     * details of a message sent/received between Spans.
     * </pre>
     *
     * Protobuf type {@code opencensus.proto.trace.v1.Span.TimeEvents}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          io.opencensus.proto.trace.v1.Span.TimeEvents, Builder> implements
        // @@protoc_insertion_point(builder_implements:opencensus.proto.trace.v1.Span.TimeEvents)
        io.opencensus.proto.trace.v1.Span.TimeEventsOrBuilder {
      // Construct using io.opencensus.proto.trace.v1.Span.TimeEvents.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * A collection of `TimeEvent`s.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
       */
      @java.lang.Override
      public java.util.List<io.opencensus.proto.trace.v1.Span.TimeEvent> getTimeEventList() {
        return java.util.Collections.unmodifiableList(
            instance.getTimeEventList());
      }
      /**
       * <pre>
       * A collection of `TimeEvent`s.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
       */
      @java.lang.Override
      public int getTimeEventCount() {
        return instance.getTimeEventCount();
      }/**
       * <pre>
       * A collection of `TimeEvent`s.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
       */
      @java.lang.Override
      public io.opencensus.proto.trace.v1.Span.TimeEvent getTimeEvent(int index) {
        return instance.getTimeEvent(index);
      }
      /**
       * <pre>
       * A collection of `TimeEvent`s.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
       */
      public Builder setTimeEvent(
          int index, io.opencensus.proto.trace.v1.Span.TimeEvent value) {
        copyOnWrite();
        instance.setTimeEvent(index, value);
        return this;
      }
      /**
       * <pre>
       * A collection of `TimeEvent`s.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
       */
      public Builder setTimeEvent(
          int index, io.opencensus.proto.trace.v1.Span.TimeEvent.Builder builderForValue) {
        copyOnWrite();
        instance.setTimeEvent(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A collection of `TimeEvent`s.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
       */
      public Builder addTimeEvent(io.opencensus.proto.trace.v1.Span.TimeEvent value) {
        copyOnWrite();
        instance.addTimeEvent(value);
        return this;
      }
      /**
       * <pre>
       * A collection of `TimeEvent`s.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
       */
      public Builder addTimeEvent(
          int index, io.opencensus.proto.trace.v1.Span.TimeEvent value) {
        copyOnWrite();
        instance.addTimeEvent(index, value);
        return this;
      }
      /**
       * <pre>
       * A collection of `TimeEvent`s.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
       */
      public Builder addTimeEvent(
          io.opencensus.proto.trace.v1.Span.TimeEvent.Builder builderForValue) {
        copyOnWrite();
        instance.addTimeEvent(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A collection of `TimeEvent`s.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
       */
      public Builder addTimeEvent(
          int index, io.opencensus.proto.trace.v1.Span.TimeEvent.Builder builderForValue) {
        copyOnWrite();
        instance.addTimeEvent(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A collection of `TimeEvent`s.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
       */
      public Builder addAllTimeEvent(
          java.lang.Iterable<? extends io.opencensus.proto.trace.v1.Span.TimeEvent> values) {
        copyOnWrite();
        instance.addAllTimeEvent(values);
        return this;
      }
      /**
       * <pre>
       * A collection of `TimeEvent`s.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
       */
      public Builder clearTimeEvent() {
        copyOnWrite();
        instance.clearTimeEvent();
        return this;
      }
      /**
       * <pre>
       * A collection of `TimeEvent`s.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.TimeEvent time_event = 1;</code>
       */
      public Builder removeTimeEvent(int index) {
        copyOnWrite();
        instance.removeTimeEvent(index);
        return this;
      }

      /**
       * <pre>
       * The number of dropped annotations in all the included time events.
       * If the value is 0, then no annotations were dropped.
       * </pre>
       *
       * <code>int32 dropped_annotations_count = 2;</code>
       * @return The droppedAnnotationsCount.
       */
      @java.lang.Override
      public int getDroppedAnnotationsCount() {
        return instance.getDroppedAnnotationsCount();
      }
      /**
       * <pre>
       * The number of dropped annotations in all the included time events.
       * If the value is 0, then no annotations were dropped.
       * </pre>
       *
       * <code>int32 dropped_annotations_count = 2;</code>
       * @param value The droppedAnnotationsCount to set.
       * @return This builder for chaining.
       */
      public Builder setDroppedAnnotationsCount(int value) {
        copyOnWrite();
        instance.setDroppedAnnotationsCount(value);
        return this;
      }
      /**
       * <pre>
       * The number of dropped annotations in all the included time events.
       * If the value is 0, then no annotations were dropped.
       * </pre>
       *
       * <code>int32 dropped_annotations_count = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDroppedAnnotationsCount() {
        copyOnWrite();
        instance.clearDroppedAnnotationsCount();
        return this;
      }

      /**
       * <pre>
       * The number of dropped message events in all the included time events.
       * If the value is 0, then no message events were dropped.
       * </pre>
       *
       * <code>int32 dropped_message_events_count = 3;</code>
       * @return The droppedMessageEventsCount.
       */
      @java.lang.Override
      public int getDroppedMessageEventsCount() {
        return instance.getDroppedMessageEventsCount();
      }
      /**
       * <pre>
       * The number of dropped message events in all the included time events.
       * If the value is 0, then no message events were dropped.
       * </pre>
       *
       * <code>int32 dropped_message_events_count = 3;</code>
       * @param value The droppedMessageEventsCount to set.
       * @return This builder for chaining.
       */
      public Builder setDroppedMessageEventsCount(int value) {
        copyOnWrite();
        instance.setDroppedMessageEventsCount(value);
        return this;
      }
      /**
       * <pre>
       * The number of dropped message events in all the included time events.
       * If the value is 0, then no message events were dropped.
       * </pre>
       *
       * <code>int32 dropped_message_events_count = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearDroppedMessageEventsCount() {
        copyOnWrite();
        instance.clearDroppedMessageEventsCount();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:opencensus.proto.trace.v1.Span.TimeEvents)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new io.opencensus.proto.trace.v1.Span.TimeEvents();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "timeEvent_",
              io.opencensus.proto.trace.v1.Span.TimeEvent.class,
              "droppedAnnotationsCount_",
              "droppedMessageEventsCount_",
            };
            java.lang.String info =
                "\u0000\u0003\u0000\u0000\u0001\u0003\u0003\u0000\u0001\u0000\u0001\u001b\u0002\u0004" +
                "\u0003\u0004";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<io.opencensus.proto.trace.v1.Span.TimeEvents> parser = PARSER;
          if (parser == null) {
            synchronized (io.opencensus.proto.trace.v1.Span.TimeEvents.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<io.opencensus.proto.trace.v1.Span.TimeEvents>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.TimeEvents)
    private static final io.opencensus.proto.trace.v1.Span.TimeEvents DEFAULT_INSTANCE;
    static {
      TimeEvents defaultInstance = new TimeEvents();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TimeEvents.class, defaultInstance);
    }

    public static io.opencensus.proto.trace.v1.Span.TimeEvents getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TimeEvents> PARSER;

    public static com.google.protobuf.Parser<TimeEvents> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface LinkOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opencensus.proto.trace.v1.Span.Link)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * A unique identifier of a trace that this linked span is part of. The ID is a 
     * 16-byte array.
     * </pre>
     *
     * <code>bytes trace_id = 1;</code>
     * @return The traceId.
     */
    com.google.protobuf.ByteString getTraceId();

    /**
     * <pre>
     * A unique identifier for the linked span. The ID is an 8-byte array.
     * </pre>
     *
     * <code>bytes span_id = 2;</code>
     * @return The spanId.
     */
    com.google.protobuf.ByteString getSpanId();

    /**
     * <pre>
     * The relationship of the current span relative to the linked span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Link.Type type = 3;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * The relationship of the current span relative to the linked span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Link.Type type = 3;</code>
     * @return The type.
     */
    io.opencensus.proto.trace.v1.Span.Link.Type getType();

    /**
     * <pre>
     * A set of attributes on the link.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 4;</code>
     * @return Whether the attributes field is set.
     */
    boolean hasAttributes();
    /**
     * <pre>
     * A set of attributes on the link.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 4;</code>
     * @return The attributes.
     */
    io.opencensus.proto.trace.v1.Span.Attributes getAttributes();

    /**
     * <pre>
     * The Tracestate associated with the link.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;</code>
     * @return Whether the tracestate field is set.
     */
    boolean hasTracestate();
    /**
     * <pre>
     * The Tracestate associated with the link.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;</code>
     * @return The tracestate.
     */
    io.opencensus.proto.trace.v1.Span.Tracestate getTracestate();
  }
  /**
   * <pre>
   * A pointer from the current span to another span in the same trace or in a
   * different trace. For example, this can be used in batching operations,
   * where a single batch handler processes multiple requests from different
   * traces or when the handler receives a request from a different project.
   * </pre>
   *
   * Protobuf type {@code opencensus.proto.trace.v1.Span.Link}
   */
  public  static final class Link extends
      com.google.protobuf.GeneratedMessageLite<
          Link, Link.Builder> implements
      // @@protoc_insertion_point(message_implements:opencensus.proto.trace.v1.Span.Link)
      LinkOrBuilder {
    private Link() {
      traceId_ = com.google.protobuf.ByteString.EMPTY;
      spanId_ = com.google.protobuf.ByteString.EMPTY;
    }
    /**
     * <pre>
     * The relationship of the current span relative to the linked span: child,
     * parent, or unspecified.
     * </pre>
     *
     * Protobuf enum {@code opencensus.proto.trace.v1.Span.Link.Type}
     */
    public enum Type
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <pre>
       * The relationship of the two spans is unknown, or known but other
       * than parent-child.
       * </pre>
       *
       * <code>TYPE_UNSPECIFIED = 0;</code>
       */
      TYPE_UNSPECIFIED(0),
      /**
       * <pre>
       * The linked span is a child of the current span.
       * </pre>
       *
       * <code>CHILD_LINKED_SPAN = 1;</code>
       */
      CHILD_LINKED_SPAN(1),
      /**
       * <pre>
       * The linked span is a parent of the current span.
       * </pre>
       *
       * <code>PARENT_LINKED_SPAN = 2;</code>
       */
      PARENT_LINKED_SPAN(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * The relationship of the two spans is unknown, or known but other
       * than parent-child.
       * </pre>
       *
       * <code>TYPE_UNSPECIFIED = 0;</code>
       */
      public static final int TYPE_UNSPECIFIED_VALUE = 0;
      /**
       * <pre>
       * The linked span is a child of the current span.
       * </pre>
       *
       * <code>CHILD_LINKED_SPAN = 1;</code>
       */
      public static final int CHILD_LINKED_SPAN_VALUE = 1;
      /**
       * <pre>
       * The linked span is a parent of the current span.
       * </pre>
       *
       * <code>PARENT_LINKED_SPAN = 2;</code>
       */
      public static final int PARENT_LINKED_SPAN_VALUE = 2;


      @java.lang.Override
      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      public static Type forNumber(int value) {
        switch (value) {
          case 0: return TYPE_UNSPECIFIED;
          case 1: return CHILD_LINKED_SPAN;
          case 2: return PARENT_LINKED_SPAN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              @java.lang.Override
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public static com.google.protobuf.Internal.EnumVerifier 
          internalGetVerifier() {
        return TypeVerifier.INSTANCE;
      }

      private static final class TypeVerifier implements 
           com.google.protobuf.Internal.EnumVerifier { 
              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new TypeVerifier();
              @java.lang.Override
              public boolean isInRange(int number) {
                return Type.forNumber(number) != null;
              }
            };

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:opencensus.proto.trace.v1.Span.Link.Type)
    }

    public static final int TRACE_ID_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString traceId_;
    /**
     * <pre>
     * A unique identifier of a trace that this linked span is part of. The ID is a 
     * 16-byte array.
     * </pre>
     *
     * <code>bytes trace_id = 1;</code>
     * @return The traceId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getTraceId() {
      return traceId_;
    }
    /**
     * <pre>
     * A unique identifier of a trace that this linked span is part of. The ID is a 
     * 16-byte array.
     * </pre>
     *
     * <code>bytes trace_id = 1;</code>
     * @param value The traceId to set.
     */
    private void setTraceId(com.google.protobuf.ByteString value) {
      value.getClass();
  
      traceId_ = value;
    }
    /**
     * <pre>
     * A unique identifier of a trace that this linked span is part of. The ID is a 
     * 16-byte array.
     * </pre>
     *
     * <code>bytes trace_id = 1;</code>
     */
    private void clearTraceId() {
      
      traceId_ = getDefaultInstance().getTraceId();
    }

    public static final int SPAN_ID_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString spanId_;
    /**
     * <pre>
     * A unique identifier for the linked span. The ID is an 8-byte array.
     * </pre>
     *
     * <code>bytes span_id = 2;</code>
     * @return The spanId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSpanId() {
      return spanId_;
    }
    /**
     * <pre>
     * A unique identifier for the linked span. The ID is an 8-byte array.
     * </pre>
     *
     * <code>bytes span_id = 2;</code>
     * @param value The spanId to set.
     */
    private void setSpanId(com.google.protobuf.ByteString value) {
      value.getClass();
  
      spanId_ = value;
    }
    /**
     * <pre>
     * A unique identifier for the linked span. The ID is an 8-byte array.
     * </pre>
     *
     * <code>bytes span_id = 2;</code>
     */
    private void clearSpanId() {
      
      spanId_ = getDefaultInstance().getSpanId();
    }

    public static final int TYPE_FIELD_NUMBER = 3;
    private int type_;
    /**
     * <pre>
     * The relationship of the current span relative to the linked span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Link.Type type = 3;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override
    public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * The relationship of the current span relative to the linked span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Link.Type type = 3;</code>
     * @return The type.
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.Span.Link.Type getType() {
      io.opencensus.proto.trace.v1.Span.Link.Type result = io.opencensus.proto.trace.v1.Span.Link.Type.forNumber(type_);
      return result == null ? io.opencensus.proto.trace.v1.Span.Link.Type.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The relationship of the current span relative to the linked span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Link.Type type = 3;</code>
     * @param value The enum numeric value on the wire for type to set.
     */
    private void setTypeValue(int value) {
        type_ = value;
    }
    /**
     * <pre>
     * The relationship of the current span relative to the linked span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Link.Type type = 3;</code>
     * @param value The type to set.
     */
    private void setType(io.opencensus.proto.trace.v1.Span.Link.Type value) {
      type_ = value.getNumber();
      
    }
    /**
     * <pre>
     * The relationship of the current span relative to the linked span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Link.Type type = 3;</code>
     */
    private void clearType() {
      
      type_ = 0;
    }

    public static final int ATTRIBUTES_FIELD_NUMBER = 4;
    private io.opencensus.proto.trace.v1.Span.Attributes attributes_;
    /**
     * <pre>
     * A set of attributes on the link.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 4;</code>
     */
    @java.lang.Override
    public boolean hasAttributes() {
      return attributes_ != null;
    }
    /**
     * <pre>
     * A set of attributes on the link.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 4;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.Span.Attributes getAttributes() {
      return attributes_ == null ? io.opencensus.proto.trace.v1.Span.Attributes.getDefaultInstance() : attributes_;
    }
    /**
     * <pre>
     * A set of attributes on the link.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 4;</code>
     */
    private void setAttributes(io.opencensus.proto.trace.v1.Span.Attributes value) {
      value.getClass();
  attributes_ = value;
      
      }
    /**
     * <pre>
     * A set of attributes on the link.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 4;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeAttributes(io.opencensus.proto.trace.v1.Span.Attributes value) {
      value.getClass();
  if (attributes_ != null &&
          attributes_ != io.opencensus.proto.trace.v1.Span.Attributes.getDefaultInstance()) {
        attributes_ =
          io.opencensus.proto.trace.v1.Span.Attributes.newBuilder(attributes_).mergeFrom(value).buildPartial();
      } else {
        attributes_ = value;
      }
      
    }
    /**
     * <pre>
     * A set of attributes on the link.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 4;</code>
     */
    private void clearAttributes() {  attributes_ = null;
      
    }

    public static final int TRACESTATE_FIELD_NUMBER = 5;
    private io.opencensus.proto.trace.v1.Span.Tracestate tracestate_;
    /**
     * <pre>
     * The Tracestate associated with the link.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;</code>
     */
    @java.lang.Override
    public boolean hasTracestate() {
      return tracestate_ != null;
    }
    /**
     * <pre>
     * The Tracestate associated with the link.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.Span.Tracestate getTracestate() {
      return tracestate_ == null ? io.opencensus.proto.trace.v1.Span.Tracestate.getDefaultInstance() : tracestate_;
    }
    /**
     * <pre>
     * The Tracestate associated with the link.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;</code>
     */
    private void setTracestate(io.opencensus.proto.trace.v1.Span.Tracestate value) {
      value.getClass();
  tracestate_ = value;
      
      }
    /**
     * <pre>
     * The Tracestate associated with the link.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeTracestate(io.opencensus.proto.trace.v1.Span.Tracestate value) {
      value.getClass();
  if (tracestate_ != null &&
          tracestate_ != io.opencensus.proto.trace.v1.Span.Tracestate.getDefaultInstance()) {
        tracestate_ =
          io.opencensus.proto.trace.v1.Span.Tracestate.newBuilder(tracestate_).mergeFrom(value).buildPartial();
      } else {
        tracestate_ = value;
      }
      
    }
    /**
     * <pre>
     * The Tracestate associated with the link.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;</code>
     */
    private void clearTracestate() {  tracestate_ = null;
      
    }

    public static io.opencensus.proto.trace.v1.Span.Link parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.Link parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Link parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.Link parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Link parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.Link parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Link parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.Link parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Link parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.Link parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Link parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.Link parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(io.opencensus.proto.trace.v1.Span.Link prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A pointer from the current span to another span in the same trace or in a
     * different trace. For example, this can be used in batching operations,
     * where a single batch handler processes multiple requests from different
     * traces or when the handler receives a request from a different project.
     * </pre>
     *
     * Protobuf type {@code opencensus.proto.trace.v1.Span.Link}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          io.opencensus.proto.trace.v1.Span.Link, Builder> implements
        // @@protoc_insertion_point(builder_implements:opencensus.proto.trace.v1.Span.Link)
        io.opencensus.proto.trace.v1.Span.LinkOrBuilder {
      // Construct using io.opencensus.proto.trace.v1.Span.Link.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * A unique identifier of a trace that this linked span is part of. The ID is a 
       * 16-byte array.
       * </pre>
       *
       * <code>bytes trace_id = 1;</code>
       * @return The traceId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getTraceId() {
        return instance.getTraceId();
      }
      /**
       * <pre>
       * A unique identifier of a trace that this linked span is part of. The ID is a 
       * 16-byte array.
       * </pre>
       *
       * <code>bytes trace_id = 1;</code>
       * @param value The traceId to set.
       * @return This builder for chaining.
       */
      public Builder setTraceId(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTraceId(value);
        return this;
      }
      /**
       * <pre>
       * A unique identifier of a trace that this linked span is part of. The ID is a 
       * 16-byte array.
       * </pre>
       *
       * <code>bytes trace_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTraceId() {
        copyOnWrite();
        instance.clearTraceId();
        return this;
      }

      /**
       * <pre>
       * A unique identifier for the linked span. The ID is an 8-byte array.
       * </pre>
       *
       * <code>bytes span_id = 2;</code>
       * @return The spanId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSpanId() {
        return instance.getSpanId();
      }
      /**
       * <pre>
       * A unique identifier for the linked span. The ID is an 8-byte array.
       * </pre>
       *
       * <code>bytes span_id = 2;</code>
       * @param value The spanId to set.
       * @return This builder for chaining.
       */
      public Builder setSpanId(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSpanId(value);
        return this;
      }
      /**
       * <pre>
       * A unique identifier for the linked span. The ID is an 8-byte array.
       * </pre>
       *
       * <code>bytes span_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSpanId() {
        copyOnWrite();
        instance.clearSpanId();
        return this;
      }

      /**
       * <pre>
       * The relationship of the current span relative to the linked span.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Link.Type type = 3;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override
      public int getTypeValue() {
        return instance.getTypeValue();
      }
      /**
       * <pre>
       * The relationship of the current span relative to the linked span.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Link.Type type = 3;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        copyOnWrite();
        instance.setTypeValue(value);
        return this;
      }
      /**
       * <pre>
       * The relationship of the current span relative to the linked span.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Link.Type type = 3;</code>
       * @return The type.
       */
      @java.lang.Override
      public io.opencensus.proto.trace.v1.Span.Link.Type getType() {
        return instance.getType();
      }
      /**
       * <pre>
       * The relationship of the current span relative to the linked span.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Link.Type type = 3;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setType(io.opencensus.proto.trace.v1.Span.Link.Type value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <pre>
       * The relationship of the current span relative to the linked span.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Link.Type type = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <pre>
       * A set of attributes on the link.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 4;</code>
       */
      @java.lang.Override
      public boolean hasAttributes() {
        return instance.hasAttributes();
      }
      /**
       * <pre>
       * A set of attributes on the link.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 4;</code>
       */
      @java.lang.Override
      public io.opencensus.proto.trace.v1.Span.Attributes getAttributes() {
        return instance.getAttributes();
      }
      /**
       * <pre>
       * A set of attributes on the link.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 4;</code>
       */
      public Builder setAttributes(io.opencensus.proto.trace.v1.Span.Attributes value) {
        copyOnWrite();
        instance.setAttributes(value);
        return this;
        }
      /**
       * <pre>
       * A set of attributes on the link.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 4;</code>
       */
      public Builder setAttributes(
          io.opencensus.proto.trace.v1.Span.Attributes.Builder builderForValue) {
        copyOnWrite();
        instance.setAttributes(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A set of attributes on the link.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 4;</code>
       */
      public Builder mergeAttributes(io.opencensus.proto.trace.v1.Span.Attributes value) {
        copyOnWrite();
        instance.mergeAttributes(value);
        return this;
      }
      /**
       * <pre>
       * A set of attributes on the link.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 4;</code>
       */
      public Builder clearAttributes() {  copyOnWrite();
        instance.clearAttributes();
        return this;
      }

      /**
       * <pre>
       * The Tracestate associated with the link.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;</code>
       */
      @java.lang.Override
      public boolean hasTracestate() {
        return instance.hasTracestate();
      }
      /**
       * <pre>
       * The Tracestate associated with the link.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;</code>
       */
      @java.lang.Override
      public io.opencensus.proto.trace.v1.Span.Tracestate getTracestate() {
        return instance.getTracestate();
      }
      /**
       * <pre>
       * The Tracestate associated with the link.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;</code>
       */
      public Builder setTracestate(io.opencensus.proto.trace.v1.Span.Tracestate value) {
        copyOnWrite();
        instance.setTracestate(value);
        return this;
        }
      /**
       * <pre>
       * The Tracestate associated with the link.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;</code>
       */
      public Builder setTracestate(
          io.opencensus.proto.trace.v1.Span.Tracestate.Builder builderForValue) {
        copyOnWrite();
        instance.setTracestate(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The Tracestate associated with the link.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;</code>
       */
      public Builder mergeTracestate(io.opencensus.proto.trace.v1.Span.Tracestate value) {
        copyOnWrite();
        instance.mergeTracestate(value);
        return this;
      }
      /**
       * <pre>
       * The Tracestate associated with the link.
       * </pre>
       *
       * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 5;</code>
       */
      public Builder clearTracestate() {  copyOnWrite();
        instance.clearTracestate();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:opencensus.proto.trace.v1.Span.Link)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new io.opencensus.proto.trace.v1.Span.Link();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "traceId_",
              "spanId_",
              "type_",
              "attributes_",
              "tracestate_",
            };
            java.lang.String info =
                "\u0000\u0005\u0000\u0000\u0001\u0005\u0005\u0000\u0000\u0000\u0001\n\u0002\n\u0003" +
                "\f\u0004\t\u0005\t";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<io.opencensus.proto.trace.v1.Span.Link> parser = PARSER;
          if (parser == null) {
            synchronized (io.opencensus.proto.trace.v1.Span.Link.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<io.opencensus.proto.trace.v1.Span.Link>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.Link)
    private static final io.opencensus.proto.trace.v1.Span.Link DEFAULT_INSTANCE;
    static {
      Link defaultInstance = new Link();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Link.class, defaultInstance);
    }

    public static io.opencensus.proto.trace.v1.Span.Link getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Link> PARSER;

    public static com.google.protobuf.Parser<Link> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface LinksOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opencensus.proto.trace.v1.Span.Links)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * A collection of links.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
     */
    java.util.List<io.opencensus.proto.trace.v1.Span.Link> 
        getLinkList();
    /**
     * <pre>
     * A collection of links.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
     */
    io.opencensus.proto.trace.v1.Span.Link getLink(int index);
    /**
     * <pre>
     * A collection of links.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
     */
    int getLinkCount();

    /**
     * <pre>
     * The number of dropped links after the maximum size was enforced. If
     * this value is 0, then no links were dropped.
     * </pre>
     *
     * <code>int32 dropped_links_count = 2;</code>
     * @return The droppedLinksCount.
     */
    int getDroppedLinksCount();
  }
  /**
   * <pre>
   * A collection of links, which are references from this span to a span
   * in the same or different trace.
   * </pre>
   *
   * Protobuf type {@code opencensus.proto.trace.v1.Span.Links}
   */
  public  static final class Links extends
      com.google.protobuf.GeneratedMessageLite<
          Links, Links.Builder> implements
      // @@protoc_insertion_point(message_implements:opencensus.proto.trace.v1.Span.Links)
      LinksOrBuilder {
    private Links() {
      link_ = emptyProtobufList();
    }
    public static final int LINK_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<io.opencensus.proto.trace.v1.Span.Link> link_;
    /**
     * <pre>
     * A collection of links.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
     */
    @java.lang.Override
    public java.util.List<io.opencensus.proto.trace.v1.Span.Link> getLinkList() {
      return link_;
    }
    /**
     * <pre>
     * A collection of links.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
     */
    public java.util.List<? extends io.opencensus.proto.trace.v1.Span.LinkOrBuilder> 
        getLinkOrBuilderList() {
      return link_;
    }
    /**
     * <pre>
     * A collection of links.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
     */
    @java.lang.Override
    public int getLinkCount() {
      return link_.size();
    }
    /**
     * <pre>
     * A collection of links.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.Span.Link getLink(int index) {
      return link_.get(index);
    }
    /**
     * <pre>
     * A collection of links.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
     */
    public io.opencensus.proto.trace.v1.Span.LinkOrBuilder getLinkOrBuilder(
        int index) {
      return link_.get(index);
    }
    private void ensureLinkIsMutable() {
      com.google.protobuf.Internal.ProtobufList<io.opencensus.proto.trace.v1.Span.Link> tmp = link_;
      if (!tmp.isModifiable()) {
        link_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * A collection of links.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
     */
    private void setLink(
        int index, io.opencensus.proto.trace.v1.Span.Link value) {
      value.getClass();
  ensureLinkIsMutable();
      link_.set(index, value);
    }
    /**
     * <pre>
     * A collection of links.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
     */
    private void addLink(io.opencensus.proto.trace.v1.Span.Link value) {
      value.getClass();
  ensureLinkIsMutable();
      link_.add(value);
    }
    /**
     * <pre>
     * A collection of links.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
     */
    private void addLink(
        int index, io.opencensus.proto.trace.v1.Span.Link value) {
      value.getClass();
  ensureLinkIsMutable();
      link_.add(index, value);
    }
    /**
     * <pre>
     * A collection of links.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
     */
    private void addAllLink(
        java.lang.Iterable<? extends io.opencensus.proto.trace.v1.Span.Link> values) {
      ensureLinkIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, link_);
    }
    /**
     * <pre>
     * A collection of links.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
     */
    private void clearLink() {
      link_ = emptyProtobufList();
    }
    /**
     * <pre>
     * A collection of links.
     * </pre>
     *
     * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
     */
    private void removeLink(int index) {
      ensureLinkIsMutable();
      link_.remove(index);
    }

    public static final int DROPPED_LINKS_COUNT_FIELD_NUMBER = 2;
    private int droppedLinksCount_;
    /**
     * <pre>
     * The number of dropped links after the maximum size was enforced. If
     * this value is 0, then no links were dropped.
     * </pre>
     *
     * <code>int32 dropped_links_count = 2;</code>
     * @return The droppedLinksCount.
     */
    @java.lang.Override
    public int getDroppedLinksCount() {
      return droppedLinksCount_;
    }
    /**
     * <pre>
     * The number of dropped links after the maximum size was enforced. If
     * this value is 0, then no links were dropped.
     * </pre>
     *
     * <code>int32 dropped_links_count = 2;</code>
     * @param value The droppedLinksCount to set.
     */
    private void setDroppedLinksCount(int value) {
      
      droppedLinksCount_ = value;
    }
    /**
     * <pre>
     * The number of dropped links after the maximum size was enforced. If
     * this value is 0, then no links were dropped.
     * </pre>
     *
     * <code>int32 dropped_links_count = 2;</code>
     */
    private void clearDroppedLinksCount() {
      
      droppedLinksCount_ = 0;
    }

    public static io.opencensus.proto.trace.v1.Span.Links parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.Links parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Links parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.Links parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Links parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static io.opencensus.proto.trace.v1.Span.Links parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Links parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.Links parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Links parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.Links parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static io.opencensus.proto.trace.v1.Span.Links parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static io.opencensus.proto.trace.v1.Span.Links parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(io.opencensus.proto.trace.v1.Span.Links prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A collection of links, which are references from this span to a span
     * in the same or different trace.
     * </pre>
     *
     * Protobuf type {@code opencensus.proto.trace.v1.Span.Links}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          io.opencensus.proto.trace.v1.Span.Links, Builder> implements
        // @@protoc_insertion_point(builder_implements:opencensus.proto.trace.v1.Span.Links)
        io.opencensus.proto.trace.v1.Span.LinksOrBuilder {
      // Construct using io.opencensus.proto.trace.v1.Span.Links.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * A collection of links.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
       */
      @java.lang.Override
      public java.util.List<io.opencensus.proto.trace.v1.Span.Link> getLinkList() {
        return java.util.Collections.unmodifiableList(
            instance.getLinkList());
      }
      /**
       * <pre>
       * A collection of links.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
       */
      @java.lang.Override
      public int getLinkCount() {
        return instance.getLinkCount();
      }/**
       * <pre>
       * A collection of links.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
       */
      @java.lang.Override
      public io.opencensus.proto.trace.v1.Span.Link getLink(int index) {
        return instance.getLink(index);
      }
      /**
       * <pre>
       * A collection of links.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
       */
      public Builder setLink(
          int index, io.opencensus.proto.trace.v1.Span.Link value) {
        copyOnWrite();
        instance.setLink(index, value);
        return this;
      }
      /**
       * <pre>
       * A collection of links.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
       */
      public Builder setLink(
          int index, io.opencensus.proto.trace.v1.Span.Link.Builder builderForValue) {
        copyOnWrite();
        instance.setLink(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A collection of links.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
       */
      public Builder addLink(io.opencensus.proto.trace.v1.Span.Link value) {
        copyOnWrite();
        instance.addLink(value);
        return this;
      }
      /**
       * <pre>
       * A collection of links.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
       */
      public Builder addLink(
          int index, io.opencensus.proto.trace.v1.Span.Link value) {
        copyOnWrite();
        instance.addLink(index, value);
        return this;
      }
      /**
       * <pre>
       * A collection of links.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
       */
      public Builder addLink(
          io.opencensus.proto.trace.v1.Span.Link.Builder builderForValue) {
        copyOnWrite();
        instance.addLink(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A collection of links.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
       */
      public Builder addLink(
          int index, io.opencensus.proto.trace.v1.Span.Link.Builder builderForValue) {
        copyOnWrite();
        instance.addLink(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A collection of links.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
       */
      public Builder addAllLink(
          java.lang.Iterable<? extends io.opencensus.proto.trace.v1.Span.Link> values) {
        copyOnWrite();
        instance.addAllLink(values);
        return this;
      }
      /**
       * <pre>
       * A collection of links.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
       */
      public Builder clearLink() {
        copyOnWrite();
        instance.clearLink();
        return this;
      }
      /**
       * <pre>
       * A collection of links.
       * </pre>
       *
       * <code>repeated .opencensus.proto.trace.v1.Span.Link link = 1;</code>
       */
      public Builder removeLink(int index) {
        copyOnWrite();
        instance.removeLink(index);
        return this;
      }

      /**
       * <pre>
       * The number of dropped links after the maximum size was enforced. If
       * this value is 0, then no links were dropped.
       * </pre>
       *
       * <code>int32 dropped_links_count = 2;</code>
       * @return The droppedLinksCount.
       */
      @java.lang.Override
      public int getDroppedLinksCount() {
        return instance.getDroppedLinksCount();
      }
      /**
       * <pre>
       * The number of dropped links after the maximum size was enforced. If
       * this value is 0, then no links were dropped.
       * </pre>
       *
       * <code>int32 dropped_links_count = 2;</code>
       * @param value The droppedLinksCount to set.
       * @return This builder for chaining.
       */
      public Builder setDroppedLinksCount(int value) {
        copyOnWrite();
        instance.setDroppedLinksCount(value);
        return this;
      }
      /**
       * <pre>
       * The number of dropped links after the maximum size was enforced. If
       * this value is 0, then no links were dropped.
       * </pre>
       *
       * <code>int32 dropped_links_count = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDroppedLinksCount() {
        copyOnWrite();
        instance.clearDroppedLinksCount();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:opencensus.proto.trace.v1.Span.Links)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new io.opencensus.proto.trace.v1.Span.Links();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "link_",
              io.opencensus.proto.trace.v1.Span.Link.class,
              "droppedLinksCount_",
            };
            java.lang.String info =
                "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0001\u0000\u0001\u001b\u0002\u0004" +
                "";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<io.opencensus.proto.trace.v1.Span.Links> parser = PARSER;
          if (parser == null) {
            synchronized (io.opencensus.proto.trace.v1.Span.Links.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<io.opencensus.proto.trace.v1.Span.Links>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span.Links)
    private static final io.opencensus.proto.trace.v1.Span.Links DEFAULT_INSTANCE;
    static {
      Links defaultInstance = new Links();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Links.class, defaultInstance);
    }

    public static io.opencensus.proto.trace.v1.Span.Links getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Links> PARSER;

    public static com.google.protobuf.Parser<Links> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public static final int TRACE_ID_FIELD_NUMBER = 1;
  private com.google.protobuf.ByteString traceId_;
  /**
   * <pre>
   * A unique identifier for a trace. All spans from the same trace share
   * the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
   * is considered invalid.
   * This field is semantically required. Receiver should generate new
   * random trace_id if empty or invalid trace_id was received.
   * This field is required.
   * </pre>
   *
   * <code>bytes trace_id = 1;</code>
   * @return The traceId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getTraceId() {
    return traceId_;
  }
  /**
   * <pre>
   * A unique identifier for a trace. All spans from the same trace share
   * the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
   * is considered invalid.
   * This field is semantically required. Receiver should generate new
   * random trace_id if empty or invalid trace_id was received.
   * This field is required.
   * </pre>
   *
   * <code>bytes trace_id = 1;</code>
   * @param value The traceId to set.
   */
  private void setTraceId(com.google.protobuf.ByteString value) {
    value.getClass();
  
    traceId_ = value;
  }
  /**
   * <pre>
   * A unique identifier for a trace. All spans from the same trace share
   * the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
   * is considered invalid.
   * This field is semantically required. Receiver should generate new
   * random trace_id if empty or invalid trace_id was received.
   * This field is required.
   * </pre>
   *
   * <code>bytes trace_id = 1;</code>
   */
  private void clearTraceId() {
    
    traceId_ = getDefaultInstance().getTraceId();
  }

  public static final int SPAN_ID_FIELD_NUMBER = 2;
  private com.google.protobuf.ByteString spanId_;
  /**
   * <pre>
   * A unique identifier for a span within a trace, assigned when the span
   * is created. The ID is an 8-byte array. An ID with all zeroes is considered
   * invalid.
   * This field is semantically required. Receiver should generate new
   * random span_id if empty or invalid span_id was received.
   * This field is required.
   * </pre>
   *
   * <code>bytes span_id = 2;</code>
   * @return The spanId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getSpanId() {
    return spanId_;
  }
  /**
   * <pre>
   * A unique identifier for a span within a trace, assigned when the span
   * is created. The ID is an 8-byte array. An ID with all zeroes is considered
   * invalid.
   * This field is semantically required. Receiver should generate new
   * random span_id if empty or invalid span_id was received.
   * This field is required.
   * </pre>
   *
   * <code>bytes span_id = 2;</code>
   * @param value The spanId to set.
   */
  private void setSpanId(com.google.protobuf.ByteString value) {
    value.getClass();
  
    spanId_ = value;
  }
  /**
   * <pre>
   * A unique identifier for a span within a trace, assigned when the span
   * is created. The ID is an 8-byte array. An ID with all zeroes is considered
   * invalid.
   * This field is semantically required. Receiver should generate new
   * random span_id if empty or invalid span_id was received.
   * This field is required.
   * </pre>
   *
   * <code>bytes span_id = 2;</code>
   */
  private void clearSpanId() {
    
    spanId_ = getDefaultInstance().getSpanId();
  }

  public static final int TRACESTATE_FIELD_NUMBER = 15;
  private io.opencensus.proto.trace.v1.Span.Tracestate tracestate_;
  /**
   * <pre>
   * The Tracestate on the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;</code>
   */
  @java.lang.Override
  public boolean hasTracestate() {
    return tracestate_ != null;
  }
  /**
   * <pre>
   * The Tracestate on the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.trace.v1.Span.Tracestate getTracestate() {
    return tracestate_ == null ? io.opencensus.proto.trace.v1.Span.Tracestate.getDefaultInstance() : tracestate_;
  }
  /**
   * <pre>
   * The Tracestate on the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;</code>
   */
  private void setTracestate(io.opencensus.proto.trace.v1.Span.Tracestate value) {
    value.getClass();
  tracestate_ = value;
    
    }
  /**
   * <pre>
   * The Tracestate on the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeTracestate(io.opencensus.proto.trace.v1.Span.Tracestate value) {
    value.getClass();
  if (tracestate_ != null &&
        tracestate_ != io.opencensus.proto.trace.v1.Span.Tracestate.getDefaultInstance()) {
      tracestate_ =
        io.opencensus.proto.trace.v1.Span.Tracestate.newBuilder(tracestate_).mergeFrom(value).buildPartial();
    } else {
      tracestate_ = value;
    }
    
  }
  /**
   * <pre>
   * The Tracestate on the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;</code>
   */
  private void clearTracestate() {  tracestate_ = null;
    
  }

  public static final int PARENT_SPAN_ID_FIELD_NUMBER = 3;
  private com.google.protobuf.ByteString parentSpanId_;
  /**
   * <pre>
   * The `span_id` of this span's parent span. If this is a root span, then this
   * field must be empty. The ID is an 8-byte array.
   * </pre>
   *
   * <code>bytes parent_span_id = 3;</code>
   * @return The parentSpanId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getParentSpanId() {
    return parentSpanId_;
  }
  /**
   * <pre>
   * The `span_id` of this span's parent span. If this is a root span, then this
   * field must be empty. The ID is an 8-byte array.
   * </pre>
   *
   * <code>bytes parent_span_id = 3;</code>
   * @param value The parentSpanId to set.
   */
  private void setParentSpanId(com.google.protobuf.ByteString value) {
    value.getClass();
  
    parentSpanId_ = value;
  }
  /**
   * <pre>
   * The `span_id` of this span's parent span. If this is a root span, then this
   * field must be empty. The ID is an 8-byte array.
   * </pre>
   *
   * <code>bytes parent_span_id = 3;</code>
   */
  private void clearParentSpanId() {
    
    parentSpanId_ = getDefaultInstance().getParentSpanId();
  }

  public static final int NAME_FIELD_NUMBER = 4;
  private io.opencensus.proto.trace.v1.TruncatableString name_;
  /**
   * <pre>
   * A description of the span's operation.
   * For example, the name can be a qualified method name or a file name
   * and a line number where the operation is called. A best practice is to use
   * the same display name at the same call point in an application.
   * This makes it easier to correlate spans in different traces.
   * This field is semantically required to be set to non-empty string.
   * When null or empty string received - receiver may use string "name"
   * as a replacement. There might be smarted algorithms implemented by
   * receiver to fix the empty span name.
   * This field is required.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.TruncatableString name = 4;</code>
   */
  @java.lang.Override
  public boolean hasName() {
    return name_ != null;
  }
  /**
   * <pre>
   * A description of the span's operation.
   * For example, the name can be a qualified method name or a file name
   * and a line number where the operation is called. A best practice is to use
   * the same display name at the same call point in an application.
   * This makes it easier to correlate spans in different traces.
   * This field is semantically required to be set to non-empty string.
   * When null or empty string received - receiver may use string "name"
   * as a replacement. There might be smarted algorithms implemented by
   * receiver to fix the empty span name.
   * This field is required.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.TruncatableString name = 4;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.trace.v1.TruncatableString getName() {
    return name_ == null ? io.opencensus.proto.trace.v1.TruncatableString.getDefaultInstance() : name_;
  }
  /**
   * <pre>
   * A description of the span's operation.
   * For example, the name can be a qualified method name or a file name
   * and a line number where the operation is called. A best practice is to use
   * the same display name at the same call point in an application.
   * This makes it easier to correlate spans in different traces.
   * This field is semantically required to be set to non-empty string.
   * When null or empty string received - receiver may use string "name"
   * as a replacement. There might be smarted algorithms implemented by
   * receiver to fix the empty span name.
   * This field is required.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.TruncatableString name = 4;</code>
   */
  private void setName(io.opencensus.proto.trace.v1.TruncatableString value) {
    value.getClass();
  name_ = value;
    
    }
  /**
   * <pre>
   * A description of the span's operation.
   * For example, the name can be a qualified method name or a file name
   * and a line number where the operation is called. A best practice is to use
   * the same display name at the same call point in an application.
   * This makes it easier to correlate spans in different traces.
   * This field is semantically required to be set to non-empty string.
   * When null or empty string received - receiver may use string "name"
   * as a replacement. There might be smarted algorithms implemented by
   * receiver to fix the empty span name.
   * This field is required.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.TruncatableString name = 4;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeName(io.opencensus.proto.trace.v1.TruncatableString value) {
    value.getClass();
  if (name_ != null &&
        name_ != io.opencensus.proto.trace.v1.TruncatableString.getDefaultInstance()) {
      name_ =
        io.opencensus.proto.trace.v1.TruncatableString.newBuilder(name_).mergeFrom(value).buildPartial();
    } else {
      name_ = value;
    }
    
  }
  /**
   * <pre>
   * A description of the span's operation.
   * For example, the name can be a qualified method name or a file name
   * and a line number where the operation is called. A best practice is to use
   * the same display name at the same call point in an application.
   * This makes it easier to correlate spans in different traces.
   * This field is semantically required to be set to non-empty string.
   * When null or empty string received - receiver may use string "name"
   * as a replacement. There might be smarted algorithms implemented by
   * receiver to fix the empty span name.
   * This field is required.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.TruncatableString name = 4;</code>
   */
  private void clearName() {  name_ = null;
    
  }

  public static final int KIND_FIELD_NUMBER = 14;
  private int kind_;
  /**
   * <pre>
   * Distinguishes between spans generated in a particular context. For example,
   * two spans with the same name may be distinguished using `CLIENT` (caller)
   * and `SERVER` (callee) to identify queueing latency associated with the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.SpanKind kind = 14;</code>
   * @return The enum numeric value on the wire for kind.
   */
  @java.lang.Override
  public int getKindValue() {
    return kind_;
  }
  /**
   * <pre>
   * Distinguishes between spans generated in a particular context. For example,
   * two spans with the same name may be distinguished using `CLIENT` (caller)
   * and `SERVER` (callee) to identify queueing latency associated with the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.SpanKind kind = 14;</code>
   * @return The kind.
   */
  @java.lang.Override
  public io.opencensus.proto.trace.v1.Span.SpanKind getKind() {
    io.opencensus.proto.trace.v1.Span.SpanKind result = io.opencensus.proto.trace.v1.Span.SpanKind.forNumber(kind_);
    return result == null ? io.opencensus.proto.trace.v1.Span.SpanKind.UNRECOGNIZED : result;
  }
  /**
   * <pre>
   * Distinguishes between spans generated in a particular context. For example,
   * two spans with the same name may be distinguished using `CLIENT` (caller)
   * and `SERVER` (callee) to identify queueing latency associated with the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.SpanKind kind = 14;</code>
   * @param value The enum numeric value on the wire for kind to set.
   */
  private void setKindValue(int value) {
      kind_ = value;
  }
  /**
   * <pre>
   * Distinguishes between spans generated in a particular context. For example,
   * two spans with the same name may be distinguished using `CLIENT` (caller)
   * and `SERVER` (callee) to identify queueing latency associated with the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.SpanKind kind = 14;</code>
   * @param value The kind to set.
   */
  private void setKind(io.opencensus.proto.trace.v1.Span.SpanKind value) {
    kind_ = value.getNumber();
    
  }
  /**
   * <pre>
   * Distinguishes between spans generated in a particular context. For example,
   * two spans with the same name may be distinguished using `CLIENT` (caller)
   * and `SERVER` (callee) to identify queueing latency associated with the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.SpanKind kind = 14;</code>
   */
  private void clearKind() {
    
    kind_ = 0;
  }

  public static final int START_TIME_FIELD_NUMBER = 5;
  private com.google.protobuf.Timestamp startTime_;
  /**
   * <pre>
   * The start time of the span. On the client side, this is the time kept by
   * the local machine where the span execution starts. On the server side, this
   * is the time when the server's application handler starts running.
   * This field is semantically required. When not set on receive -
   * receiver should set it to the value of end_time field if it was
   * set. Or to the current time if neither was set. It is important to
   * keep end_time &gt; start_time for consistency.
   * This field is required.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 5;</code>
   */
  @java.lang.Override
  public boolean hasStartTime() {
    return startTime_ != null;
  }
  /**
   * <pre>
   * The start time of the span. On the client side, this is the time kept by
   * the local machine where the span execution starts. On the server side, this
   * is the time when the server's application handler starts running.
   * This field is semantically required. When not set on receive -
   * receiver should set it to the value of end_time field if it was
   * set. Or to the current time if neither was set. It is important to
   * keep end_time &gt; start_time for consistency.
   * This field is required.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 5;</code>
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getStartTime() {
    return startTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : startTime_;
  }
  /**
   * <pre>
   * The start time of the span. On the client side, this is the time kept by
   * the local machine where the span execution starts. On the server side, this
   * is the time when the server's application handler starts running.
   * This field is semantically required. When not set on receive -
   * receiver should set it to the value of end_time field if it was
   * set. Or to the current time if neither was set. It is important to
   * keep end_time &gt; start_time for consistency.
   * This field is required.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 5;</code>
   */
  private void setStartTime(com.google.protobuf.Timestamp value) {
    value.getClass();
  startTime_ = value;
    
    }
  /**
   * <pre>
   * The start time of the span. On the client side, this is the time kept by
   * the local machine where the span execution starts. On the server side, this
   * is the time when the server's application handler starts running.
   * This field is semantically required. When not set on receive -
   * receiver should set it to the value of end_time field if it was
   * set. Or to the current time if neither was set. It is important to
   * keep end_time &gt; start_time for consistency.
   * This field is required.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 5;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeStartTime(com.google.protobuf.Timestamp value) {
    value.getClass();
  if (startTime_ != null &&
        startTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
      startTime_ =
        com.google.protobuf.Timestamp.newBuilder(startTime_).mergeFrom(value).buildPartial();
    } else {
      startTime_ = value;
    }
    
  }
  /**
   * <pre>
   * The start time of the span. On the client side, this is the time kept by
   * the local machine where the span execution starts. On the server side, this
   * is the time when the server's application handler starts running.
   * This field is semantically required. When not set on receive -
   * receiver should set it to the value of end_time field if it was
   * set. Or to the current time if neither was set. It is important to
   * keep end_time &gt; start_time for consistency.
   * This field is required.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 5;</code>
   */
  private void clearStartTime() {  startTime_ = null;
    
  }

  public static final int END_TIME_FIELD_NUMBER = 6;
  private com.google.protobuf.Timestamp endTime_;
  /**
   * <pre>
   * The end time of the span. On the client side, this is the time kept by
   * the local machine where the span execution ends. On the server side, this
   * is the time when the server application handler stops running.
   * This field is semantically required. When not set on receive -
   * receiver should set it to start_time value. It is important to
   * keep end_time &gt; start_time for consistency.
   * This field is required.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 6;</code>
   */
  @java.lang.Override
  public boolean hasEndTime() {
    return endTime_ != null;
  }
  /**
   * <pre>
   * The end time of the span. On the client side, this is the time kept by
   * the local machine where the span execution ends. On the server side, this
   * is the time when the server application handler stops running.
   * This field is semantically required. When not set on receive -
   * receiver should set it to start_time value. It is important to
   * keep end_time &gt; start_time for consistency.
   * This field is required.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 6;</code>
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getEndTime() {
    return endTime_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : endTime_;
  }
  /**
   * <pre>
   * The end time of the span. On the client side, this is the time kept by
   * the local machine where the span execution ends. On the server side, this
   * is the time when the server application handler stops running.
   * This field is semantically required. When not set on receive -
   * receiver should set it to start_time value. It is important to
   * keep end_time &gt; start_time for consistency.
   * This field is required.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 6;</code>
   */
  private void setEndTime(com.google.protobuf.Timestamp value) {
    value.getClass();
  endTime_ = value;
    
    }
  /**
   * <pre>
   * The end time of the span. On the client side, this is the time kept by
   * the local machine where the span execution ends. On the server side, this
   * is the time when the server application handler stops running.
   * This field is semantically required. When not set on receive -
   * receiver should set it to start_time value. It is important to
   * keep end_time &gt; start_time for consistency.
   * This field is required.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 6;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeEndTime(com.google.protobuf.Timestamp value) {
    value.getClass();
  if (endTime_ != null &&
        endTime_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
      endTime_ =
        com.google.protobuf.Timestamp.newBuilder(endTime_).mergeFrom(value).buildPartial();
    } else {
      endTime_ = value;
    }
    
  }
  /**
   * <pre>
   * The end time of the span. On the client side, this is the time kept by
   * the local machine where the span execution ends. On the server side, this
   * is the time when the server application handler stops running.
   * This field is semantically required. When not set on receive -
   * receiver should set it to start_time value. It is important to
   * keep end_time &gt; start_time for consistency.
   * This field is required.
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 6;</code>
   */
  private void clearEndTime() {  endTime_ = null;
    
  }

  public static final int ATTRIBUTES_FIELD_NUMBER = 7;
  private io.opencensus.proto.trace.v1.Span.Attributes attributes_;
  /**
   * <pre>
   * A set of attributes on the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 7;</code>
   */
  @java.lang.Override
  public boolean hasAttributes() {
    return attributes_ != null;
  }
  /**
   * <pre>
   * A set of attributes on the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 7;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.trace.v1.Span.Attributes getAttributes() {
    return attributes_ == null ? io.opencensus.proto.trace.v1.Span.Attributes.getDefaultInstance() : attributes_;
  }
  /**
   * <pre>
   * A set of attributes on the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 7;</code>
   */
  private void setAttributes(io.opencensus.proto.trace.v1.Span.Attributes value) {
    value.getClass();
  attributes_ = value;
    
    }
  /**
   * <pre>
   * A set of attributes on the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 7;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeAttributes(io.opencensus.proto.trace.v1.Span.Attributes value) {
    value.getClass();
  if (attributes_ != null &&
        attributes_ != io.opencensus.proto.trace.v1.Span.Attributes.getDefaultInstance()) {
      attributes_ =
        io.opencensus.proto.trace.v1.Span.Attributes.newBuilder(attributes_).mergeFrom(value).buildPartial();
    } else {
      attributes_ = value;
    }
    
  }
  /**
   * <pre>
   * A set of attributes on the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 7;</code>
   */
  private void clearAttributes() {  attributes_ = null;
    
  }

  public static final int STACK_TRACE_FIELD_NUMBER = 8;
  private io.opencensus.proto.trace.v1.StackTrace stackTrace_;
  /**
   * <pre>
   * A stack trace captured at the start of the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.StackTrace stack_trace = 8;</code>
   */
  @java.lang.Override
  public boolean hasStackTrace() {
    return stackTrace_ != null;
  }
  /**
   * <pre>
   * A stack trace captured at the start of the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.StackTrace stack_trace = 8;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.trace.v1.StackTrace getStackTrace() {
    return stackTrace_ == null ? io.opencensus.proto.trace.v1.StackTrace.getDefaultInstance() : stackTrace_;
  }
  /**
   * <pre>
   * A stack trace captured at the start of the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.StackTrace stack_trace = 8;</code>
   */
  private void setStackTrace(io.opencensus.proto.trace.v1.StackTrace value) {
    value.getClass();
  stackTrace_ = value;
    
    }
  /**
   * <pre>
   * A stack trace captured at the start of the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.StackTrace stack_trace = 8;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeStackTrace(io.opencensus.proto.trace.v1.StackTrace value) {
    value.getClass();
  if (stackTrace_ != null &&
        stackTrace_ != io.opencensus.proto.trace.v1.StackTrace.getDefaultInstance()) {
      stackTrace_ =
        io.opencensus.proto.trace.v1.StackTrace.newBuilder(stackTrace_).mergeFrom(value).buildPartial();
    } else {
      stackTrace_ = value;
    }
    
  }
  /**
   * <pre>
   * A stack trace captured at the start of the span.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.StackTrace stack_trace = 8;</code>
   */
  private void clearStackTrace() {  stackTrace_ = null;
    
  }

  public static final int TIME_EVENTS_FIELD_NUMBER = 9;
  private io.opencensus.proto.trace.v1.Span.TimeEvents timeEvents_;
  /**
   * <pre>
   * The included time events.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;</code>
   */
  @java.lang.Override
  public boolean hasTimeEvents() {
    return timeEvents_ != null;
  }
  /**
   * <pre>
   * The included time events.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.trace.v1.Span.TimeEvents getTimeEvents() {
    return timeEvents_ == null ? io.opencensus.proto.trace.v1.Span.TimeEvents.getDefaultInstance() : timeEvents_;
  }
  /**
   * <pre>
   * The included time events.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;</code>
   */
  private void setTimeEvents(io.opencensus.proto.trace.v1.Span.TimeEvents value) {
    value.getClass();
  timeEvents_ = value;
    
    }
  /**
   * <pre>
   * The included time events.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeTimeEvents(io.opencensus.proto.trace.v1.Span.TimeEvents value) {
    value.getClass();
  if (timeEvents_ != null &&
        timeEvents_ != io.opencensus.proto.trace.v1.Span.TimeEvents.getDefaultInstance()) {
      timeEvents_ =
        io.opencensus.proto.trace.v1.Span.TimeEvents.newBuilder(timeEvents_).mergeFrom(value).buildPartial();
    } else {
      timeEvents_ = value;
    }
    
  }
  /**
   * <pre>
   * The included time events.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;</code>
   */
  private void clearTimeEvents() {  timeEvents_ = null;
    
  }

  public static final int LINKS_FIELD_NUMBER = 10;
  private io.opencensus.proto.trace.v1.Span.Links links_;
  /**
   * <pre>
   * The included links.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Links links = 10;</code>
   */
  @java.lang.Override
  public boolean hasLinks() {
    return links_ != null;
  }
  /**
   * <pre>
   * The included links.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Links links = 10;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.trace.v1.Span.Links getLinks() {
    return links_ == null ? io.opencensus.proto.trace.v1.Span.Links.getDefaultInstance() : links_;
  }
  /**
   * <pre>
   * The included links.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Links links = 10;</code>
   */
  private void setLinks(io.opencensus.proto.trace.v1.Span.Links value) {
    value.getClass();
  links_ = value;
    
    }
  /**
   * <pre>
   * The included links.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Links links = 10;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeLinks(io.opencensus.proto.trace.v1.Span.Links value) {
    value.getClass();
  if (links_ != null &&
        links_ != io.opencensus.proto.trace.v1.Span.Links.getDefaultInstance()) {
      links_ =
        io.opencensus.proto.trace.v1.Span.Links.newBuilder(links_).mergeFrom(value).buildPartial();
    } else {
      links_ = value;
    }
    
  }
  /**
   * <pre>
   * The included links.
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Span.Links links = 10;</code>
   */
  private void clearLinks() {  links_ = null;
    
  }

  public static final int STATUS_FIELD_NUMBER = 11;
  private io.opencensus.proto.trace.v1.Status status_;
  /**
   * <pre>
   * An optional final status for this span. Semantically when Status
   * wasn't set it is means span ended without errors and assume
   * Status.Ok (code = 0).
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Status status = 11;</code>
   */
  @java.lang.Override
  public boolean hasStatus() {
    return status_ != null;
  }
  /**
   * <pre>
   * An optional final status for this span. Semantically when Status
   * wasn't set it is means span ended without errors and assume
   * Status.Ok (code = 0).
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Status status = 11;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.trace.v1.Status getStatus() {
    return status_ == null ? io.opencensus.proto.trace.v1.Status.getDefaultInstance() : status_;
  }
  /**
   * <pre>
   * An optional final status for this span. Semantically when Status
   * wasn't set it is means span ended without errors and assume
   * Status.Ok (code = 0).
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Status status = 11;</code>
   */
  private void setStatus(io.opencensus.proto.trace.v1.Status value) {
    value.getClass();
  status_ = value;
    
    }
  /**
   * <pre>
   * An optional final status for this span. Semantically when Status
   * wasn't set it is means span ended without errors and assume
   * Status.Ok (code = 0).
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Status status = 11;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeStatus(io.opencensus.proto.trace.v1.Status value) {
    value.getClass();
  if (status_ != null &&
        status_ != io.opencensus.proto.trace.v1.Status.getDefaultInstance()) {
      status_ =
        io.opencensus.proto.trace.v1.Status.newBuilder(status_).mergeFrom(value).buildPartial();
    } else {
      status_ = value;
    }
    
  }
  /**
   * <pre>
   * An optional final status for this span. Semantically when Status
   * wasn't set it is means span ended without errors and assume
   * Status.Ok (code = 0).
   * </pre>
   *
   * <code>.opencensus.proto.trace.v1.Status status = 11;</code>
   */
  private void clearStatus() {  status_ = null;
    
  }

  public static final int RESOURCE_FIELD_NUMBER = 16;
  private io.opencensus.proto.resource.v1.Resource resource_;
  /**
   * <pre>
   * An optional resource that is associated with this span. If not set, this span 
   * should be part of a batch that does include the resource information, unless resource 
   * information is unknown.
   * </pre>
   *
   * <code>.opencensus.proto.resource.v1.Resource resource = 16;</code>
   */
  @java.lang.Override
  public boolean hasResource() {
    return resource_ != null;
  }
  /**
   * <pre>
   * An optional resource that is associated with this span. If not set, this span 
   * should be part of a batch that does include the resource information, unless resource 
   * information is unknown.
   * </pre>
   *
   * <code>.opencensus.proto.resource.v1.Resource resource = 16;</code>
   */
  @java.lang.Override
  public io.opencensus.proto.resource.v1.Resource getResource() {
    return resource_ == null ? io.opencensus.proto.resource.v1.Resource.getDefaultInstance() : resource_;
  }
  /**
   * <pre>
   * An optional resource that is associated with this span. If not set, this span 
   * should be part of a batch that does include the resource information, unless resource 
   * information is unknown.
   * </pre>
   *
   * <code>.opencensus.proto.resource.v1.Resource resource = 16;</code>
   */
  private void setResource(io.opencensus.proto.resource.v1.Resource value) {
    value.getClass();
  resource_ = value;
    
    }
  /**
   * <pre>
   * An optional resource that is associated with this span. If not set, this span 
   * should be part of a batch that does include the resource information, unless resource 
   * information is unknown.
   * </pre>
   *
   * <code>.opencensus.proto.resource.v1.Resource resource = 16;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeResource(io.opencensus.proto.resource.v1.Resource value) {
    value.getClass();
  if (resource_ != null &&
        resource_ != io.opencensus.proto.resource.v1.Resource.getDefaultInstance()) {
      resource_ =
        io.opencensus.proto.resource.v1.Resource.newBuilder(resource_).mergeFrom(value).buildPartial();
    } else {
      resource_ = value;
    }
    
  }
  /**
   * <pre>
   * An optional resource that is associated with this span. If not set, this span 
   * should be part of a batch that does include the resource information, unless resource 
   * information is unknown.
   * </pre>
   *
   * <code>.opencensus.proto.resource.v1.Resource resource = 16;</code>
   */
  private void clearResource() {  resource_ = null;
    
  }

  public static final int SAME_PROCESS_AS_PARENT_SPAN_FIELD_NUMBER = 12;
  private com.google.protobuf.BoolValue sameProcessAsParentSpan_;
  /**
   * <pre>
   * A highly recommended but not required flag that identifies when a
   * trace crosses a process boundary. True when the parent_span belongs
   * to the same process as the current span. This flag is most commonly
   * used to indicate the need to adjust time as clocks in different
   * processes may not be synchronized.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
   */
  @java.lang.Override
  public boolean hasSameProcessAsParentSpan() {
    return sameProcessAsParentSpan_ != null;
  }
  /**
   * <pre>
   * A highly recommended but not required flag that identifies when a
   * trace crosses a process boundary. True when the parent_span belongs
   * to the same process as the current span. This flag is most commonly
   * used to indicate the need to adjust time as clocks in different
   * processes may not be synchronized.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
   */
  @java.lang.Override
  public com.google.protobuf.BoolValue getSameProcessAsParentSpan() {
    return sameProcessAsParentSpan_ == null ? com.google.protobuf.BoolValue.getDefaultInstance() : sameProcessAsParentSpan_;
  }
  /**
   * <pre>
   * A highly recommended but not required flag that identifies when a
   * trace crosses a process boundary. True when the parent_span belongs
   * to the same process as the current span. This flag is most commonly
   * used to indicate the need to adjust time as clocks in different
   * processes may not be synchronized.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
   */
  private void setSameProcessAsParentSpan(com.google.protobuf.BoolValue value) {
    value.getClass();
  sameProcessAsParentSpan_ = value;
    
    }
  /**
   * <pre>
   * A highly recommended but not required flag that identifies when a
   * trace crosses a process boundary. True when the parent_span belongs
   * to the same process as the current span. This flag is most commonly
   * used to indicate the need to adjust time as clocks in different
   * processes may not be synchronized.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeSameProcessAsParentSpan(com.google.protobuf.BoolValue value) {
    value.getClass();
  if (sameProcessAsParentSpan_ != null &&
        sameProcessAsParentSpan_ != com.google.protobuf.BoolValue.getDefaultInstance()) {
      sameProcessAsParentSpan_ =
        com.google.protobuf.BoolValue.newBuilder(sameProcessAsParentSpan_).mergeFrom(value).buildPartial();
    } else {
      sameProcessAsParentSpan_ = value;
    }
    
  }
  /**
   * <pre>
   * A highly recommended but not required flag that identifies when a
   * trace crosses a process boundary. True when the parent_span belongs
   * to the same process as the current span. This flag is most commonly
   * used to indicate the need to adjust time as clocks in different
   * processes may not be synchronized.
   * </pre>
   *
   * <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
   */
  private void clearSameProcessAsParentSpan() {  sameProcessAsParentSpan_ = null;
    
  }

  public static final int CHILD_SPAN_COUNT_FIELD_NUMBER = 13;
  private com.google.protobuf.UInt32Value childSpanCount_;
  /**
   * <pre>
   * An optional number of child spans that were generated while this span
   * was active. If set, allows an implementation to detect missing child spans.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
   */
  @java.lang.Override
  public boolean hasChildSpanCount() {
    return childSpanCount_ != null;
  }
  /**
   * <pre>
   * An optional number of child spans that were generated while this span
   * was active. If set, allows an implementation to detect missing child spans.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
   */
  @java.lang.Override
  public com.google.protobuf.UInt32Value getChildSpanCount() {
    return childSpanCount_ == null ? com.google.protobuf.UInt32Value.getDefaultInstance() : childSpanCount_;
  }
  /**
   * <pre>
   * An optional number of child spans that were generated while this span
   * was active. If set, allows an implementation to detect missing child spans.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
   */
  private void setChildSpanCount(com.google.protobuf.UInt32Value value) {
    value.getClass();
  childSpanCount_ = value;
    
    }
  /**
   * <pre>
   * An optional number of child spans that were generated while this span
   * was active. If set, allows an implementation to detect missing child spans.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
   */
  @java.lang.SuppressWarnings({"ReferenceEquality"})
  private void mergeChildSpanCount(com.google.protobuf.UInt32Value value) {
    value.getClass();
  if (childSpanCount_ != null &&
        childSpanCount_ != com.google.protobuf.UInt32Value.getDefaultInstance()) {
      childSpanCount_ =
        com.google.protobuf.UInt32Value.newBuilder(childSpanCount_).mergeFrom(value).buildPartial();
    } else {
      childSpanCount_ = value;
    }
    
  }
  /**
   * <pre>
   * An optional number of child spans that were generated while this span
   * was active. If set, allows an implementation to detect missing child spans.
   * </pre>
   *
   * <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
   */
  private void clearChildSpanCount() {  childSpanCount_ = null;
    
  }

  public static io.opencensus.proto.trace.v1.Span parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.trace.v1.Span parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.Span parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.trace.v1.Span parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.Span parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static io.opencensus.proto.trace.v1.Span parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.Span parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.trace.v1.Span parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.Span parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.trace.v1.Span parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static io.opencensus.proto.trace.v1.Span parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static io.opencensus.proto.trace.v1.Span parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(io.opencensus.proto.trace.v1.Span prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * A span represents a single operation within a trace. Spans can be
   * nested to form a trace tree. Spans may also be linked to other spans
   * from the same or different trace. And form graphs. Often, a trace
   * contains a root span that describes the end-to-end latency, and one
   * or more subspans for its sub-operations. A trace can also contain
   * multiple root spans, or none at all. Spans do not need to be
   * contiguous - there may be gaps or overlaps between spans in a trace.
   * The next id is 17.
   * TODO(bdrutu): Add an example.
   * </pre>
   *
   * Protobuf type {@code opencensus.proto.trace.v1.Span}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        io.opencensus.proto.trace.v1.Span, Builder> implements
      // @@protoc_insertion_point(builder_implements:opencensus.proto.trace.v1.Span)
      io.opencensus.proto.trace.v1.SpanOrBuilder {
    // Construct using io.opencensus.proto.trace.v1.Span.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * A unique identifier for a trace. All spans from the same trace share
     * the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
     * is considered invalid.
     * This field is semantically required. Receiver should generate new
     * random trace_id if empty or invalid trace_id was received.
     * This field is required.
     * </pre>
     *
     * <code>bytes trace_id = 1;</code>
     * @return The traceId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getTraceId() {
      return instance.getTraceId();
    }
    /**
     * <pre>
     * A unique identifier for a trace. All spans from the same trace share
     * the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
     * is considered invalid.
     * This field is semantically required. Receiver should generate new
     * random trace_id if empty or invalid trace_id was received.
     * This field is required.
     * </pre>
     *
     * <code>bytes trace_id = 1;</code>
     * @param value The traceId to set.
     * @return This builder for chaining.
     */
    public Builder setTraceId(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTraceId(value);
      return this;
    }
    /**
     * <pre>
     * A unique identifier for a trace. All spans from the same trace share
     * the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
     * is considered invalid.
     * This field is semantically required. Receiver should generate new
     * random trace_id if empty or invalid trace_id was received.
     * This field is required.
     * </pre>
     *
     * <code>bytes trace_id = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearTraceId() {
      copyOnWrite();
      instance.clearTraceId();
      return this;
    }

    /**
     * <pre>
     * A unique identifier for a span within a trace, assigned when the span
     * is created. The ID is an 8-byte array. An ID with all zeroes is considered
     * invalid.
     * This field is semantically required. Receiver should generate new
     * random span_id if empty or invalid span_id was received.
     * This field is required.
     * </pre>
     *
     * <code>bytes span_id = 2;</code>
     * @return The spanId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSpanId() {
      return instance.getSpanId();
    }
    /**
     * <pre>
     * A unique identifier for a span within a trace, assigned when the span
     * is created. The ID is an 8-byte array. An ID with all zeroes is considered
     * invalid.
     * This field is semantically required. Receiver should generate new
     * random span_id if empty or invalid span_id was received.
     * This field is required.
     * </pre>
     *
     * <code>bytes span_id = 2;</code>
     * @param value The spanId to set.
     * @return This builder for chaining.
     */
    public Builder setSpanId(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setSpanId(value);
      return this;
    }
    /**
     * <pre>
     * A unique identifier for a span within a trace, assigned when the span
     * is created. The ID is an 8-byte array. An ID with all zeroes is considered
     * invalid.
     * This field is semantically required. Receiver should generate new
     * random span_id if empty or invalid span_id was received.
     * This field is required.
     * </pre>
     *
     * <code>bytes span_id = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearSpanId() {
      copyOnWrite();
      instance.clearSpanId();
      return this;
    }

    /**
     * <pre>
     * The Tracestate on the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;</code>
     */
    @java.lang.Override
    public boolean hasTracestate() {
      return instance.hasTracestate();
    }
    /**
     * <pre>
     * The Tracestate on the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.Span.Tracestate getTracestate() {
      return instance.getTracestate();
    }
    /**
     * <pre>
     * The Tracestate on the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;</code>
     */
    public Builder setTracestate(io.opencensus.proto.trace.v1.Span.Tracestate value) {
      copyOnWrite();
      instance.setTracestate(value);
      return this;
      }
    /**
     * <pre>
     * The Tracestate on the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;</code>
     */
    public Builder setTracestate(
        io.opencensus.proto.trace.v1.Span.Tracestate.Builder builderForValue) {
      copyOnWrite();
      instance.setTracestate(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The Tracestate on the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;</code>
     */
    public Builder mergeTracestate(io.opencensus.proto.trace.v1.Span.Tracestate value) {
      copyOnWrite();
      instance.mergeTracestate(value);
      return this;
    }
    /**
     * <pre>
     * The Tracestate on the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Tracestate tracestate = 15;</code>
     */
    public Builder clearTracestate() {  copyOnWrite();
      instance.clearTracestate();
      return this;
    }

    /**
     * <pre>
     * The `span_id` of this span's parent span. If this is a root span, then this
     * field must be empty. The ID is an 8-byte array.
     * </pre>
     *
     * <code>bytes parent_span_id = 3;</code>
     * @return The parentSpanId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getParentSpanId() {
      return instance.getParentSpanId();
    }
    /**
     * <pre>
     * The `span_id` of this span's parent span. If this is a root span, then this
     * field must be empty. The ID is an 8-byte array.
     * </pre>
     *
     * <code>bytes parent_span_id = 3;</code>
     * @param value The parentSpanId to set.
     * @return This builder for chaining.
     */
    public Builder setParentSpanId(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setParentSpanId(value);
      return this;
    }
    /**
     * <pre>
     * The `span_id` of this span's parent span. If this is a root span, then this
     * field must be empty. The ID is an 8-byte array.
     * </pre>
     *
     * <code>bytes parent_span_id = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearParentSpanId() {
      copyOnWrite();
      instance.clearParentSpanId();
      return this;
    }

    /**
     * <pre>
     * A description of the span's operation.
     * For example, the name can be a qualified method name or a file name
     * and a line number where the operation is called. A best practice is to use
     * the same display name at the same call point in an application.
     * This makes it easier to correlate spans in different traces.
     * This field is semantically required to be set to non-empty string.
     * When null or empty string received - receiver may use string "name"
     * as a replacement. There might be smarted algorithms implemented by
     * receiver to fix the empty span name.
     * This field is required.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString name = 4;</code>
     */
    @java.lang.Override
    public boolean hasName() {
      return instance.hasName();
    }
    /**
     * <pre>
     * A description of the span's operation.
     * For example, the name can be a qualified method name or a file name
     * and a line number where the operation is called. A best practice is to use
     * the same display name at the same call point in an application.
     * This makes it easier to correlate spans in different traces.
     * This field is semantically required to be set to non-empty string.
     * When null or empty string received - receiver may use string "name"
     * as a replacement. There might be smarted algorithms implemented by
     * receiver to fix the empty span name.
     * This field is required.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString name = 4;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.TruncatableString getName() {
      return instance.getName();
    }
    /**
     * <pre>
     * A description of the span's operation.
     * For example, the name can be a qualified method name or a file name
     * and a line number where the operation is called. A best practice is to use
     * the same display name at the same call point in an application.
     * This makes it easier to correlate spans in different traces.
     * This field is semantically required to be set to non-empty string.
     * When null or empty string received - receiver may use string "name"
     * as a replacement. There might be smarted algorithms implemented by
     * receiver to fix the empty span name.
     * This field is required.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString name = 4;</code>
     */
    public Builder setName(io.opencensus.proto.trace.v1.TruncatableString value) {
      copyOnWrite();
      instance.setName(value);
      return this;
      }
    /**
     * <pre>
     * A description of the span's operation.
     * For example, the name can be a qualified method name or a file name
     * and a line number where the operation is called. A best practice is to use
     * the same display name at the same call point in an application.
     * This makes it easier to correlate spans in different traces.
     * This field is semantically required to be set to non-empty string.
     * When null or empty string received - receiver may use string "name"
     * as a replacement. There might be smarted algorithms implemented by
     * receiver to fix the empty span name.
     * This field is required.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString name = 4;</code>
     */
    public Builder setName(
        io.opencensus.proto.trace.v1.TruncatableString.Builder builderForValue) {
      copyOnWrite();
      instance.setName(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A description of the span's operation.
     * For example, the name can be a qualified method name or a file name
     * and a line number where the operation is called. A best practice is to use
     * the same display name at the same call point in an application.
     * This makes it easier to correlate spans in different traces.
     * This field is semantically required to be set to non-empty string.
     * When null or empty string received - receiver may use string "name"
     * as a replacement. There might be smarted algorithms implemented by
     * receiver to fix the empty span name.
     * This field is required.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString name = 4;</code>
     */
    public Builder mergeName(io.opencensus.proto.trace.v1.TruncatableString value) {
      copyOnWrite();
      instance.mergeName(value);
      return this;
    }
    /**
     * <pre>
     * A description of the span's operation.
     * For example, the name can be a qualified method name or a file name
     * and a line number where the operation is called. A best practice is to use
     * the same display name at the same call point in an application.
     * This makes it easier to correlate spans in different traces.
     * This field is semantically required to be set to non-empty string.
     * When null or empty string received - receiver may use string "name"
     * as a replacement. There might be smarted algorithms implemented by
     * receiver to fix the empty span name.
     * This field is required.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.TruncatableString name = 4;</code>
     */
    public Builder clearName() {  copyOnWrite();
      instance.clearName();
      return this;
    }

    /**
     * <pre>
     * Distinguishes between spans generated in a particular context. For example,
     * two spans with the same name may be distinguished using `CLIENT` (caller)
     * and `SERVER` (callee) to identify queueing latency associated with the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.SpanKind kind = 14;</code>
     * @return The enum numeric value on the wire for kind.
     */
    @java.lang.Override
    public int getKindValue() {
      return instance.getKindValue();
    }
    /**
     * <pre>
     * Distinguishes between spans generated in a particular context. For example,
     * two spans with the same name may be distinguished using `CLIENT` (caller)
     * and `SERVER` (callee) to identify queueing latency associated with the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.SpanKind kind = 14;</code>
     * @param value The kind to set.
     * @return This builder for chaining.
     */
    public Builder setKindValue(int value) {
      copyOnWrite();
      instance.setKindValue(value);
      return this;
    }
    /**
     * <pre>
     * Distinguishes between spans generated in a particular context. For example,
     * two spans with the same name may be distinguished using `CLIENT` (caller)
     * and `SERVER` (callee) to identify queueing latency associated with the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.SpanKind kind = 14;</code>
     * @return The kind.
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.Span.SpanKind getKind() {
      return instance.getKind();
    }
    /**
     * <pre>
     * Distinguishes between spans generated in a particular context. For example,
     * two spans with the same name may be distinguished using `CLIENT` (caller)
     * and `SERVER` (callee) to identify queueing latency associated with the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.SpanKind kind = 14;</code>
     * @param value The enum numeric value on the wire for kind to set.
     * @return This builder for chaining.
     */
    public Builder setKind(io.opencensus.proto.trace.v1.Span.SpanKind value) {
      copyOnWrite();
      instance.setKind(value);
      return this;
    }
    /**
     * <pre>
     * Distinguishes between spans generated in a particular context. For example,
     * two spans with the same name may be distinguished using `CLIENT` (caller)
     * and `SERVER` (callee) to identify queueing latency associated with the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.SpanKind kind = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearKind() {
      copyOnWrite();
      instance.clearKind();
      return this;
    }

    /**
     * <pre>
     * The start time of the span. On the client side, this is the time kept by
     * the local machine where the span execution starts. On the server side, this
     * is the time when the server's application handler starts running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to the value of end_time field if it was
     * set. Or to the current time if neither was set. It is important to
     * keep end_time &gt; start_time for consistency.
     * This field is required.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    @java.lang.Override
    public boolean hasStartTime() {
      return instance.hasStartTime();
    }
    /**
     * <pre>
     * The start time of the span. On the client side, this is the time kept by
     * the local machine where the span execution starts. On the server side, this
     * is the time when the server's application handler starts running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to the value of end_time field if it was
     * set. Or to the current time if neither was set. It is important to
     * keep end_time &gt; start_time for consistency.
     * This field is required.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Timestamp getStartTime() {
      return instance.getStartTime();
    }
    /**
     * <pre>
     * The start time of the span. On the client side, this is the time kept by
     * the local machine where the span execution starts. On the server side, this
     * is the time when the server's application handler starts running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to the value of end_time field if it was
     * set. Or to the current time if neither was set. It is important to
     * keep end_time &gt; start_time for consistency.
     * This field is required.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    public Builder setStartTime(com.google.protobuf.Timestamp value) {
      copyOnWrite();
      instance.setStartTime(value);
      return this;
      }
    /**
     * <pre>
     * The start time of the span. On the client side, this is the time kept by
     * the local machine where the span execution starts. On the server side, this
     * is the time when the server's application handler starts running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to the value of end_time field if it was
     * set. Or to the current time if neither was set. It is important to
     * keep end_time &gt; start_time for consistency.
     * This field is required.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    public Builder setStartTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      copyOnWrite();
      instance.setStartTime(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The start time of the span. On the client side, this is the time kept by
     * the local machine where the span execution starts. On the server side, this
     * is the time when the server's application handler starts running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to the value of end_time field if it was
     * set. Or to the current time if neither was set. It is important to
     * keep end_time &gt; start_time for consistency.
     * This field is required.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    public Builder mergeStartTime(com.google.protobuf.Timestamp value) {
      copyOnWrite();
      instance.mergeStartTime(value);
      return this;
    }
    /**
     * <pre>
     * The start time of the span. On the client side, this is the time kept by
     * the local machine where the span execution starts. On the server side, this
     * is the time when the server's application handler starts running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to the value of end_time field if it was
     * set. Or to the current time if neither was set. It is important to
     * keep end_time &gt; start_time for consistency.
     * This field is required.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start_time = 5;</code>
     */
    public Builder clearStartTime() {  copyOnWrite();
      instance.clearStartTime();
      return this;
    }

    /**
     * <pre>
     * The end time of the span. On the client side, this is the time kept by
     * the local machine where the span execution ends. On the server side, this
     * is the time when the server application handler stops running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to start_time value. It is important to
     * keep end_time &gt; start_time for consistency.
     * This field is required.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 6;</code>
     */
    @java.lang.Override
    public boolean hasEndTime() {
      return instance.hasEndTime();
    }
    /**
     * <pre>
     * The end time of the span. On the client side, this is the time kept by
     * the local machine where the span execution ends. On the server side, this
     * is the time when the server application handler stops running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to start_time value. It is important to
     * keep end_time &gt; start_time for consistency.
     * This field is required.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 6;</code>
     */
    @java.lang.Override
    public com.google.protobuf.Timestamp getEndTime() {
      return instance.getEndTime();
    }
    /**
     * <pre>
     * The end time of the span. On the client side, this is the time kept by
     * the local machine where the span execution ends. On the server side, this
     * is the time when the server application handler stops running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to start_time value. It is important to
     * keep end_time &gt; start_time for consistency.
     * This field is required.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 6;</code>
     */
    public Builder setEndTime(com.google.protobuf.Timestamp value) {
      copyOnWrite();
      instance.setEndTime(value);
      return this;
      }
    /**
     * <pre>
     * The end time of the span. On the client side, this is the time kept by
     * the local machine where the span execution ends. On the server side, this
     * is the time when the server application handler stops running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to start_time value. It is important to
     * keep end_time &gt; start_time for consistency.
     * This field is required.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 6;</code>
     */
    public Builder setEndTime(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      copyOnWrite();
      instance.setEndTime(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The end time of the span. On the client side, this is the time kept by
     * the local machine where the span execution ends. On the server side, this
     * is the time when the server application handler stops running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to start_time value. It is important to
     * keep end_time &gt; start_time for consistency.
     * This field is required.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 6;</code>
     */
    public Builder mergeEndTime(com.google.protobuf.Timestamp value) {
      copyOnWrite();
      instance.mergeEndTime(value);
      return this;
    }
    /**
     * <pre>
     * The end time of the span. On the client side, this is the time kept by
     * the local machine where the span execution ends. On the server side, this
     * is the time when the server application handler stops running.
     * This field is semantically required. When not set on receive -
     * receiver should set it to start_time value. It is important to
     * keep end_time &gt; start_time for consistency.
     * This field is required.
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end_time = 6;</code>
     */
    public Builder clearEndTime() {  copyOnWrite();
      instance.clearEndTime();
      return this;
    }

    /**
     * <pre>
     * A set of attributes on the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 7;</code>
     */
    @java.lang.Override
    public boolean hasAttributes() {
      return instance.hasAttributes();
    }
    /**
     * <pre>
     * A set of attributes on the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 7;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.Span.Attributes getAttributes() {
      return instance.getAttributes();
    }
    /**
     * <pre>
     * A set of attributes on the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 7;</code>
     */
    public Builder setAttributes(io.opencensus.proto.trace.v1.Span.Attributes value) {
      copyOnWrite();
      instance.setAttributes(value);
      return this;
      }
    /**
     * <pre>
     * A set of attributes on the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 7;</code>
     */
    public Builder setAttributes(
        io.opencensus.proto.trace.v1.Span.Attributes.Builder builderForValue) {
      copyOnWrite();
      instance.setAttributes(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A set of attributes on the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 7;</code>
     */
    public Builder mergeAttributes(io.opencensus.proto.trace.v1.Span.Attributes value) {
      copyOnWrite();
      instance.mergeAttributes(value);
      return this;
    }
    /**
     * <pre>
     * A set of attributes on the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Attributes attributes = 7;</code>
     */
    public Builder clearAttributes() {  copyOnWrite();
      instance.clearAttributes();
      return this;
    }

    /**
     * <pre>
     * A stack trace captured at the start of the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.StackTrace stack_trace = 8;</code>
     */
    @java.lang.Override
    public boolean hasStackTrace() {
      return instance.hasStackTrace();
    }
    /**
     * <pre>
     * A stack trace captured at the start of the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.StackTrace stack_trace = 8;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.StackTrace getStackTrace() {
      return instance.getStackTrace();
    }
    /**
     * <pre>
     * A stack trace captured at the start of the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.StackTrace stack_trace = 8;</code>
     */
    public Builder setStackTrace(io.opencensus.proto.trace.v1.StackTrace value) {
      copyOnWrite();
      instance.setStackTrace(value);
      return this;
      }
    /**
     * <pre>
     * A stack trace captured at the start of the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.StackTrace stack_trace = 8;</code>
     */
    public Builder setStackTrace(
        io.opencensus.proto.trace.v1.StackTrace.Builder builderForValue) {
      copyOnWrite();
      instance.setStackTrace(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A stack trace captured at the start of the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.StackTrace stack_trace = 8;</code>
     */
    public Builder mergeStackTrace(io.opencensus.proto.trace.v1.StackTrace value) {
      copyOnWrite();
      instance.mergeStackTrace(value);
      return this;
    }
    /**
     * <pre>
     * A stack trace captured at the start of the span.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.StackTrace stack_trace = 8;</code>
     */
    public Builder clearStackTrace() {  copyOnWrite();
      instance.clearStackTrace();
      return this;
    }

    /**
     * <pre>
     * The included time events.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;</code>
     */
    @java.lang.Override
    public boolean hasTimeEvents() {
      return instance.hasTimeEvents();
    }
    /**
     * <pre>
     * The included time events.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.Span.TimeEvents getTimeEvents() {
      return instance.getTimeEvents();
    }
    /**
     * <pre>
     * The included time events.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;</code>
     */
    public Builder setTimeEvents(io.opencensus.proto.trace.v1.Span.TimeEvents value) {
      copyOnWrite();
      instance.setTimeEvents(value);
      return this;
      }
    /**
     * <pre>
     * The included time events.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;</code>
     */
    public Builder setTimeEvents(
        io.opencensus.proto.trace.v1.Span.TimeEvents.Builder builderForValue) {
      copyOnWrite();
      instance.setTimeEvents(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The included time events.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;</code>
     */
    public Builder mergeTimeEvents(io.opencensus.proto.trace.v1.Span.TimeEvents value) {
      copyOnWrite();
      instance.mergeTimeEvents(value);
      return this;
    }
    /**
     * <pre>
     * The included time events.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.TimeEvents time_events = 9;</code>
     */
    public Builder clearTimeEvents() {  copyOnWrite();
      instance.clearTimeEvents();
      return this;
    }

    /**
     * <pre>
     * The included links.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Links links = 10;</code>
     */
    @java.lang.Override
    public boolean hasLinks() {
      return instance.hasLinks();
    }
    /**
     * <pre>
     * The included links.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Links links = 10;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.Span.Links getLinks() {
      return instance.getLinks();
    }
    /**
     * <pre>
     * The included links.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Links links = 10;</code>
     */
    public Builder setLinks(io.opencensus.proto.trace.v1.Span.Links value) {
      copyOnWrite();
      instance.setLinks(value);
      return this;
      }
    /**
     * <pre>
     * The included links.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Links links = 10;</code>
     */
    public Builder setLinks(
        io.opencensus.proto.trace.v1.Span.Links.Builder builderForValue) {
      copyOnWrite();
      instance.setLinks(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * The included links.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Links links = 10;</code>
     */
    public Builder mergeLinks(io.opencensus.proto.trace.v1.Span.Links value) {
      copyOnWrite();
      instance.mergeLinks(value);
      return this;
    }
    /**
     * <pre>
     * The included links.
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Span.Links links = 10;</code>
     */
    public Builder clearLinks() {  copyOnWrite();
      instance.clearLinks();
      return this;
    }

    /**
     * <pre>
     * An optional final status for this span. Semantically when Status
     * wasn't set it is means span ended without errors and assume
     * Status.Ok (code = 0).
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Status status = 11;</code>
     */
    @java.lang.Override
    public boolean hasStatus() {
      return instance.hasStatus();
    }
    /**
     * <pre>
     * An optional final status for this span. Semantically when Status
     * wasn't set it is means span ended without errors and assume
     * Status.Ok (code = 0).
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Status status = 11;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.trace.v1.Status getStatus() {
      return instance.getStatus();
    }
    /**
     * <pre>
     * An optional final status for this span. Semantically when Status
     * wasn't set it is means span ended without errors and assume
     * Status.Ok (code = 0).
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Status status = 11;</code>
     */
    public Builder setStatus(io.opencensus.proto.trace.v1.Status value) {
      copyOnWrite();
      instance.setStatus(value);
      return this;
      }
    /**
     * <pre>
     * An optional final status for this span. Semantically when Status
     * wasn't set it is means span ended without errors and assume
     * Status.Ok (code = 0).
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Status status = 11;</code>
     */
    public Builder setStatus(
        io.opencensus.proto.trace.v1.Status.Builder builderForValue) {
      copyOnWrite();
      instance.setStatus(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * An optional final status for this span. Semantically when Status
     * wasn't set it is means span ended without errors and assume
     * Status.Ok (code = 0).
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Status status = 11;</code>
     */
    public Builder mergeStatus(io.opencensus.proto.trace.v1.Status value) {
      copyOnWrite();
      instance.mergeStatus(value);
      return this;
    }
    /**
     * <pre>
     * An optional final status for this span. Semantically when Status
     * wasn't set it is means span ended without errors and assume
     * Status.Ok (code = 0).
     * </pre>
     *
     * <code>.opencensus.proto.trace.v1.Status status = 11;</code>
     */
    public Builder clearStatus() {  copyOnWrite();
      instance.clearStatus();
      return this;
    }

    /**
     * <pre>
     * An optional resource that is associated with this span. If not set, this span 
     * should be part of a batch that does include the resource information, unless resource 
     * information is unknown.
     * </pre>
     *
     * <code>.opencensus.proto.resource.v1.Resource resource = 16;</code>
     */
    @java.lang.Override
    public boolean hasResource() {
      return instance.hasResource();
    }
    /**
     * <pre>
     * An optional resource that is associated with this span. If not set, this span 
     * should be part of a batch that does include the resource information, unless resource 
     * information is unknown.
     * </pre>
     *
     * <code>.opencensus.proto.resource.v1.Resource resource = 16;</code>
     */
    @java.lang.Override
    public io.opencensus.proto.resource.v1.Resource getResource() {
      return instance.getResource();
    }
    /**
     * <pre>
     * An optional resource that is associated with this span. If not set, this span 
     * should be part of a batch that does include the resource information, unless resource 
     * information is unknown.
     * </pre>
     *
     * <code>.opencensus.proto.resource.v1.Resource resource = 16;</code>
     */
    public Builder setResource(io.opencensus.proto.resource.v1.Resource value) {
      copyOnWrite();
      instance.setResource(value);
      return this;
      }
    /**
     * <pre>
     * An optional resource that is associated with this span. If not set, this span 
     * should be part of a batch that does include the resource information, unless resource 
     * information is unknown.
     * </pre>
     *
     * <code>.opencensus.proto.resource.v1.Resource resource = 16;</code>
     */
    public Builder setResource(
        io.opencensus.proto.resource.v1.Resource.Builder builderForValue) {
      copyOnWrite();
      instance.setResource(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * An optional resource that is associated with this span. If not set, this span 
     * should be part of a batch that does include the resource information, unless resource 
     * information is unknown.
     * </pre>
     *
     * <code>.opencensus.proto.resource.v1.Resource resource = 16;</code>
     */
    public Builder mergeResource(io.opencensus.proto.resource.v1.Resource value) {
      copyOnWrite();
      instance.mergeResource(value);
      return this;
    }
    /**
     * <pre>
     * An optional resource that is associated with this span. If not set, this span 
     * should be part of a batch that does include the resource information, unless resource 
     * information is unknown.
     * </pre>
     *
     * <code>.opencensus.proto.resource.v1.Resource resource = 16;</code>
     */
    public Builder clearResource() {  copyOnWrite();
      instance.clearResource();
      return this;
    }

    /**
     * <pre>
     * A highly recommended but not required flag that identifies when a
     * trace crosses a process boundary. True when the parent_span belongs
     * to the same process as the current span. This flag is most commonly
     * used to indicate the need to adjust time as clocks in different
     * processes may not be synchronized.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
     */
    @java.lang.Override
    public boolean hasSameProcessAsParentSpan() {
      return instance.hasSameProcessAsParentSpan();
    }
    /**
     * <pre>
     * A highly recommended but not required flag that identifies when a
     * trace crosses a process boundary. True when the parent_span belongs
     * to the same process as the current span. This flag is most commonly
     * used to indicate the need to adjust time as clocks in different
     * processes may not be synchronized.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
     */
    @java.lang.Override
    public com.google.protobuf.BoolValue getSameProcessAsParentSpan() {
      return instance.getSameProcessAsParentSpan();
    }
    /**
     * <pre>
     * A highly recommended but not required flag that identifies when a
     * trace crosses a process boundary. True when the parent_span belongs
     * to the same process as the current span. This flag is most commonly
     * used to indicate the need to adjust time as clocks in different
     * processes may not be synchronized.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
     */
    public Builder setSameProcessAsParentSpan(com.google.protobuf.BoolValue value) {
      copyOnWrite();
      instance.setSameProcessAsParentSpan(value);
      return this;
      }
    /**
     * <pre>
     * A highly recommended but not required flag that identifies when a
     * trace crosses a process boundary. True when the parent_span belongs
     * to the same process as the current span. This flag is most commonly
     * used to indicate the need to adjust time as clocks in different
     * processes may not be synchronized.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
     */
    public Builder setSameProcessAsParentSpan(
        com.google.protobuf.BoolValue.Builder builderForValue) {
      copyOnWrite();
      instance.setSameProcessAsParentSpan(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * A highly recommended but not required flag that identifies when a
     * trace crosses a process boundary. True when the parent_span belongs
     * to the same process as the current span. This flag is most commonly
     * used to indicate the need to adjust time as clocks in different
     * processes may not be synchronized.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
     */
    public Builder mergeSameProcessAsParentSpan(com.google.protobuf.BoolValue value) {
      copyOnWrite();
      instance.mergeSameProcessAsParentSpan(value);
      return this;
    }
    /**
     * <pre>
     * A highly recommended but not required flag that identifies when a
     * trace crosses a process boundary. True when the parent_span belongs
     * to the same process as the current span. This flag is most commonly
     * used to indicate the need to adjust time as clocks in different
     * processes may not be synchronized.
     * </pre>
     *
     * <code>.google.protobuf.BoolValue same_process_as_parent_span = 12;</code>
     */
    public Builder clearSameProcessAsParentSpan() {  copyOnWrite();
      instance.clearSameProcessAsParentSpan();
      return this;
    }

    /**
     * <pre>
     * An optional number of child spans that were generated while this span
     * was active. If set, allows an implementation to detect missing child spans.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
     */
    @java.lang.Override
    public boolean hasChildSpanCount() {
      return instance.hasChildSpanCount();
    }
    /**
     * <pre>
     * An optional number of child spans that were generated while this span
     * was active. If set, allows an implementation to detect missing child spans.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
     */
    @java.lang.Override
    public com.google.protobuf.UInt32Value getChildSpanCount() {
      return instance.getChildSpanCount();
    }
    /**
     * <pre>
     * An optional number of child spans that were generated while this span
     * was active. If set, allows an implementation to detect missing child spans.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
     */
    public Builder setChildSpanCount(com.google.protobuf.UInt32Value value) {
      copyOnWrite();
      instance.setChildSpanCount(value);
      return this;
      }
    /**
     * <pre>
     * An optional number of child spans that were generated while this span
     * was active. If set, allows an implementation to detect missing child spans.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
     */
    public Builder setChildSpanCount(
        com.google.protobuf.UInt32Value.Builder builderForValue) {
      copyOnWrite();
      instance.setChildSpanCount(builderForValue.build());
      return this;
    }
    /**
     * <pre>
     * An optional number of child spans that were generated while this span
     * was active. If set, allows an implementation to detect missing child spans.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
     */
    public Builder mergeChildSpanCount(com.google.protobuf.UInt32Value value) {
      copyOnWrite();
      instance.mergeChildSpanCount(value);
      return this;
    }
    /**
     * <pre>
     * An optional number of child spans that were generated while this span
     * was active. If set, allows an implementation to detect missing child spans.
     * </pre>
     *
     * <code>.google.protobuf.UInt32Value child_span_count = 13;</code>
     */
    public Builder clearChildSpanCount() {  copyOnWrite();
      instance.clearChildSpanCount();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:opencensus.proto.trace.v1.Span)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new io.opencensus.proto.trace.v1.Span();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "traceId_",
            "spanId_",
            "parentSpanId_",
            "name_",
            "startTime_",
            "endTime_",
            "attributes_",
            "stackTrace_",
            "timeEvents_",
            "links_",
            "status_",
            "sameProcessAsParentSpan_",
            "childSpanCount_",
            "kind_",
            "tracestate_",
            "resource_",
          };
          java.lang.String info =
              "\u0000\u0010\u0000\u0000\u0001\u0010\u0010\u0000\u0000\u0000\u0001\n\u0002\n\u0003" +
              "\n\u0004\t\u0005\t\u0006\t\u0007\t\b\t\t\t\n\t\u000b\t\f\t\r\t\u000e\f\u000f\t\u0010" +
              "\t";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<io.opencensus.proto.trace.v1.Span> parser = PARSER;
        if (parser == null) {
          synchronized (io.opencensus.proto.trace.v1.Span.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<io.opencensus.proto.trace.v1.Span>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:opencensus.proto.trace.v1.Span)
  private static final io.opencensus.proto.trace.v1.Span DEFAULT_INSTANCE;
  static {
    Span defaultInstance = new Span();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      Span.class, defaultInstance);
  }

  public static io.opencensus.proto.trace.v1.Span getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Span> PARSER;

  public static com.google.protobuf.Parser<Span> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

